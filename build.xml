<?xml version="1.0"?>

<project name="aost" default="dist" basedir=".">
	                            
	<property name="dir.project" value="${basedir}" />

	<property file="build.properties" />

	<property name="dir.source" value="${dir.project}/src" />
	<property name="dir.source.aost" value="${dir.source}/aost" />
	<property name="dir.source.test" value="${dir.source}/example" />

	<property name="dir.build" value="${dir.project}/out" />
	<property name="dir.build.aost" value="${dir.build}/production" />
	<property name="dir.build.test" value="${dir.build}/test" />

	<property name="dir.lib" value="${dir.project}/lib" />

	<property name="dir.dist" value="${dir.project}/dist" />

	<path id="lib.path">
		<fileset dir="${dir.lib}">
			<include name="*.jar" />
			<exclude name="*-src.jar" />
			<include name="*.class" />
		</fileset>
	</path>

	
	<!-- Match runtime libraries -->
	<patternset id="pattern.libs">
		<include name="**/*.jar" />
		<exclude name="**/*-src.jar"/>
		<!--exclude name="**/*junit.jar"/-->
	</patternset>

	<!--taskdef resource="net/sf/antcontrib/antcontrib.properties"/-->

	<path id="junit.classpath">
		<fileset dir="${dir.lib}">
			<include name="junit*.jar"/>
		</fileset>
	</path>

	<path id="aost.classpath">
		<path refid="lib.path" />
		<pathelement location="${dir.build.aost}" />
	</path>

	<path id="test.classpath">
		<path refid="aost.classpath" />
		<path refid="junit.classpath" />
		<pathelement location="${dir.build.test}" />
	</path>

	<path id="project.classpath">
		<path refid="test.classpath" />
	</path>

	<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" classpathref="junit.classpath" />

	<target name="clean">
		<echo message="Cleaning ..." />
		<delete dir="${dir.build.aost}" />
		<delete dir="${dir.build.test}" />
		<delete dir="${dir.dist}" />
	</target>


    <!-- output the build environment -->
    <target name="env" description="Outputs the build environment">
        <tstamp>
            <format property="time.formatted" pattern="MM/dd/yyyy hh:mm:ss a" unit="hour" />
        </tstamp>
        <echo message="--- BUILD ENVIRONMENT ---" />
        <echo message="build time: ${time.formatted}" />
        <echo message="ANT_HOME: ${env.ANT_HOME}" />
    	<echo message="ant version: ${ant.version}" />
        <echo message="JAVA_HOME: ${javahome}" />
        <echo message="java version: ${java.version}" />
    	<echo message="project path: ${basedir}" />
    	<echo message="project name: ${ant.project.name}" />
    	<echo message="project version: ${version}" />
    	<echo message="source code revision: ${version}" />
    </target>

	<target name="init">
		<echo message="Initializing project..." />
		<tstamp>
			<format property="time.formatted" pattern="MM/dd/yyyy hh:mm:ss a" unit="hour" />
		</tstamp>
		<mkdir dir="${dir.build}" />
		<mkdir dir="${dir.build.aost}" />
		<mkdir dir="${dir.build.test}" />
    </target>

    <macrodef name="compile-java">
            <!-- required attributes -->
            <attribute name="srcdir" />
            <attribute name="destdir" />
            <attribute name="excludes" default="" />

            <!-- these defaults can be changed using properties -->
            <attribute name="compiler" default="${javac.compiler}" />
            <attribute name="debug" default="${javac.debug}" />
            <attribute name="optimize" default="${javac.optimize}" />
            <attribute name="deprecation" default="${javac.deprecation}" />
            <attribute name="fork" default="${javac.fork}" />

            <!-- these defaults can only be overridden explicitly by a task -->
            <attribute name="encoding" default="UTF-8" />
            <attribute name="includeAndRunTime" default="no" />
            <attribute name="failonerror" default="false" />

            <!-- this element sucks up all elements when the macro is used -->
            <element name="javac-elements" implicit="yes" />

            <!-- the macro body -->
            <sequential>
                    <javac srcdir="@{srcdir}"
                            excludes="@{excludes}"
                            destdir="@{destdir}" compiler="@{compiler}"
                            debug="@{debug}"
                            optimize="@{optimize}"
                            deprecation="@{deprecation}"
                            fork="@{fork}"
                            encoding="@{encoding}" failonerror="@{failonerror}">
                    </javac>
            </sequential>
    </macrodef>

   <taskdef name="groovyc" 
			classname="org.codehaus.groovy.ant.Groovyc"
			classpathref="lib.path"
			/>

	<target name="compile-aost" depends="init">
		<echo message="Compiling java..." />
		<groovyc srcdir="${dir.source.aost}"
			destdir="${dir.build.aost}">
			<classpath refid="lib.path" />
        </groovyc>
	</target>


	<target name="dist-init" depends="compile-aost">
		<mkdir dir="${dir.dist}" />
	</target>

	<target name="jar-aost" depends="dist-init">
		<jar destfile="${dir.dist}/aost-${version}.jar">
			<fileset dir="${dir.build.aost}"/>

			<manifest>
				<attribute name="Created-at" value="${time.formatted}" />
				<attribute name="Created-by" value="${user.name}" />
                <attribute name="Main-Class" value="aost.dsl.DslScriptExecutor"/>
            </manifest>
		</jar>
	</target>

	<target name="dist" depends="jar-aost">
		<echo message="Distribution created successfully." />
	</target>

	<target name="compile-test" depends="compile-aost">
		<echo message="Compiling test.." />
		<groovyc srcdir="${dir.source.test}" destdir="${dir.build.test}">
			<classpath refid="aost.classpath" />
			<include name="**" />
		</groovyc>
	</target>

	<target name="run-unit-tests" depends="compile-test">
		<junit fork="yes" forkmode="once" maxmemory="1024m"
			printsummary="yes" errorProperty="test.failed" failureProperty="test.failed">
			<classpath refid="project.classpath" />
			<formatter type="brief" usefile="false" />
			<formatter type="xml" />
			<batchtest todir="${dir.build.test}">
				<fileset dir="${dir.source.test}/test">
					<include name="**/**"/>
				</fileset>
			</batchtest>
		</junit>

		<!--junitreport todir="${dir.build.test}">
    		<fileset dir="${dir.build.test}">
      			<include name="TEST-*.xml" />
    		</fileset>
    		<report todir="${dir.build.test}" />
  		</junitreport-->

		<fail if="test.failed" />
	</target>

</project>
