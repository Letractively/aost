#summary Tellurium Mock Http Server.
#labels Phase-Support

== Prerequisites ==
 
  * Use Tellurium Core 0.7.0-SNAPSHOT
  * Use Java 6

== Motivation ==

From time to time, some Tellurium users ask us to help with some tests by providing us their HTML sources. Because we do not have the access to their web applications but the piece of HTML source, it is really difficult for us to test and debug against their HTML source. One possible is to manually create a HTML page based on the HTML source they provided and then use some Web server such as Jetty to rend the HTML for us, but this requires some extra work and need to run a web server instance. Java 6 provides a built-in Http server, which we can leverage and render the users' HTML sources.

The Java 6 http server can be used to build an embedded http server to automatically render whatever HTML source we provide to it. Since the http server is an embedded one, it is very easy to start and stop it programmatically, for example, we can put the start procedure in the @BeforeClass method and the stop procedure in the @AfterClass method in JUnit or TestNG. 

Another advantage for us to use an embedded http server is to test some special web content without creating a Web application. For example, we want to test some new methods for the Tellurium List object. We can simply create a HTML source and use the embedded http server to render it. 

== Tellurium Mock Http Server ==

Tellurium mock http server is designed to achieve the goals in the motivation section. 
Tellurium defined two classes, i.e.,  MockHttpHandler and MockHttpServer.

=== MockHttpHandler ===

The MockHttpHandler is a class to process the http request,

{{{
public class MockHttpHandler implements HttpHandler {

  private Map<String, String> contents = new HashMap<String, String>();

  private String contentType = "text/html";

  public void handle(HttpExchange exchange) {
     ......
  }
}
}}}

The main method in MockHttpHandler is {{{handle(HttpExchange exchange)}}}, which reads the request URI, finds the corresponding response HTML source from the hashmap _contents_, and then render it.

By default, the response will be rendered as a HTML source, you can change this by calling

{{{
public void setContentType(String contentType)
}}}

MockHttpHandler also includes two methods to add URI and its HTML source to the hashmap _contents_, i.e.,

{{{
public void registerBody(String url, String body)

public void registerHtml(String url, String html)
}}}

The MockHttpHandler comes with a default HTML template as follows,

{{{
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>Mock HTTP Server</title>
    </head>
    <body>
    BODY_HTML_SOURCE   
    </body>
</html>
}}}

If you call {{{registerBody(String url, String body)}}}, the MockHttpHandler will use the above HTML template to wrap the HTML body. You overwrite the template by directly calling {{{registerHtml(String url, String html)}}}, which will use the whole HTML source you provide.

Normally, the MockHttpHandler will be encapsulated by the MockHttpServer and you don't really need to operate on it directly.

=== MockHttpServer ===

The MockHttpServer includes an embedded http server, a http handler, and a http port:

{{{
public class MockHttpServer {
  //default port
  private int port = 8080;

  private HttpServer server = null;
  private MockHttpHandler handler;

  public MockHttpServer() {
    this.handler = new MockHttpHandler();
    this.server = HttpServer.create();
  }

  public MockHttpServer(int port) {
    this.handler = new MockHttpHandler();
    this.port = port;
    this.server = HttpServer.create();
  }

  public MockHttpServer(int port, HttpHandler handler) {
    this.port = port;
    this.handler = handler;
    this.server = HttpServer.create();
  }

  ......
}
}}} 

As you can see, the MockHttpServer provides three different constructors so that you can overwrite the default values. The MockHttpServer encapsulates the MockHttpHander by providing the following methods,

{{{
public void setContentType(String contentType)

public void registerHtmlBody(String url, String body)

public void registerHtml(String url, String html)
}}}

The server stop and start methods are listed as follows,

{{{
public void start()

public void stop()
}}}

== How to Use ? ==

== Limitations ==

== Resources ==

  * [http://java.sun.com/javase/6/docs/jre/api/net/httpserver/spec/com/sun/net/httpserver/package-summary.html HttpServer Java Doc]


  