#summary Top Ten Tellurium Features.
#labels Phase-Implementation,Phase-Support
<wiki:toc max_depth="3" />

== UI Module ==

UI Module is the key concept of Tellurium. What is UI module? UI module is a collection of UI elements you group them together. Usually, the UI module represents a composite UI object in the format of nested basic UI elements. For example, the download search module in Tellurium project site is defined as follows,

{{{
ui.Form(uid: "downloadSearch", clocator: [action: "list", method: "get"], group: "true") {
   Selector(uid: "downloadType", clocator: [name: "can", id: "can"])
   InputBox(uid: "searchBox", clocator: [name: "q"])
   SubmitButton(uid: "searchButton", clocator: [value: "Search"])
}
}}}

Be aware that in most case the UI elements inside the composite UI object have relationship to each other. In the DOM structure, they should be on the same sub-tree with the top UI element as the parent. The exception is the [http://code.google.com/p/aost/wiki/LogicalContainer Logical Container].

[http://code.google.com/p/aost/wiki/Tellurium_A_New_Approach_for_Web_Test Why UI module concept is so important]? It is the foundation that Tellurium built on. First, UI module makes it possible to build UI elements' locator at runtime, which also makes Tellurium robust to changes in internal UI elements. Second, UI module makes Tellurium expressive. You can refer a UI element by simply appending the names along the path to the specific element. For example, in the Tellurium download search module, you can refer the Selector element as "downloadSearch.downloadType". Other reasons include 
  * UI module makes Group Locating possible. 
  * UI module makes composite objects reusable in term of widget objects. 
  * UI module will make Tellurium move to a different future path from Selenium to more efficiently support UI Module.

== jQuery Selector ==

Starting with version 0.6.0, Tellurium will support a [http://code.google.com/p/aost/wiki/TelluriumjQuerySelector jQuery selector] to address the problem of poor performance of xpath in Internet Explorer. Auto-generating jQuery instead of xpath has the following advantages:
  * Faster performance in IE.
  * We are able to use the power of jQuery to call methods on jQuery collections to retrieve bulk data.
  * Tellurium jQuery selector supports the jQuery attribute selectors such as _[attribute!=value]_, _[attribute^=value]_, _[attribute$=value]_, and _[attribute*=value]_.

To use jQuery selector, simply call 

{{{
useJQuerySelector()
}}} 

in you code. To switch back to XPath locator, you should call

{{{
disableJQuerySelector()
}}}

Be aware that the UI module is agnostic to the locate strategy you choose and thus, you do not need to change anything in your test code. 

Our Benchmark test results show that:

  # jQuery selector is as fast as Ajaxslt XPath and Javascript XPath in Firefox 3.
  # jQuery selector is much faster in IE 7 than the two XPath libraries
  # jQuery selector uses only one method call to get back data for all table cells and thus it is the fastest one for bulk data access.

[http://code.google.com/p/aost/wiki/jQuerySelectorCache jQuery cache] is a mechanism to further improve the speed by reusing the found DOM reference for a given jQuery selector. Our benchmark results show that the jQuery cache could improve the speed by up to 14% over the regular jQuery selector and over 27% for some extreme cases.

== Group Locating ==

== UI Templates ==

== Javascript Events ==

== Tellurium Widgets ==

== Reconfigurable ==

== Built-in Support for JUnit and TestNG ==

== Data Driven Test ==

== The Dump Method ==