#summary Tellurium Engine: An Object-based Test Driving Engine.
#labels Phase-Implementation,Phase-Support

= Introduction =

Tellurium Engine is an object based test driving engine. It has the following features.

  * UI module group locating
  * UID based API
  * Macro Command
  * UI module caching and reuse


= Architecture =

= Macro Command =

Multiple API calls could be bundled into one API call, i.e., {{{getBundleResponse(bundle)}}}.

The following method parses each command in the bundle, dispatch to Tellurium Engine or Selenium core, and construct the response object for the bundle.

{{{
Tellurium.prototype.dispatchMacroCmd = function(){
    var response = new BundleResponse();

    while (this.macroCmd.size() > 0) {
        var cmd = this.macroCmd.first();
        if(cmd.name == "getUseUiModule"){
            //do UI module locating
            var result = this.useUiModule(cmd.args[0]);
            response.addResponse(cmd.sequ, cmd.name, ReturnType.OBJECT, result);
        }else{
            //for other commands
             if ((!this.isUseTeApi) || this.isApiMissing(cmd.name)) {
                this.delegateToSelenium(response, cmd);
            }else{
               this.delegateToTellurium(response, cmd);
            }
        }
    }

    return response.toJSon();
};
}}}


= Tellurium Object =

Tellurium object is the main object in Tellurium Engine.

{{{

function Tellurium(){

    this.currentWindow = null;

    this.currentDocument = null;

    //whether to use Tellurium new jQuery selector based APIs
    this.isUseTeApi = false;

    //Macro command for Tellurium
    this.macroCmd = new MacroCmd();

    this.browserBot = new TelluriumBrowserBot();

    this.dom = null;

    this.cache = new TelluriumUiCache();

    this.uiAlg = new UiAlg();

    this.textWorker = new TextUiWorker();

    this.cssBuilder = new JQueryBuilder();

    this.cmdMap = new Hashtable();

    //UI object name to Javascript object builder mapping
    this.uiBuilderMap = new Hashtable();

    //JQuery Builder
    this.jqbuilder = new JQueryBuilder();

    //identifier generator
    this.idGen = new Identifier(100);

    //log manager for Tellurium
    this.logManager = new LogManager();

    //outlines
    this.outlines = new Outlines();

    this.currentDom = null;

    this.jqExecutor = new JQueryCmdExecutor();
    this.synExecutor = new SynCmdExecutor();
    this.selExecutor = new SeleniumCmdExecutor();
    
    this.cmdExecutor = this.synExecutor;

    //Proxy object
    this.proxyObject = new UiProxyObject();
}

}}}

= UID Based API =

Tellurium Engine API is UID based, not locator base. For example, the type method is defined as.

{{{
  Tellurium.prototype.type = function(uid, val){
    ......
  }
}}}

That is to say, you can call the api like

{{{
  type("GoogleSearchModule.Input", "Tellurium test")
}}}

= Tellurium UI Objects =

Tellurium UI objects are build blocks for Tellurium UI module. The basic UI object is defined as

{{{
//base UI object
var UiObject = Class.extend({
    
    init: function() {
        //reference ID during UI module recording and generating process
        this.refId = null;

        //UI object identification
        this.uid = null;

        //meta data
        this.metaData = null;

        //its parent UI object
        this.parent = null;

        //namespace, useful for XML, XHTML, XForms
        this.namespace = null;

        this.locator = null;
        
        //optional attributes
        this.optionalAttributes = null;

        //event this object should be respond to
        this.events = null;

        //should we do lazy locating or not, i.e., wait to the time we actually use this UI object
        //usually this flag is set because the content is dynamic at runtime
        this.lazy = false;

        //If it is contained in its parent or not
        this.self = false;

        this.uiType = null;

        //Tellurium Core generated locator for this UI Object
        this.generated = null;

        //dom reference
        this.domRef = null;

        //UI Module reference, which UI module this UI object belongs to
        this.uim = null;

        //the node associated with this UiObject
        this.node = null;
        
    },

    fullUid: function() {
        if (this.parent != null) {
            return this.parent.fullUid() + "." + this.uid;
        }

        return this.uid;
    },

    respondsTo: function(methodName) {
        return this[methodName] != undefined; 
    },

    traverse: function(context, visitor){
        visitor.visit(context, this);
    },

    around: function(context, visitor){
        visitor.before(context, this);
        visitor.after(context, this);
    },

    walkTo: function(context, uiid) {
       .......
    },

......
}
}}}

In addition, the basic UI object includes a list of methods existing in all UI objects.

{{{
    focus: function(context){
        var element = context.domRef;
        tellurium.cmdExecutor.focus(element);
    },

    click: function(context){
        var element = context.domRef;
        tellurium.cmdExecutor.click(element);
    },

    mouseOver: function(context){
        var element = context.domRef;
        tellurium.cmdExecutor.mouseOver(element);
    },

    getValue: function(context) {
        var element = context.domRef;
        return tellurium.cmdExecutor.getValue(element);
    },

    getAttribute: function(context, attribute){
        var element = context.domRef;
        return tellurium.cmdExecutor.getAttribute(element, attribute);
    },

    getText: function(context){
        var element = context.domRef;
        return tellurium.cmdExecutor.getText(element);
    },

    isVisible: function(context){
        var element = teJQuery(context.domRef);
        return tellurium.cmdExecutor.isVisible(element);
    },
    
......

}}}

where the command executor cmdExecutor will be discussed in the next section.

All Tellurium UI objects inherit from the basic object, for example, The InputBox object has extra methods such as type() and typeKey().

{{{
var UiInputBox = UiObject.extend({
    init: function(){
        this._super();
        this.uiType = 'InputBox';
        this.tag = "input";
    },

    type: function(context, val){
        var element = context.domRef;
        tellurium.cmdExecutor.type(element, val);
    },

    typeKey: function(context, key){
        var element = context.domRef;
        tellurium.cmdExecutor.typeKey(element, key);
    },
......
});

}}}

The List and Table objects are used to represent UI templates in Tellurium. For example, the List object is defined as.

{{{

var UiList = UiContainer.extend({
    init: function(){
        this._super();
        this.uiType = 'List';
        this.noCacheForChildren = true;
        this.separator = null;
        this.defaultUi = new UiTextBox();
        this.rTree= new RTree();
    },

    getListSize: function(context){
        ......
    },

    ......
}}}

The flag noCacheForChildren is used to indicate that the List holds UI templates and the Engine will not try to cache its child nodes. The rTree is used to for Tellurium UID Description Language to find the actual UID reference. 

UI objects are build from UI object builders. The basic UI object builder is defined as.

{{{

var UiObjectBuilder = Class.extend({
    build: function(){
        return new UiObject();
    },

    buildFrom: function(attributes, respond){
        var obj = this.build();
        obj.tag = attributes.get(CONSTANTS.TAG);
        obj.respond = respond;
        obj.locator = new CompositeLocator();
        obj.locator.buildLocator(attributes);

        return obj;
    }
});

}}}

All UI object builders extend the basic builder, for example.

{{{
var UiInputBoxBuilder = UiObjectBuilder.extend({
    build : function(){
        return new UiInputBox();
    }
});
}}}

= Command Executor =

The command executor is the actual code to act on JavaScript events. The basic executor is defined as.

{{{
var CmdExecutor = Class.extend({

    init: function() {
        this.ctrl = false;
        this.shift = false;
        this.alt = false;
        this.meta = false;
    }
});

}}}

Tellurium Engine defined three command executors. The first one is jQuery command executor, i.e, use jQuery to fire all JavaScript events and get DOM attributes and states.

{{{

var JQueryCmdExecutor = CmdExecutor.extend({

    init: function() {
        this._super();
    },


    fireEvent: function(element, event){
        teJQuery(element).trigger(event);
    },

    blur: function(element){
        teJQuery(element).blur();
    },
    getText: function(element){
        return teJQuery(element).text();
    },

    isVisible: function(element){
        var isHiddenCSS = element.css("visibility") == "hidden" ? true : false;
        var isHidden = element.is(":hidden");

        if (isHidden) {
            return false;
        } else if (isHiddenCSS) {
            return false;
        } else {
            return true;
        }
    },

    ......

}
}}}

Syn command executor is used to solve the problem that jQuery click event does not work properly in some web application.

{{{
var SynCmdExecutor = JQueryCmdExecutor.extend({

    init: function() {
        this._super();
    },

    click: function(element){
        Syn.click(element);
    },

    ......

});

}}}

The last one is the Selenium command executor, i.e, dispatch command to Selenium core for actions only (not do locating).

{{{

var SeleniumCmdExecutor = SynCmdExecutor.extend({

    init: function() {
        this._super();
    },

    click: function(element) {
        tellurium.setCurrentDom(element);
        selenium.doClick("tedom=current");
    },

    ......
}
}}}

To use different command executors, simply set the command executor in the Tellurium object. For example, we can select the Syn command executor in the following way.

{{{
function Tellurium(){
    ......
    this.cmdExecutor = this.synExecutor;
}
}}}


