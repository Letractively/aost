<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
    
    <title>Tellurium Core Advanced Topics</title>

    <section>
        <title>Data Driven Testing</title>
        <para>
            Data Driven Testing is a different way to write tests. For example, separate test data from the test scripts
            and the test flow is not controlled by the test scripts, but by the input file instead. In the input file,
            users can specify which tests to run, what are input parameters, and what are expected results. Data driven
            testing in Tellurium is illustrated in Figure 2-5 with the following system diagram:
        </para>

        <mediaobject>
            <imageobject>
                <imagedata fileref="./media/TelluriumDataDrivenSmall.jpg" scale="100"></imagedata>
            </imageobject>
        </mediaobject>
        <para>The Tellurium Data Driven Test consists of three main parts:
        </para>
        <orderedlist>
            <listitem>
                <para>Data Provider
                </para>
            </listitem>
            <listitem>
                <para>
                    TelluriumDataDrivenModule
                </para>
            </listitem>
            <listitem>
                <para>
                    TelluriumDataDrivenTest
                </para>
            </listitem>
        </orderedlist>

        <section>
            <title>Data Provider</title>
            <para>
                The Data Provider is responsible for reading data from input stream and converting data to
                Java variables.
            </para>
            <para>Tellurium includes the following Data Provider methods:
            </para>
            <orderedlist>
                <listitem>
                    <para>loadData file_name, load input data from a file
                    </para>
                </listitem>
                <listitem>
                    <para>
                        useData String_name, load input data from a String in the test script
                    </para>
                </listitem>
                <listitem>
                    <para>
                        bind(field_name), bind a variable to a field in a field set
                    </para>
                </listitem>
                <listitem>
                    <para>
                        closeData, close the input data stream and report the test results
                    </para>
                </listitem>
                <listitem>
                    <para>
                        cacheVariable(name, variable), put variable into cache
                    </para>
                </listitem>
                <listitem>
                    <para>
                        getCachedVariable(name, variable), get variable from cache where the file_name
                        includes the file path. For example:
                    </para>
                    <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
loadData "src/test/example/test/ddt/GoogleBookListCodeHostInput.txt"
]]>
                    </programlisting>
                </listitem>
            </orderedlist>

            <para>Tellurium supports pipe format and CSV format input file.  To change the file reader for different formats, change the following settings in the configuration file TelluriumConfig.groovy:
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
datadriven{
  dataprovider{
    //specify which data reader you like the data provider to use
    //the valid options include:
    //   "PipeFileReader", "CSVFileReader", "ExcelFileReader"
    //at this point
    reader = "PipeFileReader"
  }
}
]]>
            </programlisting>

            <para>Tellurium&apos;s useData is designed to specify test data in the test scripts
                directly. It loads input from a String. The String is usually defined in Groovy style using
                triple quota, for example:
            </para>
            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
protected String data = """
  google_search | true | 865-692-6000 | tellurium
  google_search | false| 865-123-4444 | tellurium selenium test
  google_search | true | 755-452-4444 | tellurium groovy
  google_search | false| 666-784-1233 | tellurium user group
  google_search | true | 865-123-5555 | tellurium data driven
  """
  ...

  useData data
]]>
            </programlisting>

            <para>
                <literal>bind</literal>
                is the command used to bind a variable to an input Field Set field at runtime.
                <literal>FieldSet</literal>
                is the format of a line of data. For example:
            </para>
            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
def row = bind("GCHLabel.row")
]]>
            </programlisting>
            <para>is used to bind the row variable to the &quot;row&quot; field in the FieldSet &quot;GCHLabel&quot;.
                Tellurium does not explicitly differentiate input parameters from the expected results in
                the input data. To bind variables to the input data then use any of them as the expected
                results for result comparison.
            </para>
            <para>
                cacheVariable and getCachedVariable are used to pass intermediate variables among tests.
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        cacheVariable is used to put a variable into a cache
                    </para>
                </listitem>
                <listitem>
                    <para>
                        getCachedVariable is used to get back the variable
                    </para>
                </listitem>
            </itemizedlist>
            <para>For example:
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
int headernum = getTableHeaderNum()
cacheVariable("headernum", headernum)

...

int headernum = getCachedVariable("headernum")
...
]]>
            </programlisting>

            <para>When testing is completed, use &quot;closeData&quot; to close the input
                data stream. In the meantime, the result reporter outputs the test results in the format
                specified in the configuration file.
            </para>
            <para>
                For example: the XML file as shown in the TelluriumConfig.groovy file:
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
test{
  result{
    //specify what result reporter used for the test result
    //valid options include "SimpleResultReporter", "XMLResultReporter",
    //and "StreamXMLResultReporter"
    reporter = "XMLResultReporter"

    //the output of the result
    //valid options include "Console", "File" at this point
    //if the option is "File", you need to specify the file name,
    //other wise it will use the default
    //file name "TestResults.output"
    output = "Console"

    //test result output file name
    filename = "TestResult.output"
  }
}
]]>
            </programlisting>
            
        </section>

        <section>
            <title>TelluriumDataDrivenModule</title>
            <para>
                <literal>TelluriumDataDrivenModule</literal>
                is used to define modules, where users can define UI Modules, FieldSets, and tests as
                shown in the following Figure sequence diagram. Users should extend this class to
                define their own test modules.
            </para>

            <mediaobject>
                <imageobject>
                    <imagedata fileref="./media/TelluriumDDTModule.png" scalefit="1" width="100%"></imagedata>
                </imageobject>
            </mediaobject>
            
            <para>
                <literal>TelluriumDataDrivenModule</literal>
                provides one method &quot;defineModule&quot; for users to implement. Since it extends
                the DslContext class, users define UI modules as in regular Tellurium UI Modules. For
                example:
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
ui.Table(uid: "labels_table", clocator: [:], group: "true"){
   TextBox(uid: "{row: 1, column: 1} as Label", clocator: [tag: "div",
           text: "Example project labels:"])
   Table(uid: "{row: 2, column: 1}", clocator: [header: "/div[@id=\"popular\"]"]){
        UrlLink(uid: "{row: all, column: all}", locator: "/a")
   }
}
]]>
            </programlisting>

            <para>
                FieldSet defines the format of one line of input data. FieldSet consists of
                fields such as columns, in the input data. There is a special field &quot;test&quot;,
                where users can specify what tests this line of data applies to. For example:
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
fs.FieldSet(name: "GCHStatus", description: "Google Code Hosting input") {
    Test(value: "getGCHStatus")
    Field(name: "label")
    Field(name: "rowNum", type: "int")
    Field(name: "columNum", type: "int")
}
]]>
            </programlisting>

            <para>
                FieldSet defines the input data format for testing Google code hosting web
                page.
            </para>
            <para>
                <emphasis role="bold">Note:</emphasis>
                The Test field must be the first column of the input data.
            </para>
            <para>
                The default name of the test field is &quot;test&quot; and does not need to
                be specified. If the value attribute of the test field is not specified, it implies this
                same format. For example, FieldSet is used for different tests.
            </para>
            <para>
                A regular field includes the following attributes:
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
class Field {
        //Field name
        private String name

        //Field type, default is String
        private String type = "String"

        //optional description of the Field
        private String description

        //If the value can be null, default is true
        private boolean nullable = true

        //optional null value if the value is null or not specified
        private String nullValue

        //If the length is not specified, it is -1
        private int length = -1

        //optional String pattern for the value
        //if specified, use it for String validation
        private String pattern
} 
]]>
            </programlisting>

            <para>
                Tellurium can automatically handle Java primitive types.
            </para>
            <para>Another flexibility Tellurium provides is allowing users to define their own
                custom type handlers to deal with more complicated data types by using &quot;typeHandler&quot;.
                For example:
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
//define custom data type and its type handler

typeHandler "phoneNumber", "org.tellurium.test.PhoneNumberTypeHandler"

//define file data format
fs.FieldSet(name: "fs4googlesearch", description: "example field set for google search"){
    Field(name: "regularSearch", type: "boolean",
          description: "whether we should use regular search or use I'm feeling lucky")
    Field(name: "phoneNumber", type: "phoneNumber", description: "Phone number")
    Field(name: "input", description: "input variable")
}
]]>
            </programlisting>

            <para>The above script defines a custom type &quot;PhoneNumber&quot; and the Tellurium
                automatically calls this type handler to convert the input data to the &quot;PhoneNumber&quot;
                Java type.
            </para>

            <para>The &quot;defineTest&quot; method is used to define a test in the
                TelluriumDataDrivenModule. For example, the following script defines the &quot;clickGCHLabel&quot;
                test:
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
defineTest("clickGCHLabel"){
    def row = bind("GCHLabel.row")
    def column = bind("GCHLabel.column")

    openUrl("http://code.google.com/hosting/")
    click  "labels_table[2][1].[${row}][${column}]"

    waitForPageToLoad 30000
}
]]>
            </programlisting>

            <para>
                <emphasis role="bold">Note:</emphasis>
                The bind command binds variables row, column to the fields &quot;row&quot; and &quot;column&quot;
                in the FieldSet &quot;GCHLabel&quot;.
            </para>

            <para>Tellurium also provides the command &quot;compareResult&quot; for users to compare the
                actual result with the expected result. For example, the following script compares the
                expected label, row number, and column number with the acutal ones at runtime:
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
defineTest("getGCHStatus"){
    def expectedLabel = bind("GCHStatus.label")
    def expectedRowNum = bind("GCHStatus.rowNum")
    def expectedColumnNum = bind("GCHStatus.columNum")

    openUrl("http://code.google.com/hosting/")
    def label = getText("labels_table[1][1]")
    def rownum = getTableMaxRowNum("labels_table[2][1]")
    def columnum = getTableMaxColumnNum("labels_table[2][1]")

    compareResult(expectedLabel, label)
    compareResult(expectedRowNum, rownum)
    compareResult(expectedColumnNum, columnum)
    pause 1000
}
]]>
            </programlisting>

            <para>Sometimes users may require custom &quot;compareResult&quot; to handle more complicated
                situations. For example, when users compare two lists, users can override the default &quot;compareResult&quot;
                behaviour by specifying custom code in the closure:
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
compareResult(list1, list2){
    assertTrue(list1.size() == list2.size())
    for(int i=0; i<list1.size();i++){
        //put your custom comparison code here
    }
}
]]>
            </programlisting>

            <para>If users want to check a variable in the test, the &quot;checkResult&quot; method is used coming with
                a closure where users define the actual assertions inside:
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
checkResult(issueTypeLabel) {
    assertTrue(issueTypeLabel != null)
}
]]>
            </programlisting>

            <para>Like &quot;compareResult&quot;, &quot;checkResult&quot; captures all assertion errors. The test
                resumes even when the assertions fail. The result is reported in the output.
            </para>

            <para>In addition, the &quot;logMessage&quot; is used by users to log any messages in the output.
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
logMessage "Found ${actual.size()} ${issueTypeLabel} for owner " + issueOwner
]]>
            </programlisting>

        </section>

        <section>
            <title>Tellurium Data Driven Test</title>
            <para>TelluriumDataDrivenTest is the class users should extend to run the actual
                data driven testing. It is more like a data driven testing engine. There is only one method,
                &quot;testDataDriven&quot;, which users implement. The sequence diagram for the testing
                process is shown in the following Figure:
            </para>

            <mediaobject>
                <imageobject>
                    <imagedata fileref="./media/elluriumDDTTestSequence.png" scalefit="1" width="100%"></imagedata>
                </imageobject>
            </mediaobject>

            <para>Complete the following steps to use TelluriumDataDrivenTest:
            </para>

            <orderedlist>
                <listitem>
                    <para>Use &quot;includeModule&quot; to load defined Modules
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Use &quot;loadData&quot; or &quot;useData&quot; to load input data stream
                    </para>
                </listitem>
                <listitem>
                    <para>Use &quot;stepToEnd&quot; to read the input data
                        line by line and pick up the specified test and run it, until reaches the end of the
                        data stream
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Use &quot;closeData&quot; to close the data stream and output the test results
                    </para>
                </listitem>
            </orderedlist>

            <para>What the &quot;includeModule&quot; does is to merge in all
                Ui modules, FieldSets, and tests defined in that module file to the global registry.
            </para>
            <para>&quot;stepToEnd&quot; looks at each input line, first find the test name and
                pass in all input parameters to it, and then run the test. The whole process is illustrated
                in the following example:
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
class GoogleBookListCodeHostTest extends TelluriumDataDrivenTest{

    public void testDataDriven() {
        includeModule  example.google.GoogleBookListModule.class
        includeModule  example.google.GoogleCodeHostingModule.class
        //load file
        loadData "src/test/example/test/ddt/GoogleBookListCodeHostInput.txt"

        //read each line and run the test script until the end of the file
        stepToEnd()

        //close file
        closeData()
   }
}
]]>
            </programlisting>

            <para>The input data for this example are as follows: </para>

            <programlisting language="sh"><?db-font-size 75% ?>
<![CDATA[
##TEST should be always be the first column

##Data for test "checkBookList"
##TEST | CATEGORY | SIZE
checkBookList|Fiction|8
checkBookList|Fiction|3

##Data for test "getGCHStatus"
##TEST | LABEL | Row Number | Column Number
getGCHStatus |Example project labels:| 3 | 6
getGCHStatus |Example project| 3 | 6

##Data for test "clickGCHLabel"
##TEST | row | column
clickGCHLabel | 1 | 1
clickGCHLabel | 2 | 2
clickGCHLabel | 3 | 3
]]>
            </programlisting>

            <para>
                <emphasis role="bold">Note:</emphasis>
                The line starting with &quot;##&quot; is the comment line and the empty line is ignored.
            </para>
            <para>If users want to control the testing
                execution flow by themselves, Tellurium also provides this capability even though its use is
                <emphasis role="bold">not recommended</emphasis>.
            </para>
            <para>Tellurium provides two additional commands, &quot;step&quot; and &quot;stepOver&quot;.
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        &quot;step&quot; is used to read one line of input data and run it.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        &quot;stepOver&quot; is used to skip one line of input data.
                    </para>
                </listitem>
            </itemizedlist>

            <para>In this meanwhile, Tellurium also allows the user to specify additional test scripts using
                closure. For example:
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
step{
    //bind variables
    boolean regularSearch = bind("regularSearch")
    def phoneNumber = bind("fs4googlesearch.phoneNumber")
    String input = bind("input")
    openUrl "http://www.google.com"
    type "google_start_page.searchbox", input
    pause 500
    click "google_start_page.googlesearch"
    waitForPageToLoad 30000
}
]]>
            </programlisting>

            <para>This usually implies that the input data format is unique
                or the test script knows about what format the current input data are using.
            </para>
        </section>

        <section>
            <title>Implementations</title>
            <para>Historically,
                the Tellurium Data Driven evolved from
                <link xlink:href="http://code.google.com/p/jianwikis/wiki/FieldSetObjectMappingFramework">the
                    Field Set Object Mapping Framework (FSOM)
                </link>
                Jian worked for a batch processor. The FSOM framework acts as a converter layer, i.e., to
                convert Java Objects to and from field sets. What are field sets? A field set is a set of
                data to represent the format of a flat file or other types of files.
            </para>
            <para>The Architecture of the FSOM framework is shown in the following diagram,</para>

            <mediaobject>
                <imageobject>
                    <imagedata fileref="./media/FsomArchitecture.png" scale="100"></imagedata>
                </imageobject>
            </mediaobject>
            
            <para>As you can see from the above architecture, Tellurium inherited a lot of concepts from the
                FSOM framework. The major move from the FSOM framework to Tellurium Data Driven Testing is the adoption
                of the Groovy BuilderSupport class, which removed the need for the Spring bean factory and XML
                configuration parser. The Groovy BuilderSupport class makes it very easy to write the Field
                Set in an expressive way. For example,
            </para>

            <programlisting language="sh"><?db-font-size 75% ?>
<![CDATA[
//define custom data type and its type handler

typeHandler "phoneNumber", "org.tellurium.test.PhoneNumberTypeHandler"

//define file data format
fs.FieldSet(name: "fs4googlesearch", description: "example field set for google search"){
    Field(name: "regularSearch", type: "boolean",
          description: "whether we should use regular search or use I'm feeling lucky")
    Field(name: "phoneNumber", type: "phoneNumber", description: "Phone number")
    Field(name: "input", description: "input variable")
}
]]>
            </programlisting>

            <para>Note that the above script defines a custom type &quot;PhoneNumber&quot; and Tellurium
                automatically calls this type handler to convert the input data to the &quot;PhoneNumber&quot;
                Java type.
            </para>
            <para>Under the hood, Tellurium uses the Groovy BuilderSupport class to parse the nested objects
                and here is the code for that purpose.
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
class FieldSetParser extends BuilderSupport{
    protected final static String FIELD_SET = "FieldSet"
    protected final static String FIELD = "Field"
    protected final static String IDENTIFIER = "Identifier"
    protected final static String TEST = "Test"

    private FieldSetRegistry registry

    public FieldSetParser(FieldSetRegistry registry){
        this.registry = registry
    }

    private FieldBuilder fb = new FieldBuilder()
    private FieldSetBuilder fsb = new FieldSetBuilder()
    private IdentifierFieldBuilder fsi = new IdentifierFieldBuilder()
    private TestFieldBuilder afb = new TestFieldBuilder()

    protected void setParent(Object parent, Object child) {
        if (parent instanceof FieldSet) {
            FieldSet fs = (FieldSet)parent
            fs.addField(child)
        }
    }

    protected Object createNode(Object name) {
        if(FIELD_SET.equalsIgnoreCase(name))
            return new FieldSet()
        if(FIELD.equalsIgnoreCase(name))
            return new Field()
        if(IDENTIFIER.equalsIgnoreCase(name))
            return new IdentifierField()
        if(TEST.equalsIgnoreCase(name))
            return new TestField()

        return null
    }

    protected Object createNode(Object name, Object value) {
        return null
    }

    protected Object createNode(Object name, Map map) {
        if(FIELD_SET.equalsIgnoreCase(name))
            return fsb.build(map)
        if(FIELD.equalsIgnoreCase(name))
            return fb.build(map)
        if(IDENTIFIER.equalsIgnoreCase(name))
            return fsi.build(map)
        if(TEST.equalsIgnoreCase(name))
            return afb.build(map)

        return null
    }

    protected Object createNode(Object name, Map map, Object value) {
        if(FIELD_SET.equalsIgnoreCase(name))
            return fsb.build(map, (Closure)value)

        return null
    }

    protected void nodeCompleted(Object parent, Object node) {
        //when the node is completed and it is a FieldSet, put it into the registry
        if (node instanceof FieldSet) {

            FieldSet fs = (FieldSet)node

            //need to check if the identifier is presented
            fs.checkFields()

            //only put the top level nodes into the registry
            registry.addFieldSet(fs)
        }
    }

}
]]>
            </programlisting>

        </section>
    </section>

    <section>
        <title>Selenium Grid Support</title>
        <para>Selenium Grid transparently distributes tests on multiple machines so that the tests
            are run in parallel. Recently support for the Selenium Grid has been added to Tellurium. Now
            Tellurium tests can be run against different browsers using Selenium Grid. Tellurium core is
            updated.
        </para>
        <para>For example, assume 3 machines are set up to run Tellurium tests on the Selenium Grid. All
            the steps can be completed on the userâs local box. To do this locally, remove the machine
            names with<literal>localhost</literal>. Each machine in this set up has a defined role as
            described below:
        </para>
        <orderedlist>
            <listitem>
                <para>
                    <emphasis role="bold">dev1.tellurium.com</emphasis>
                    Tellurium test development machine.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">hub.tellurium.com</emphasis>
                    Selenium Grid hub machine that drives the tests.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">rc.tellurium.com</emphasis>
                    Multiple Selenium RC server running and registered to the Selenium Grid HUB.
                </para>
            </listitem>
        </orderedlist>

        <para>The actual test execution is completed on this machine. Register as many Selenium RC servers
            as required. However, be realistic about the hardware specification.
        </para>
        <para>
            Download the Selenium Grid from the following URL and extract the contents of the folder on
            each of these machines.
        </para>
        <para>
            Tellurium uses Selenium Grid 1.0.3, the current released version.<link
                xlink:href="http://selenium-grid.seleniumhq.org/download.html">
            http://selenium-grid.seleniumhq.org/download.html</link>. Figure 2-8 shows an
            illustration of the environment.
        </para>

        <mediaobject>
            <imageobject>
                <imagedata fileref="./media/TelluriumGridSetup.png" scalefit="1" width="100%"></imagedata>
            </imageobject>
        </mediaobject>

        <para>The first step would be to launch the selenium grid hub on the hub machine. Open up a terminal on the HUB
            machine
            <literal>hub.tellurium.com</literal>
            and go to the download directory of Selenium Grid.
        </para>

        <programlisting language="sh"><?db-font-size 75% ?>
<![CDATA[
> cd /Tools/selenium-grid-1.0.3
> ant launch-hub
]]>
        </programlisting>

        <para>
            <emphasis role="bold">Result:</emphasis>
            The Selenium HUB is launched on the machine with different browsers.
            To ensure that the HUB is working properly go to the following location.
        </para>

        <para>Navigate to the following URL location to ensure that the HUB is working properly:
            <link xlink:href="http://hub.tellurium.com:4444/console">
                http://hub.tellurium.com:4444/console
            </link>
        </para>

        <para>View the web page with 3 distinct columns:</para>
        <orderedlist>
            <listitem>
                <para>a Configured Environments</para>
            </listitem>
            <listitem>
                <para>Available Remote Controls</para>
            </listitem>
            <listitem>
                <para>Active Remote Controls</para>
            </listitem>
        </orderedlist>

        <para>Have a list of browsers configured by default to run the tests while the list for
            Available Remote Controls and Active Remote Controls is empty.
        </para>
        <para>Launch the Selenium RC servers and register them with the selenium HUB. Open up a
            terminal on rc.tellurium.com and go to the selenium grid download directory.
        </para>

        <programlisting language="sh"><?db-font-size 75% ?>
<![CDATA[
> cd /Tools/selenium-grid-1.0.3
> ant -Dport=5555 -Dhost=rc.tellurium.com -DhubURL=http://hub.tellurium.com:4444 \
      -Denvironment="Firefox on Windows" launch-remote-control
]]>
        </programlisting>
        <para>
            <emphasis role="bold">Result:</emphasis>
            The command starts a Selenium RC server on this machine.
        </para>
        <para>Register the Selenium RC server with the Selenium Grid hub machine as specified by the
            hubURL.
        </para>
        <para>
            <emphasis role="bold">Note:</emphasis>
            To register another Selenium RC server on this machine for internet explorer repeat the step
            on a different port.
        </para>

        <programlisting language="sh"><?db-font-size 75% ?>
<![CDATA[
> cd /Tools/selenium-grid-1.0.3
> ant -Dport=5556 -Dhost=rc.tellurium.com -DhubURL=http://hub.tellurium.com:4444 \
      -Denvironment="IE on Windows" launch-remote-control
]]>
        </programlisting>

        <orderedlist>
            <listitem>
                <para>
                    <emphasis>port</emphasis>
                    the remote control is listening to. Must be unique on the machine the remote control
                    runs from.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis>hostname</emphasis>
                    Hostname or IP address of the machine the remote control runs on. Must be visible
                    from the Hub machine.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis>hub url</emphasis>
                    Which hub the remote control should register/unregister to. As the hub is running on
                    hostname hub.tellurium.com, the URL is
                    <link xlink:href="http://hub.tellurium.com:4444/">http://hub.tellurium.com:4444</link>
                </para>
            </listitem>
        </orderedlist>

        <para>Point your browser to the Hub console Once you are successful in replicating a setup
            similar to the one described above, (<link xlink:href="http://hub.tellurium.com:4444/console">
                http://hub.tellurium.com:4444/console</link>).
        </para>
        <para>Verify that all the remote controls registered correctly. Available remote controls
            list should be updated and have the 2 selenium servers available to run the tests.
        </para>
        <para>Run the Tellurium tests against different browsers once the Selenium Hub and the
            Selenium RC servers on the Grid environment have started.
        </para>
        <para>Go to the Tellurium test development machine, the<emphasis role="bold">
            dev1.tellurium.com</emphasis>.
        </para>
        <para>Open up the TelluriumConfig.groovy. Change the values of the Selenium server and
            port to ensure the Tellurium requests for the new sessions from the Selenium HUB are
            received. Verify that the Selenium HUB points to Tellurium tests run on rc.tellurium.com
            based on the browser of choice.
        </para>
        <para>Change the values for the following properties:</para>
        <orderedlist>
            <listitem>
                <para>
                    <emphasis>runInternally</emphasis>
                    : ensures that the Selenium Server on the local machine is not launched.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis>serverHost</emphasis>
                    : the selenium grid hub machine that has the information about the available
                    selenium rc servers.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis>port</emphasis>
                    : port that Selenium HUB is running on. By default, this port is 4444. This can be
                    changed in the grid_configuraton.yml file if this port is not available on your HUB
                    machine.
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis>browser</emphasis>
                    : the browser that comes under the configured environments list on the selenium HUB
                    machine. These values can be changed to a userâs choice in the
                    grid_configuration.yml file.
                </para>
            </listitem>
        </orderedlist>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
tellurium{

    //embedded selenium server configuration
    embeddedserver {

        //port number
        port = "4444"

        //whether to use multiple windows
        useMultiWindows = false

        //whether to run the embedded selenium server.
        //If false, you need to manually set up a selenium server
        runInternally = false

        //profile location
        profile = ""

        //user-extension.js file
        userExtension = "target/classes/extension/user-extensions.js"
    }

    //event handler
    eventhandler{

        //whether we should check if the UI element is presented
        checkElement = false

        //wether we add additional events like "mouse over"
        extraEvent = true
    }

    //data accessor
    accessor{
        //whether we should check if the UI element is presented
        checkElement = true
    }

    //the configuration for the connector that connects the selenium client
    //to the selenium server
    connector{
        //selenium server host
        //please change the host if you run the Selenium server remotely
        serverHost = "hub.tellurium.com"

        //server port number the client needs to connect
        port = "4444"

        //base URL
        baseUrl = "http://localhost:8080"

        //Browser setting, valid options are
        //  *firefox [absolute path]
        //  *iexplore [absolute path]
        //  *chrome
        //  *iehta
        browser = "Firefox on Windows"

        //user's class to hold custom selenium methods associated with user-extensions.js
        //should in full class name, for instance, "com.mycom.CustomSelenium"
        customClass = "org.tellurium.test.MyCommand"
    }
]]>
        </programlisting>

        <para>The set up is now complete. Run the tests as usual using either the Maven command or the IDE. Notice that
            the
            tests are running on rc.tellurium.com and the list for Active Remote Controls is also
            updated on the hub URL (<link xlink:href="http://hub.tellurium.com:4444/console">
                http://hub.tellurium.com:4444/console</link>) during the test execution.
        </para>

    </section>

    <section>
        <title>Mock Http Server</title>
        <para>This feature only exists in Tellurium Core 0.7.0. The MockHttpServer
            is an embedded http server leveraging the Java 6 http server and it is very convenient
            method of testing HTML sources directly without running a web server.
        </para>
        <para><anchor xml:id="Mock_Http_Server.2" xreflabel="Tellurium defines two classes: "/>Tellurium
            defines two classes:
        </para>
        <orderedlist>
            <listitem>
                <para><anchor xml:id="Mock_Http_Server.3" xreflabel="MockHttpHandler "/>MockHttpHandler
                </para>
            </listitem>
            <listitem>
                <para><anchor xml:id="Mock_Http_Server.4" xreflabel="MockHttpServer "/>MockHttpServer
                </para>
            </listitem>
        </orderedlist>

        <section>
            <title>Mock Http Handler Class</title>
            <para>The MockHttpHandler class processes the http request:</para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public class MockHttpHandler implements HttpHandler {

  private Map<String, String> contents = new HashMap<String, String>();

  private String contentType = "text/html";

  public void handle(HttpExchange exchange) {
     ......
  }
}
]]>
            </programlisting>

            <para>
                The MockHttpHandler method is handle (HttpExchange exchange) and its actions are:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        Reads the request URI
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Finds the corresponding response HTML source from the hash map contents
                    </para>
                </listitem>
                <listitem>
                    <para>Sends the response back to the http client
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                By default, the response is treated as an HTML source. The user can change this by using the
                following setter:
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public void setContentType(String contentType)
]]>
            </programlisting>

            <para>
                MockHttpHandler includes two methods to add URI and its HTML source to the hash map
                contents:
            </para>
            <orderedlist>
                <listitem>
                    <para>public void registerBody(String url, String body)
                    </para>
                </listitem>
                <listitem>
                    <para>public void registerHtml(String url, String html)
                    </para>
                </listitem>
            </orderedlist>
            
            <para>
                The MockHttpHandler comes with a default HTML template as follows:
            </para>

            <programlisting language="html"><?db-font-size 75% ?>
<![CDATA[
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
    "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>Mock HTTP Server</title>
    </head>

    <body>
        BODY_HTML_SOURCE
    </body>
</html>
]]>
            </programlisting>

            <para>If
                <literal>registerBody(String url, String body</literal>
                is used, the MockHttpHandler uses the above HTML template to wrap the HTML body. Overwrite
                the default HTML template by calling
                <literal>registerHtml(String url, String html)</literal>
                directly, which uses the whole HTML source provided in the variable &apos;&apos;html&apos;&apos;.
            </para>
            <para>
                Usually, the MockHttpHandler is encapsulated by the MockHttpServer and the user does not
                need to work on it directly.
            </para>
            <para>
                The MockHttpServer includes an embedded http server, a http handler, and a http port:
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public class MockHttpServer {

  //default port
  private int port = 8080;

  private HttpServer server = null;
  private MockHttpHandler handler;

  public MockHttpServer() {
    this.handler = new MockHttpHandler();
    this.server = HttpServer.create();
  }

  public MockHttpServer(int port) {
    this.handler = new MockHttpHandler();
    this.port = port;
    this.server = HttpServer.create();
  }

  public MockHttpServer(int port, HttpHandler handler) {
    this.port = port;
    this.handler = handler;
    this.server = HttpServer.create();
  }

  ......
}
]]>
            </programlisting>

        </section>

        <section>
            <title>Mock Http Server</title>
            <para>The MockHttpServer provides three different constructors so the
                user can overwrite the default values. The MockHttpServer encapsulates the MockHttpHander by
                providing the following methods:
            </para>
            <orderedlist>
                <listitem>
                    <para>public void setContentType(String contentType)
                    </para>
                </listitem>
                <listitem>
                    <para>public void registerHtmlBody(String url, String body)
                    </para>
                </listitem>
                <listitem>
                    <para>public void registerHtml(String url, String html)
                    </para>
                </listitem>
            </orderedlist>
            <para>
                The user can stop and start the server with the following methods:
            </para>
            <orderedlist>
                <listitem>
                    <para>public void start()
                    </para>
                </listitem>
                <listitem>
                    <para>public void stop()
                    </para>
                </listitem>
            </orderedlist>
            <para>Use a modified version of a HTML source provided by one
                Tellurium user as an example and create the UI module Groovy class as follows:
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public class ListModule extends DslContext {

  public static String LIST_BODY = """
<div class="thumbnails">
    <ul>
        <li class="thumbnail">
            <img alt="Image 1"
                 src="/images_root/image_pictures/01.jpg"/>
        </li>
        <li class="thumbnail">
            <img alt="Image 2"
                 src="/images_root/image_pictures/02.jpg"/>
        </li>
        <li class="thumbnail">
            <img alt="Image 3"
                 src="/images_root/image_pictures/03.jpg"/>
        </li>
        <li class="thumbnail">
        </li>
        <li class="thumbnail active">
            <img alt="Image 4"
                 src="/images_root/image_pictures/04.jpg"/>
        </li>
        <li class="thumbnail potd">
            <div class="potd-icon png-fix"/>
            <img alt="Image 5"
                 src="/images_root/image_pictures/05.jpg"/>
        </li>
    </ul>
</div>
  """

  public void defineUi() {
    ui.Container(uid: "rotator", clocator: [tag: "div", class: "thumbnails"]) {
      List(uid: "tnails", clocator: [tag: "ul"], separator: "li") {
        UrlLink(uid: "{all}", clocator: [:])
      }
    }
  }
}
]]>
            </programlisting>

            <para>The reason the HTML source in a Groovy file is included is that the """ quote in Groovy is very easy
                to present complicated HTML source as a String variable. In Java, the user must concatenate each line of
                the HTML Source to make it a String variable.
            </para>
            <para>The defineUi() defines the UI module for the given HTML source. The major part of the UI module is a
                List, which uses UI templates to represent a list of links. Tellurium makes it easy and concise to use
                UI templates to represent UI elements. Based on the ListModule UI module, define a Tellurium JUnit test
                case as follows:
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public class ListTestCase  extends TelluriumJavaTestCase {
    private static MockHttpServer server;

    @BeforeClass
    public static void setUp(){
        server = new MockHttpServer(8080);
        server.registerHtmlBody("/list.html", ListModule.LIST_BODY);
        server.start();
    }

    @Test
    public void testGetSeparatorAttribute(){
        ListModule lm = new ListModule();
        lm.defineUi();

        connectUrl("http://localhost:8080/list.html");

        attr = (String)lm.getParentAttribute("rotator.tnails[6]", "class");
        assertEquals("thumbnail potd", attr);
    }


    @AfterClass
    public static void tearDown(){
        server.stop();
    }
}
]]>
            </programlisting>
        </section>
    </section>

    <section>
        <title>Generate Html Source From UI Modules</title>
        <para>Very often, some Tellurium users asked us to help them to
            track problems in their Tellurium test code. Due to some company policy, they cannot
            provide us the HTML source directly, but the UI module instead. Without the HTML source,
            there is no way for us to debug their test code because we do not have access to their
            web applications.
        </para>
        <para>
            However, if we can do reverse engineering to generate the HTML source from the given UI
            module, we can use the
            <link xlink:href="http://code.google.com/p/aost/wiki/TelluriumMockHttpServer">mock http
                server
            </link>
            to test the generated HTML Source without the need to access their web applications.
        </para>
        <para>Driven by this motivation, we provided the following new method in
            <literal>DslContext</literal>
            for users to generate HTML source from UI modules:
        </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public String generateHtml(String uid)
]]>
        </programlisting>

        <para>The
            <literal>generateHtml(uid)</literal>
            method is really helpful if you want to help other people to track the problem in their
            Tellurium test code but you have not access to their web applications and HTML sources.
            Once the HTML source is generated, you can use the
            <link xlink:href="http://code.google.com/p/aost/wiki/TelluriumMockHttpServer">mock http
                server
            </link>
            to test the generated HTML Source].
        </para>

        <section>
            <title>Implementation</title>
            <para>
                The key is to generate the HTML source for each individual UI object from the composite
                locator, denoted by<literal>clocator</literal>. As a result, we added two methods to the
                <literal>CompositeLocator</literal>
                class:
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
class CompositeLocator {
    String header
    String tag
    String text
    String trailer
    Map<String, String> attributes = [:]

    public String generateHtml(boolean closeTag){
      ......
    }

    public String generateCloseTag(){
      ......
    }
}
]]>
            </programlisting>

            <para>where
                <literal>generateHtml(boolean closeTag)</literal>
                returns the generated HTML source from the composite locator and the boolean variable
                <emphasis>closeTag</emphasis>
                indicates whether to generate the closing tag for the HTML source. For Container type UI
                objects, most likely, you will not generate the closing tag directly, but use the other
                method
                <literal>generateCloseTag()</literal>
                to generate the closing tag separately so that we can include its child elements in
                between.
            </para>
            <para>
                Then on the base class UiObject, we add the
                <literal>generateHtml()</literal>
                method as follows,
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
abstract class UiObject implements Cloneable{
    String uid
    String namespace = null

    def locator

    //reference back to its parent
    def Container parent

    public String generateHtml(){
      if(this.locator != null){
        return getIndent() + this.locator.generateHtml(true) + "\n";
      }

      return "\n";
    }

    public String getIndent(){
      if(parent != null){
          return parent.getIndent() + "    ";
      }else{
        return "";
      }
    }
}
]]>
            </programlisting>

            <para>To make pretty print, we add a
                <literal>getIndent()</literal>
                method in the UiObject to get the indentation for the current UI object.
            </para>

            <para>Once we added the
                <literal>generateHtml()</literal>
                method, all the concrete UI objects such as Button, InputBox, and UrlLink inherit this
                method to generate HTML source. However, for a Contain type, the implementation is
                different because we need to include its child UI objects in the HTML source. As a
                result, we overwrite the
                <literal>generateHtml()</literal>
                method in the UiObject.
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
class Container extends UiObject {
    def components = [:]

    @Override
    public String generateHtml(){
      StringBuffer sb = new StringBuffer(64);
      String indent = getIndent();

      if(this.components.size() > 0){
        if(this.locator != null)
          sb.append(indent + this.locator.generateHtml(false)).append("\n");
        this.components.each {String uid, UiObject obj ->
          sb.append(obj.generateHtml());
        }
        if(this.locator != null)
          sb.append(indent + this.locator.generateCloseTag()).append("\n");
      }else{
        if(this.locator != null){
          sb.append(this.locator.generateHtml(true)).append("\n")
        }
      }

      return sb.toString();
    }
}
]]>
            </programlisting>

            <para>UI templates in Tellurium objects such as
                List and Table make things more complicated. The basic idea is to elaborate all UI
                templates and key is to get the appropriate List size and Table size. We use an
                algorithm to determine the sizes and we don&apos;t want to go over the details here.
            </para>
            <para>
                Finally, we add the
                <literal>generateHtml(String uid)</literal>
                method to the
                <literal>DslContext</literal>
                class
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
 public String generateHtml(String uid){
    WorkflowContext context = WorkflowContext.getContextByEnvironment(
        this.exploreJQuerySelector, this.exploreSelectorCache)
    def obj = walkToWithException(context, uid)
    return obj.generateHtml()
  }
]]>
            </programlisting>

            <para>Another method
                <literal>generateHtml()</literal>
                is used to generate the HTML source for all UI modules defined in a UI module class
                file.
            </para>

           <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public String generateHtml(){
    StringBuffer sb = new StringBuffer(128)
    ui.registry.each {String key, UiObject val ->
        sb.append(val.generateHtml())
    }

    return sb.toString()
}
]]>
            </programlisting>

        </section>

        <section>
            <title>Usage</title>

            <para>We used the following UI module </para>

           <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
ui.Form(uid: "accountEdit", clocator: [tag: "form", id: "editPage", method: "post"]) {
    InputBox(uid: "accountName", clocator: [tag: "input", type: "text", name: "acc2",
        id: "acc2"])
    InputBox(uid: "accountSite", clocator: [tag: "input", type: "text", name: "acc23",
        id: "acc23"])
    InputBox(uid: "accountRevenue", clocator: [tag: "input", type: "text", name: "acc8",
        id: "acc8"])
    TextBox(uid: "heading", clocator: [tag: "h2", text: "*Account Edit "])
    SubmitButton(uid: "save", clocator: [tag: "input", class: "btn", type: "submit",
        title: "Save", name: "save"])
}
]]>
            </programlisting>

            <para><anchor xml:id="Container.3" xreflabel="Call the generateHtml() method "/>Call the
                <literal>generateHtml()</literal>
                method
            </para>
           <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
generateHtml("accountEdit");        
]]>
            </programlisting>

            <para>and it generates the HTML source as follows,
            </para>

           <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
 <form id="editPage" method="post">
    <input type="text" name="acc2" id="acc2"/>
    <input type="text" name="acc23" id="acc23"/>
    <input type="text" name="acc8" id="acc8"/>
    <h2>Account Edit </h2>
    <input class="btn" type="submit" title="Save" name="save"/>
</form>
]]>
            </programlisting>
        </section>
    </section>

    <section>
        <title>Tellurium Powerful Utility: Diagnose</title>

        <para>Usually, the main problem that users have in Tellurium is that their UI modules are not defined
            correctly. As a result, the generated runtime locator is either not unique or cannot be
            found. Very often, users ask our developers to trace or debug their test code. However,
            it is a difficult task for our Tellurium developers, too because usually the web
            application and their full test code are not available to us. It would be more important
            to provide users some utilities for them to trace/debug their code by themselves instead
            of relying on our Tellurium developers.
        </para>
        <para>The utility method
            <emphasis>diagnose</emphasis>
            is designed for this purpose, which is available in the DslContext class and the method
            signature is as follows,
        </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public void diagnose(String uid)
]]>
         </programlisting>

        <para>
            What it actually does is to dump the following information to console,
        </para>
        <orderedlist>
            <listitem>
                <para>
                    The number of the matching UI element for the runtime locator corresponding to
                    the<emphasis>uid</emphasis>.
                </para>
            </listitem>
            <listitem>
                <para>
                    The html source for the parent UI object of the UI object<emphasis>
                    uid</emphasis>.
                </para>
            </listitem>
            <listitem>
                <para>
                    The closest matching UI elements in the DOM for the generated locator.
                </para>
            </listitem>
            <listitem>
                <para>The html source for the entire page.
                </para>
            </listitem>
        </orderedlist>
        <para>
            Most of the above are optional, and thus, Tellurium provides you three more methods for
            your convenience.
        </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public DiagnosisResponse getDiagnosisResult(String uid)

public void diagnose(String uid, DiagnosisOption options)

public DiagnosisResponse getDiagnosisResult(String uid,
    DiagnosisOption options)
]]>
         </programlisting>

        <para>where DiagnosisResponse is defined as
        </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public class DiagnosisResponse {
  private String uid;

  private int count;

  private ArrayList<String> matches;

  private ArrayList<String> parents;

  private ArrayList<String> closest;

  private String html;
}
]]>
         </programlisting>

        <para>
            so that you can process the result programmatically.
            DiagnosisOption is used to configure the return result,
        </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public class DiagnosisOption {

  boolean retMatch = true;

  boolean retHtml = true;

  boolean retParent = true;

  boolean retClosest = true;
}
]]>
         </programlisting>

        <section>
            <title>Implementation</title>
            <para>Under the hood, Tellurium core first creates a request for the diagnose call, </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public class DiagnosisRequest {
  //uid for the UI object
  private String uid;

  //parent UI object's locator
  private String pLocator;

  //UI objects attributes obtaining from the composite locator
  private Map<String, String> attributes;

  //options for the return results
  private boolean retMatch;

  private boolean retHtml;

  private boolean retParent;

  private boolean retClosest;
}
]]>
            </programlisting>
            
            <para>The request is then converted into a JSON string so that we can pass the request to
                Selenium as a custom method,
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
class CustomSelenium extends DefaultSelenium {
    ......

    public String diagnose(String locator, String request){
      String[] arr = [locator, request];
      String st = commandProcessor.doCommand("getDiagnosisResponse", arr);
      return st;
    }
}
]]>
            </programlisting>

            <para>
                The custom Selenium server includes
                <link xlink:href="http://code.google.com/p/aost/wiki/TelluriumjQuerySelector">our jQuery
                    selector
                </link>
                support. We add the following new Selenium method,
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
Selenium.prototype.getDiagnosisResponse = function(locator, req){
......
}
]]>
            </programlisting>

            <para>I wouldn&apos;t go over the implementation details for this method and you can read
                the source code on Tellurium Engine project if you are really interested.
            </para>
        </section>

        <section>
            <title>Usage</title>
            <para>Assume we have the following Tellurium UI module defined
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public class ProgramModule extends DslContext {

    public static String HTML_BODY = """
<div id="ext-gen437" class="x-form-item" tabindex="-1">
    <label class="x-form-item-label" style="width: 125px;" for="ext-comp-1043">
        <a class="help-tip-link" onclick="openTip('Program','program');return false;"
        title="click for more info" href="http://localhost:8080">Program</a>
    </label>

    <div id="x-form-el-ext-comp-1043" class="x-form-element" style="padding-left: 130px;">
        <div id="ext-gen438" class="x-form-field-wrap" style="width: 360px;">
            <input id="programId" type="hidden" name="programId" value=""/>
            <input id="ext-comp-1043" class="x-form-text x-form-field x-combo-noedit"
                   type="text" autocomplete="off"
                   size="24" readonly="true" style="width: 343px;"/>
            <img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger"
                src="images/s.gif"/>
        </div>
    </div>
    <div class="x-form-clear-left"/>
</div>
    """

  public void defineUi() {
    ui.Container(uid: "Program", clocator: [tag: "div"], group: "true") {
      Div(uid: "label", clocator: [tag: "a", text: "Program"])
      Container(uid: "triggerBox", clocator: [tag: "div"], group: "true") {
        InputBox(uid: "inputBox", clocator: [tag: "input", type: "text", readonly: "true"],
            respond: ["click"])
        Image(uid: "trigger", clocator: [tag: "img", src: "*images/s.gif"], respond: ["click"])
      }
    }
  }
}
]]>
            </programlisting>
            
            <para>We create a Tellurium test case using the
                <link xlink:href="http://code.google.com/p/aost/wiki/TelluriumMockHttpServer">
                    MockHttpServer
                </link>
                without running an actual web application.
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public class ProgramModuleTestCase extends TelluriumJavaTestCase{
    private static MockHttpServer server;

    @BeforeClass
    public static void setUp(){
        server = new MockHttpServer(8080);
        server.registerHtmlBody("/program.html", ProgramModule.HTML_BODY);
        server.start();
    }

    @Test
    public void testGetSeparatorAttribute(){
        ProgramModule pm = new ProgramModule();
        pm.defineUi();
        pm.useJQuerySelector();
        connectUrl("http://localhost:8080/program.html");
        pm.diagnose("Program.triggerBox.trigger");
        pm.click("Program.triggerBox.trigger");
    }

    @AfterClass
    public static void tearDown(){
        server.stop();
    }
}
]]>
            </programlisting>
            <para>Note that we want to diagnose the Image UI object &quot;Program.triggerBox.trigger&quot;,</para>
            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
pm.diagnose("Program.triggerBox.trigger");
]]>
            </programlisting>

            <para>Run the test and you will see the return result as follows,</para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
Diagnosis Result for Program.triggerBox.trigger

-------------------------------------------------------

        Matching count: 1

        Match elements:

        --- Element 1 ---

<img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger" src="images/s.gif">


        Parents:

        --- Parent 1---

<div id="x-form-el-ext-comp-1043" class="x-form-element" style="padding-left: 130px;">
        <div id="ext-gen438" class="x-form-field-wrap" style="width: 360px;">
            <input id="programId" name="programId" value="" type="hidden">
            <input id="ext-comp-1043" class="x-form-text x-form-field x-combo-noedit"
                autocomplete="off" size="24" readonly="true" style="width: 343px;"
                    type="text">
            <img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger"
                src="images/s.gif">
        </div>
    </div>

        --- Parent 2---

<div id="ext-gen438" class="x-form-field-wrap" style="width: 360px;">
            <input id="programId" name="programId" value="" type="hidden">
            <input id="ext-comp-1043" class="x-form-text x-form-field x-combo-noedit"
                autocomplete="off" size="24" readonly="true" style="width: 343px;"
                type="text">
            <img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger"
                src="images/s.gif">
        </div>


        Closest:

        --- closest element 1---

<img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger" src="images/s.gif">
HTML Source:

<head>
    <title>Mock HTTP Server</title>
</head>
<body>
  <div id="ext-gen437" class="x-form-item" tabindex="-1">
    <label class="x-form-item-label" style="width: 125px;" for="ext-comp-1043">
        <a class="help-tip-link" onclick="openTip('Program','program');return false;"
            title="click for more info" href="http://localhost:8080">Program</a>
    </label>

    <div id="x-form-el-ext-comp-1043" class="x-form-element" style="padding-left: 130px;">
        <div id="ext-gen438" class="x-form-field-wrap" style="width: 360px;">
            <input id="programId" name="programId" value="" type="hidden">
            <input id="ext-comp-1043" class="x-form-text x-form-field x-combo-noedit"
                autocomplete="off" size="24" readonly="true" style="width: 343px;" type="text">
            <img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger" src="images/s.gif">
        </div>
    </div>
    <div class="x-form-clear-left">
    </div>
  </div>
</body>

-------------------------------------------------------
]]>
            </programlisting>

            <para>This is really the happy path and runtime locator is found and is unique. What if the UI module
                definition is a bit wrong about the Image object?
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
 Image(uid: "trigger", clocator: [tag: "img", src: "*image/s.gif"], respond:["click"])
]]>
            </programlisting>

            <para>That is to say, the
                <emphasis>src</emphasis>
                attribute is not correct.
            </para>
            <para>Run the same test code and the result is as follows,</para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
Diagnosis Result for Program.triggerBox.trigger

-------------------------------------------------------

        Matching count: 0


        Parents:

        --- Parent 1---

<div id="x-form-el-ext-comp-1043" class="x-form-element" style="padding-left: 130px;">
        <div id="ext-gen438" class="x-form-field-wrap" style="width: 360px;">
            <input id="programId" name="programId" value="" type="hidden">
            <input id="ext-comp-1043" class="x-form-text x-form-field x-combo-noedit"
                autocomplete="off" size="24" readonly="true" style="width: 343px;"
                type="text">
            <img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger"
                src="images/s.gif">
        </div>
    </div>

        --- Parent 2---

<div id="ext-gen438" class="x-form-field-wrap" style="width: 360px;">
            <input id="programId" name="programId" value="" type="hidden">
            <input id="ext-comp-1043" class="x-form-text x-form-field x-combo-noedit"
                autocomplete="off" size="24" readonly="true" style="width: 343px;"
                type="text">
            <img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger"
                src="images/s.gif">
        </div>


        Closest:

        --- closest element 1---

<img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger" src="images/s.gif">

HTML Source:

<head>
    <title>Mock HTTP Server</title>
</head>
<body>
  <div id="ext-gen437" class="x-form-item" tabindex="-1">
    <label class="x-form-item-label" style="width: 125px;" for="ext-comp-1043">
        <a class="help-tip-link" onclick="openTip('Program','program');return false;"
            title="click for more info" href="http://localhost:8080">Program</a>
    </label>

    <div id="x-form-el-ext-comp-1043" class="x-form-element" style="padding-left: 130px;">
        <div id="ext-gen438" class="x-form-field-wrap" style="width: 360px;">
            <input id="programId" name="programId" value="" type="hidden">
            <input id="ext-comp-1043" class="x-form-text x-form-field x-combo-noedit"
                autocomplete="off" size="24" readonly="true" style="width: 343px;"
                type="text">
            <img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger"
                src="images/s.gif">
        </div>
    </div>
    <div class="x-form-clear-left">
    </div>
  </div>
</body>

-------------------------------------------------------
]]>
            </programlisting>

            <para>You can see that there is no matching elements for the runtime locator. But the good
                thing is that the diagnose method provides you the closest UI elements it can find from
                the DOM,
            </para>

            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
        --- closest element 1---

<img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger" src="images/s.gif">
]]>
            </programlisting>

            <para>By looking at this above lines, we could realize that the
                <emphasis>src</emphasis>
                attribute is wrong in our UI module.
            </para>
            <para>Some careful readers may want to ask &quot;why you add a partial matching symbol
                <literal>*</literal>
                to the src attribute in the UI module. The reason is that in jQuery, seems the
                <emphasis>src</emphasis>
                attribute in an Image has to be a full URL such as<link
                        xlink:href="http://code.google.com/p/aost/">http://code.google.com/p/aost/</link>.
                One workaround is to put the partial matching symbol
                <literal>*</literal>
                before the URL.
            </para>
            <para>In some case, the return matching count is larger than 1 and you can figure out how to
                update your UI module definition by looking at all the return elements and their
                parents.
            </para>

        </section>
        
    </section>

    <section>
        <title>Internationalization support in Tellurium</title>
        <para>Tellurium now provides support for internationalization of strings and exception
            messages. Any software system should have support for regional language settings and
            options to be effective. Internationalization and localization provides this support.
            Locales define the language and region. Locales can define how region specific data is
            presented to users. Every locale will have a language code followed by a region code.
            Ex: fr_FR represents french language in the region of France. Internationalized strings
            for each locale is provided through a MessageBundle engineered for a specific locale
            which is of the format
            <literal>&lt;MessageBundleName&gt;_&lt;language-code&gt;_&lt;country code&gt;.properties
            </literal>
        </para>
        <para>The Internationalization support in Tellurium is provided through the
            InternationalizationManager class. The default bundle used in Tellurium is the
            DefaultMessagesBundle.properties. All strings and exception messages used in the
            tellurium core classes are read in from the DefaultMessageBundle properties file.
        </para>
        <para>In order to configure regional messages, This class has a getMessage function that provides
            Internationalization support. This function can also take an optional Locale argument to
            accept function level locale translations.
        </para>

        <para>For plain strings
        </para>
        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
getMessage ( "<key>")
]]>
        </programlisting>
        <para>For Strings with parameters
        </para>
        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
getMessage ("<key>" , { [ item1 , item2 , … , item n]}
]]>
        </programlisting>
        <para>For double numeric value 
        </para>
        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
getNumber(<doubleValue>)
]]>
        </programlisting>
        <para>For currency data 
        </para>
        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
getCurrency(<doubleValue>)
]]>
        </programlisting>
        <para>For Dates 
        </para>
        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
getDate(<dateValue>)
]]>
        </programlisting>
        <para>For time 
        </para>
        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
getTime(<timeValue>)
]]>
        </programlisting>
        
        <para>The
            <literal>getMessage (&lt;key&gt;)</literal>
            method signature internationalizes a simple string. The
            <literal>getMessage (&lt;key&gt; , { [ item1 , item2 , … , item n]}</literal>
            method definition allows parameterization of an internationalized string to allow
            external strings/arguments as parameter to the string. This also takes locale as an
            argument, so we have
            <literal>getMessage (&lt;key&gt; , locale)</literal>
            to allow translation of the string to the locale passed in as an argument, provided the
            key value pair exists in the respective locale property file
        </para>
        <para>The localization can be defined by setting the
            locale on your system preferences / settings. (ex: regional settings in Windows
            machine).
        </para>
        <para>
            <emphasis role="bold">Note:</emphasis>
            By default using getMessage() without any locale argument causes the system to use the
            default locale as defined in ur regional settings. In order to use a locale different
            from the regional settings, you will have to pass in the locale as an argument to
            getMessage.
        </para>
        <para>
            Internationalization support has been extended to test cases, so any user defined test
            case can use
        </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
geti18nBundle()
]]>
        </programlisting>
        <para>to utilize the getMessage function support in their own test code. Internationalized strings can be added
            to user defined MessageBundles defined in the src/main/resources folder of user defined
            projects. The general steps to provide internationalization in your project are as
            follows:
        </para>

        <orderedlist>
            <listitem>
                <para>Create a user defined MessageBundle.properties, a default locale message
            bundle, as well as one for each region you want to provide support for in your project,
            ex: MessageBundle_fr_FR.properties will have strings translated into french.
                </para>
            </listitem>
            <listitem>
                <para>Add the user defined resource bundle using the geti18nManager function, like so:
            <literal>getI18nBundle().addResourceBundle(&quot;MessageBundle&quot;)</literal>. This
            can take an optional locale to add the resource bundle in that locale.
                </para>
            </listitem>
           <listitem>
                <para> Now use the
            <literal>getMessage</literal>
            function to internationalize strings
                </para>
            </listitem>
        </orderedlist>

        <para>Here is a simple example of code from a
            GoogleBooksListGroovyTestCase. I assume that user has already defined a
            MessagesBundle.properties,located at src/main/resources, as follows
        </para>
        <para>
            MessagesBundle.properties
        </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
GoogleBooksListGroovyTestCase.SetUpModule=Setting up google book list
GoogleBooksListGroovyTestCase.Category=Category is {0}
GoogleBooksListGroovyTestCase.ConnectSeleniumServer=Connection to selenium server
]]>
        </programlisting>

        <para>Now defining the same properties file in French
        </para>
        <para>
            MessageBundle_fr_FR.properties
        </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
GoogleBooksListGroovyTestCase.SetUpModule=Liste de livre de google d'établissement
GoogleBooksListGroovyTestCase.Category=La catégorie est {0}
GoogleBooksListGroovyTestCase.ConnectSeleniumServer=Se relier au serveur de sélénium
]]>
        </programlisting>

        <para>Here is the definition of a testCase that uses the Internationalization support
        </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
class SampleGroovyTestCase extends TelluriumGroovyTestCase {

    public void initUi() {
    }

    public void setUp(){
        setUpForClass()
        //adding the local resource bundle, make sure it's not titled
        //"DefaultMessagesBundle" since this will overwrite the default
        //one we use in Tellurium core and cause exceptions
        geti18nBundle().addResourceBundle("MessagesBundle")

        //geti18nBundle() can also be replaced by
        //IResourceBundle bundle = new ResourceBundle(),

    }

    public void tearDown(){
        tearDownForClass()
    }

    public void testTranslateWithEnglishLocale()
    {
       //translating of strings
       String message = geti18nBundle().getMessage("i18nManager.testString")
       assertEquals("This is a testString in English", message)

       //translation of number data types
       Double amount = new Double(345987.246);
       String translatedValue = geti18nBundle().getNumber(amount)
       assertEquals("345,987.246" , translatedValue)

       //translation of currency data types
       amount = new Double(9876543.21);
       translatedValue = geti18nBundle().getCurrency(amount)
       assertEquals("\$9,876,543.21" , translatedValue)

       //translation of dates - date is 2009, Jan 1
       Date date = new Date(109 , 0 , 1)
       translatedValue = geti18nBundle().getDate(date)
       assertEquals("Jan 1, 2009" , translatedValue)
     }
}
]]>
        </programlisting>

    </section>

</chapter>
