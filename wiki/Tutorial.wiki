#labels Featured,Phase-Implementation
= Tutorial for Tellurium =

== How to use Tellurium ==

There are two ways to use Tellurium. The first one is first write your UI modules
in different Groovy files, which extends the DslContext class. Then write 
JUnit test cases. You can also include them in a test suite. 

Starting from Tellurium 0.4.0, JUnit 4.4 is supported. Usually, users only need to extend TelluriumJavaTestCase to write Tellurium Tests. The TelluriumJavaTestCase has already included the setUp and tearDown methods in class level using JUnit 4 @BeforeClass and
@AfterClass annotations. If users want to include multiple test cases in one test suite, they should use BaseTelluriumJavaTestCase so that all the test cases can share the same Selenium connection. If users really want to write Tellurium tests in groovy, please use TelluriumGroovyTestCase and TelluriumSuiteGroovyTestCase instead.

The other way is to write DSL script directly, which is recommended only for non-developers since you cannot create different modules if write in pure DSL. 
The DslScriptExecutor can be used to run the .dsl files.

== Examples ==

=== Google Start Page ===

First, create the google start page module in Groovy
{{{
class NewGoogleStartPage extends DslContext{
    public void defineUi() {
        ui.Container(uid: "google_start_page", clocator: [tag: "td"], group: "true"){
            InputBox(uid: "searchbox", clocator: [title: "Google Search"])
            SubmitButton(uid: "googlesearch", clocator: [name: "btnG", value: "Google Search"])
            SubmitButton(uid: "Imfeelinglucky", clocator: [value: "I'm Feeling Lucky"])
        }
    }

    def doGoogleSearch(String input){
        type "searchbox", input
        pause 500
        click "googlesearch"
        waitForPageToLoad 30000
    }

    def doImFeelingLucky(String input){
        type "searchbox", input
        pause 500
        click "Imfeelinglucky"
        waitForPageToLoad 30000
    }
}
}}}

Then, write the JUnit test case as follows,

{{{
public class GoogleStartPageJavaTestCase extends TelluriumJavaTestCase {

    protected static NewGoogleStartPage ngsp;

    @BeforeClass
    public static void initUi() {
        ngsp = new NewGoogleStartPage();
        ngsp.defineUi();
    }

    @Test
    public void testGoogleSearch(){
        connectUrl("http://www.google.com");
        ngsp.doGoogleSearch("tellurium selenium Groovy Test");
   }

   @Test
   public void testGoogleSearchFeelingLucky(){
        connectUrl("http://www.google.com");
        ngsp.doImFeelingLucky("tellurium selenium DSL Testing");
   }
}

}}}

Optionally, you can also write the DSL script file directly 

{{{
ui.Container(uid: "google_start_page", clocator: [tag: "td"], group: "true"){
    InputBox(uid: "searchbox", clocator: [title: "Google Search"])
    SubmitButton(uid: "googlesearch", clocator: [name: "btnG", value: "Google Search"])
    SubmitButton(uid: "Imfeelinglucky", clocator: [value: "I'm Feeling Lucky"])
}

openUrl "http://www.google.com"
type "google_start_page.searchbox", "Tellurium Selenium test"
pause 500
click "google_start_page.Imfeelinglucky"
waitForPageToLoad 30000
}}}

Then use DslScriptExecutor to run it.

=== Google Code Hosting Page ===

The google code hosting page includes nested tables to show labels for 
projects. Tellurium supports nested IDs. For example XXX.YYY.ZZZ represents the fact that
the UI object YYY is inside XXX and it holds the ZZZ Ui object. Usually 
the id of the UI object is the one you specified in the ui.Container block.
The exceptions are tables and lists, which use {{{[x][y] or [x]}}} to reference
its elements inside.

The Ui module for the label tables is defined as

{{{
ui.Container(uid: "googlecodehosting"){
  //Upper level table 
  Table(id: "labels_table", locator: "//table[descendant::div[contains(text(),\"Example project labels:\")]]"){
    //Here we defined templates for the elements of the table
    //id: "row: 1, column: 1" means the TextBox is a template for
    //row 1, column 1.
    TextBox(uid: "row: 1, column: 1", locator: "/div")
    //inner table, which is a template for (row 2, column 1) of the outer table
    Table(uid: "row: 2, column: 1", locator: "/div[@id=\"popular\"]/table"){
       //"all" means this is the template for all table elements
       UrlLink(id: "all", locator: "/a")
    }
  }
}
}}}

The UI objects defined inside a table are actually templates for table elements.
Note the ids of the templates must follow the name convention:

  # Template for (i row, j column), the id should be "row: i, column: j"
  # The wild case (i.e., match all) for row or column is {{{"*"}}}, or you do not specify the row or column. For example, {{{"row : *, column: 3"}}} means template for (the 3rd column, all rows). "column: 3" means the same thing


  # "all" is used for matching all rows and columns

If no template is defined for a (row, column), it is assumed to be a TextBox by default.

When you look for an element's (row i, column j) Object-type in run-time, the following
rules apply:

  # First, the system will try to find the template defined for (row i, column j),return it if found.
  # Otherwise, the system will try the template for (all rows, column j), return it if found.
  # If not, the system will try the template for (row i, all columns), return it if found.
  # If still cannot find, the system will try the template for "all", return it if found.
  # Last, if no template could be found. Return the TextBox as the default template.
  
The module functions are defined as follows,

{{{
    public String getModuleLabel(){
        getText "labels_table[1][1]"
    }

    public int getLabelTableRowNum(){
        getTableMaxRowNum "labels_table[2][1]"
    }

    public int getLabelTableColumnNum(){
        getTableMaxColumnNum "labels_table[2][1]"
    }

    def getTableElement(int row, int column){
        getTableElement "labels_table[2][1].[${row}][${column}]"
    }

    Map getAllLabels(){
        int nrow = getTableMaxRowNum("labels_table[2][1]")
        int ncolumn = getTableMaxColumnNum("labels_table[2][1]")

        def map = [:]
        for(int i=1; i<=nrow; i++){
            for(int j=1; j<=ncolumn; j++){
                String label = getText("labels_table[2][1].[${i}][${j}]")
                map.put(label, [i, j])
            }
        }

        return map
    }

    void clickOnLable(int row, int column){
        click  "labels_table[2][1].[${row}][${column}]"
        pause 5000
    }

}}}

The actual test case is 

{{{

  public class GoogleCodeHostingJavaTestCase extends TelluriumJavaTestCase {
    private static NewGoogleCodeHosting ngch;


    @BeforeClass
    public static void initUi() {
        ngch = new NewGoogleCodeHosting();
        ngch.defineUi();
    }

    @AfterClass
    public static void setUpAfterClass(){

    }
    
    @Before
    public void setUpBeforeTest(){
        connectUrl("http://code.google.com/hosting/");
    }

    @After
    public void tearDownAfterTest(){

    }

    @Test
    public void testCodeLabelTable(){
        String label = ngch.getModuleLabel();
        assertEquals("Example project labels:", label);

        int nrow = ngch.getLabelTableRowNum();
        assertEquals(3, nrow);

        int ncolumn = ngch.getLabelTableColumnNum();
        assertEquals(6, ncolumn);

        for(int i=1; i<=nrow; i++){
            for(int j=1; j<=ncolumn; j++){
               Object obj = ngch.getTableElement(i, j);
               assertTrue(obj instanceof UrlLink);
            }
        }
    }

    @Test
    public void testClickOnLabel(){
        Map map = ngch.getAllLabels();
        assertEquals(18, map.size());

        List index = (List) map.get("Java");
        assertNotNull(index);
        assertEquals(2, index.size());

        //find the url link
        int first = (Integer)index.get(0);
        int second = (Integer)index.get(1);
        String url = ngch.getUrlLink(first, second);
        assertEquals("search?q=label%3aJava", url);

        //click on "Java" link
        ngch.clickOnLable(first, second);

    }
}}}

=== Google Book List Page ===

The Google Book List test case is used to demonstrate the List UI object. 
The List UI object likes the Table, but it is one dimension. For example, you 
need to use {{{list1[2]}}} format to represent the UI object id inside the list.
Also, the List comes with an option "separator", which is used to indicate the delimiter for different elements in the list.

The portion of book category "Fiction" is chosen as our demo, which is defined as:
{{{
ui.Container(uid: "GoogleBooksList", locator: "//table[@id='hp_table']/tbody/tr/td[1]/div/div[1]"){
    TextBox(uid: "category", locator: "/div")
    List(uid: "subcategory", locator: "", separator: "/p"){
      //"all" means it is the template for all elements in the list
      UrlLink(uid: "all", locator: "/a")
    }
  }
}

}}}

Similar to the Table example, the UrlLink inside the List "subcategory" defines a template
for elements in the List. ID "all" means it is for all elements. Otherwise, you should specify the index of the element that template applies for. When the system tries to find the UI object for {{{List[x]}}} in runtime, it first checks if there is a template for index {{{x}}}, if not, it then tries the "all" template. If no template found, it returns a TextBox as the default object.

The actions in the module is defined as
{{{
    String getCategory(){
        getText "GoogleBooksList.category"
    }

    int getListSize(){
        getListSize "GoogleBooksList.subcategory"
    }

    def getAllObjectInList(){
        int size = getListSize()
        List list = new ArrayList()
        for(int i=1; i<=size; i++){
           list.add(getUiElement("GoogleBooksList.subcategory[${i}]"))
        }

        return list
    }

    def clickList(int index){
        click "GoogleBooksList.subcategory[${index}]"
        pause 5000
    }

    String getText(int index){
        getText "GoogleBooksList.subcategory[${index}]"
    }

}}}

And the test case is as follows, 

{{{
public class GoogleBooksListJavaTestCase extends TelluriumJavaTestCase {
    private static NewGoogleBooksList ngbl;

    @BeforeClass
    public static void initUi() {
        ngbl = new NewGoogleBooksList();
        ngbl.defineUi();
    }

    @Test
    public void testBookCategory(){
        connectUrl("http://books.google.com/");
        String category = ngbl.getCategory();
        assertEquals("Fiction", category);

        int size = ngbl.getListSize();

        assertEquals(8, size);           
    }
}

}}}  

== Advanced Examples ==

Tellurium includes advance examples to use Tellurium project website as a reference and implement test cases for different pages. These are non-trivial and rather complicated Tellurium tests. 

=== Tellurium project page ===

To demonstrate how to define multiple UI objects, the Tellurium project page is used as an example:
{{{
class AostProjectPage extends DslContext{

    public void defineUi() {
        //define the menu
        //It is fine to use Container to abstract Table if you have special table
        ui.Container(uid: "menu", clocator: [tag: "table", id: "mt", trailer: "/tbody/tr/th"], group: "true"){
            //since the actual text is  Project&nbsp;Home, we can use partial match here. Note "%%" stands for partial match
            UrlLink(uid: "project_home", clocator: [text: "%%Home"])
            UrlLink(uid: "downloads", clocator: [text: "Downloads"])
            UrlLink(uid: "wiki", clocator: [text: "Wiki"])
            UrlLink(uid: "issues", clocator: [text: "Issues"])
            UrlLink(uid: "source", clocator: [text: "Source"])
        }

        //define the search module, which includes an input box, two search buttons
        ui.Form(uid: "search", clocator: [:], group: "true"){
            InputBox(uid: "searchbox", clocator: [name: "q"])
            SubmitButton(uid: "search_project_button", clocator: [value: "Search Projects"])
            SubmitButton(uid: "search_web_button", clocator: [value: "Search the Web"])
        }
    }

    def clickProjectHome(){
        click "menu.project_home"
        pause 5000
    }

    def clickDownloads(){
        click "menu.downloads"
        pause 5000
    }

    def clickWiki(){
        click "menu.wiki"
        pause 5000
    }

    def clickIssues(){
        click "menu.issues"
        pause 5000
    }

    def clickSource(){
        click "menu.source"
        pause 5000
    }

    def searchProject(String input){
        type "search.searchbox", input
        click "search.search_project_button"
        pause 5000
    }

    def searchWeb(String input){
        type "search.searchbox", input
        click "search.search_web_button"
        pause 5000
    }
}
}}}

Please see the source code on the subversion trunk for more details.

== DSL Examples ==

Tellurium supports pure dsl tests. The following examples demonstrate how to write pure dsl files as selenium tests.

=== Google Start Page and Tellurium Project Home ===

We created an example dsl test file in src/example/dsl/google.dsl. In this file we define multiple UI modules. Since we have multiple UI modules, we must use the full path, i.e., the top level UI names such as "google_start_page", "menu", and "search" cannot be omitted. 

In test script, you can use any methods defined in aost.dsl.DslContext and aost.test.AostSeleneseTestCase including assertions, any Groovy code for flow control, or Java code since Groovy is compatible with Java syntax, which is really powerful.

The google.dsl is defined as follows,

{{{
//define google start page
ui.Container(uid: "google_start_page", clocator: [tag: "td"], group: "true"){
    InputBox(uid: "searchbox", clocator: [title: "Google Search"])
    SubmitButton(uid: "googlesearch", clocator: [name: "btnG", value: "Google Search"])
    SubmitButton(uid: "Imfeelinglucky", clocator: [value: "I'm Feeling Lucky"])
}

//define AOST project menu
ui.Container(uid: "menu", clocator: [tag: "table", id: "mt", trailer: "/tbody/tr/th"], group: "true"){
    UrlLink(uid: "project_home", clocator: [text: "%%Home"])
    UrlLink(uid: "downloads", clocator: [text: "Downloads"])
    UrlLink(uid: "wiki", clocator: [text: "Wiki"])
    UrlLink(uid: "issues", clocator: [text: "Issues"])
    UrlLink(uid: "source", clocator: [text: "Source"])
}

//define the AOST project search module, which includes an input box, two search buttons
ui.Form(uid: "search", clocator: [:], group: "true"){
    InputBox(uid: "searchbox", clocator: [name: "q"])
    SubmitButton(uid: "search_project_button", clocator: [value: "Search Projects"])
    SubmitButton(uid: "search_web_button", clocator: [value: "Search the Web"])
}

openUrl "http://www.google.com"
type "google_start_page.searchbox", "Aost Selenium"
pause 500
click "google_start_page.SubmitButton"
pause 1000

openUrl "http://code.google.com/p/aost/"
click "menu.project_home"
pause 1000
click "menu.downloads"
pause 1000
click "menu.wiki"
pause 1000
click "menu.issues"
pause 1000

openUrl "http://code.google.com/p/aost/"
type "search.searchbox", "Aost Selenium"
click "search.search_project_button"
pause 5000

type "search.searchbox", "aost selenium dsl groovy"
click "search.search_web_button"
pause 5000
}}}

In your own .dsl scripts you can put assertions in. 

To run the .dsl file, you can call "DslScriptExecutor dsl_file". For example, in the project directory, you can run google.dsl as follows:

{{{
java -cp ./lib/junit-3.8.2.jar:./lib/selenium-java-client-driver.jar:./lib/selenium-server.jar:./lib/groovy-all-1.5.6.jar:./dist/aost-0.3.0.jar aost.dsl.DslScriptExecutor src/example/dsl/google.dsl 
}}}

Here we assume you have created the aost-0.3.0.jar in the "dist/" directory by running 
{{{
ant clean; ant dist
}}}
 
There is a shell script "rundsl.sh" in the project directory and you can simply run

{{{
./rundsl.sh src/example/dsl/google.dsl 
}}}

In windows, please run rundsl.bat instead.
