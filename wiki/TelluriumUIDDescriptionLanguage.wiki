#summary Tellurium UID Description Language (UDL).
#labels Phase-Design,Phase-Support
<wiki:toc max_depth="5" />

= Introduction =

[http://code.google.com/p/aost/wiki/UserGuide070TelluriumBasics#UiID_Attribute UI Object ID] (UID) is used to identify and describe a UI object in Tellurium Automated Testing Framework. For example, in the following Google Search Module, the uid attribute is the UID. UID "Input" is the name of the InputBox.

{{{
   ui.Container(uid: "GoogleSearchModule", clocator: [tag: "td"], group: "true"){
     InputBox(uid: "Input", clocator: [title: "Google Search"])
     SubmitButton(uid: "Search", clocator: [name: "btnG", value: "Google Search"])
     SubmitButton(uid: "ImFeelingLucky", clocator: [value: "I'm Feeling Lucky"])
   }
}}}  

Why do we need a language to describe the name of a UI object in Tellurium, then?
The answer is that UID is not just the name of a UI object, it is also used to describe the dynamic factors in a [http://code.google.com/p/aost/wiki/UserGuide070TelluriumBasics#UI_Templates Tellurium UI template].

Tellurium UI templates have two purposes:

  # When there are many identical UI elements, use one template to represent them all.
  # When there are variable/dynamic sizes of UI elements at runtime, the patterns are known, but not the size.

More specifically, Table, StandardTable, and List are the three Tellurium objects that define UI templates. The Table object is a special case of the StandardTable object.

  # *Table* and *StandardTable* define two dimensional UI templates. 
  # *List* defines one dimensional UI templates. 

As a result, the Tellurium UID Description Language (UDL) is used to 
  # address the dynamic factors in Tellurium UI templates
  # increase the flexibility of Tellurium UI templates.

= Tellurium UID Description Language =

Tellurium UID Description Language (UDL) is implemented with [http://www.antlr.org/ the Antlr 3 parser generator]. The implementation details can be found [http://code.google.com/p/aost/wiki/BuildYourOwnJavaParserWithAntlr3 here]. 

We like to focus on the grammars and the use of UDL.

== UDL Grammars ==

The UDL grammars are defined as follows,

{{{
grammar Udl;

uid	
	: 	baseUid
	|	listUid
	|	tableUid	
	;
	
baseUid 
	:	ID
	;
	
listUid
	:	'{' INDEX '}'
	|	'{' INDEX '}' 'as' ID
	;
		
tableUid 
	:	tableHeaderUid
	|	tableFooterUid 
	|	tableBodyUid
	;
	
tableHeaderUid
	:	'{' 'header' ':' INDEX '}'
	|	'{' 'header' ':' INDEX '}' 'as' ID
	;
	
tableFooterUid
	:       '{' 'footer' ':' INDEX '}'
	|       '{' 'footer' ':' INDEX '}' 'as' ID
	;
	
tableBodyUid
        :	'{' 'row' ':' INDEX ',' 'column' ':' INDEX '}'
        |	'{' 'row' ':' INDEX ',' 'column' ':' INDEX '}' 'as' ID
        |	'{' 'row' '->' ID ',' 'column' ':' INDEX '}'
        |	'{' 'row' '->' ID ',' 'column' ':' INDEX '}' 'as' ID
        |	'{' 'row' ':' INDEX ',' 'column' '->' ID '}'
        |	'{' 'row' ':' INDEX ',' 'column' '->' ID '}' 'as' ID
        |	'{' 'row' '->' ID ',' 'column' '->' ID '}'
        |	'{' 'row' '->' ID ',' 'column' '->' ID '}' 'as' ID
        |       '{' 'tbody' ':' INDEX ',' 'row' ':' INDEX ',' 'column' ':' INDEX '}'
        |       '{' 'tbody' ':' INDEX ',' 'row' ':' INDEX ',' 'column' ':' INDEX '}' 'as' ID
        |	'{' 'tbody' ':' INDEX ',' 'row' '->' ID ',' 'column' ':' INDEX '}'
        |	'{' 'tbody' ':' INDEX ',' 'row' '->' ID ',' 'column' ':' INDEX '}' 'as' ID
        |       '{' 'tbody' ':' INDEX ',' 'row' ':' INDEX ',' 'column' '->' ID '}'
        |       '{' 'tbody' ':' INDEX ',' 'row' ':' INDEX ',' 'column' '->' ID '}' 'as' ID
        |	'{' 'tbody' ':' INDEX ',' 'row' '->' ID ',' 'column' '->' ID '}'
        |	'{' 'tbody' ':' INDEX ',' 'row' '->' ID ',' 'column' '->' ID '}' 'as' ID
        ;              			
							
fragment LETTER : ('a'..'z' | 'A'..'Z') ;
fragment DIGIT : '0'..'9';
INDEX	:	(DIGIT+ |'all' | 'odd' | 'even' | 'any' | 'first' | 'last' );   
ID 	: 	LETTER (LETTER | DIGIT)*;
WS 	: 	(' ' | '\t' | '\n' | '\r' | '\f')+ {$channel = HIDDEN;};
}}}

The grammars defined the UIDs for the following three categories of [http://code.google.com/p/aost/wiki/UserGuide070UIObjects Tellurium UI Objects].
  # Regular UI objects without UI templates such as [http://code.google.com/p/aost/wiki/UserGuide070UIObjects#Input_Box Input Box] and [http://code.google.com/p/aost/wiki/UserGuide070UIObjects#Container Container]
  # List type UI object, i.e., [http://code.google.com/p/aost/wiki/UserGuide070UIObjects#List List]
  # Table type UI objects including [http://code.google.com/p/aost/wiki/UserGuide070UIObjects#Table Table] and [http://code.google.com/p/aost/wiki/UserGuide070UIObjects#Standard_Table StandardTable]. 

We like to go over the grammars in details.

=== ID ===

ID is the name of the UI object. The ID in the UDL starts with a letter and is followed by digits, letters, and "`_`" as follows.
 

http://tellurium-users.googlegroups.com/web/udl_id.jpg?gda=qMY0wDwAAAA7fMi2EBxrNTLhqoq3FzPrYxkpUpFnzJyAbOi2fmAIqphN994tpHQvlLtY7uJzmPP9Wm-ajmzVoAFUlE7c_fAt&gsc=6cd9zQsAAAAkIbFAyUaYDIw1XZeMnNrq

=== Index ===

Index defines the position of the UI object. The index in the UDL can be any of the following values:

  * Number, for example, "5".
  * "first", the first element.
  * "last", the last element.
  * "any", any position, usually the position is dynamic at runtime.
  * "odd", the odd elements.
  * "even", the even elements
  * "all", matching all if not exact matches.

 http://tellurium-users.googlegroups.com/web/udl_index.jpg?gda=IiTkhD8AAAA7fMi2EBxrNTLhqoq3FzPrmWBudP5qiPQkac1peLSYWg56keJ9cuAKmA_YKbtH6VuccyFKn-rNKC-d1pM_IdV0&gsc=myTuAgsAAABNyAlnqKoVxICsBHUflUOz