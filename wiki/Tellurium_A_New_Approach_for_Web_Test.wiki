#labels Phase-Implementation,Phase-Support
= Tellurium: A New Approach for Web Testing =

Tellurium is a five months baby now and it starts to attract more people to use it. People may have already been familiar with its features such as descriptive, expressive, easy to use, and flexible. But they may not realize that Tellurium is conceptually a new approach for web testing. You may wonder why Tellurium is a new approach, isn't is based on Selenium framework? The answer is that Tellurium is a UI module based framework. The analogy between Tellurium and Selenium is somehow like C++ and C. Although Tellurium is born from Selenium, but conceptually it is a different framework with a lot of new ideas.

What is UI module? UI module is a collection of UI elements you group them together. Usually, the UI module represents a composite UI object in the format of nested basic UI elements. For example, the download search module in Tellurium is defined as follows,

{{{
ui.Form(uid: "downloadSearch", clocator: [action: "list", method: "get"], group: "true") {
   Selector(uid: "downloadType", clocator: [name: "can", id: "can"])
   TextBox(uid: "searchLabel", clocator: [tag: "span"])
   InputBox(uid: "searchBox", clocator: [name: "q"])
   SubmitButton(uid: "searchButton", clocator: [value: "Search"])
}
}}}

Be aware that in most case the UI elements inside the composite UI object have relationship to each other and in the DOM structure, they should be on the same sub-tree with the upper UI as the parent. The exception case is when the upper UI is only a logic UI and it does not represent any physical UI in the DOM. For example, in the following UI module, we only logically group the "inputbox1" and "button1".

{{{
ui.Container(uid: "google_search"){
   InputBox(uid: "inputbox1", locator: "//input[@title='Google Search']")
   Button(uid: "button1", locator: "//input[@name='btnG' and @type='submit']")
}
}}}

But for most applications, you still want to use a physical upper UI so that you can exploit the relationship among the UI elements.

Why UI module concept is so important? It is the base that Tellurium built on. 