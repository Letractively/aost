#summary Tellurium Calls for Open Source Contributors.
#labels Phase-Implementation,Phase-Support
<wiki:toc max_depth="5" />

= What is Tellurium =

[http://code.google.com/p/aost/ The Tellurium Automated Testing Framework] (Tellurium) is an automated testing framework for web applications. Tellurium grew up from [http://seleniumhq.org/ the Selenium framework], but with a different testing concept. Starting from Tellurium 0.7.0, Tellurium added Tellurium Engine to replace the Selenium Core to better support Tellurium. 

== Why Tellurium is Novel ==

For most existing web testing frameworks like Selenium, they mainly focus on individual UI elements as follows.

http://tellurium-users.googlegroups.com/web/tellurium3.png?gda=aZZ_w0AAAAA7fMi2EBxrNTLhqoq3FzPrzblq5HA-QkbWcQ1F-Scqtki5CODg-kyjcKh65ubVQ_xtxVPdW1gYotyj7-X7wDON&gsc=jkTIIgsAAACI9y1tsPXdLT5_3omT2FAm

For example:

{{{
   selenium.click("//div[3]/input[@value='Create']");
}}}

For Tellurium, we treated the whole UI elements as a widget and we call it a UI module.

http://tellurium-users.googlegroups.com/web/tellurium4.png?gda=Fw6DGUAAAAA7fMi2EBxrNTLhqoq3FzPrzblq5HA-QkbWcQ1F-Scqtjl0DZWo_xwjp4raCAkSDqVtxVPdW1gYotyj7-X7wDON&gsc=jkTIIgsAAACI9y1tsPXdLT5_3omT2FAm

We define the UI module as follows.

{{{
    ui.Form(uid: "Form", clocator: [tag: "form"]){
        Div(uid: "User", clocator: [:]){
            Selector(uid: "Sex", clocator: [:])
            InputBox(uid: "Input", clocator: [tag: "input", type: "text", name: "j_username"])
        }
        Container(uid: "Finish", clocator: [tag: "tr"]){
            SubmitButton(uid: "Submit", clocator: [tag: "input", type: "submit", value: "Login", name: "submit"])
        }
    }
}}}

== Advantages ==

If we think Selenium as the "C" language, Tellurium is like the "C++" language, which uses a different testing concept. There are couple advantages to describe the UI elements as a UI module.

=== Expressive ===

_Expressive_ is obvious. For example, you can see clearly what the UI you are testing against. For the test code, you have DSL stype test code such as:


{{{
   type "Form.User.Input", "John Fang"
}}}

=== Robust to Changes ===

Test robust is always a big issue for Selenium. To solve this problem is one of the main motivations that Tellurium was created for. Tellurium uses UI attributes to describe UI instead of fixed locators. If we change the attributes, new runtime locators will be generated by the framework so that Tellurium can self-adapt to UI changes to some degree. [http://code.google.com/p/aost/wiki/SantaUiModuleGroupLocatingAlgorithm The Santa algorithm] in Tellurium new engine further improve the test robust by using UI partial matching.

=== Represent Dynamic Web Content Easily ===

The [http://code.google.com/p/aost/wiki/UserGuide070TelluriumBasics#UI_Templates Tellurium UI templates] are used to represent dynamic web content very easily. For example, [http://code.google.com/p/aost/issues/list Tellurium issue search result widget] can be easily represented as follows.

{{{
    ui.Table(uid: "issueResult", clocator: [id: "resultstable", class: "results"], group: "true") {
      //Define the header elements
      UrlLink(uid: "{header: any} as ID", clocator: [text: "*ID"])
      UrlLink(uid: "{header: any} as Type", clocator: [text: "*Type"])
      UrlLink(uid: "{header: any} as Status", clocator: [text: "*Status"])
      UrlLink(uid: "{header: any} as Priority", clocator: [text: "*Priority"])
      UrlLink(uid: "{header: any} as Milestone", clocator: [text: "*Milestone"])
      UrlLink(uid: "{header: any} as Owner", clocator: [text: "*Owner"])
      UrlLink(uid: "{header: any} as Summary", clocator: [text: "*Summary + Labels"])
      UrlLink(uid: "{header: any} as Extra", clocator: [text: "*..."])

      //Define table body elements
      //Column "Extra" are TextBoxs
      TextBox(uid: "{row: all, column -> Extra}", clocator: [:])
      //For the rest, they are UrlLinks
      UrlLink(uid: "{row: all, column: all}", clocator: [:])
    }
}}}

=== Easy to Maintain ===

Tellurium emphasizes the decoupling of UI from test code. The structured test code makes Tellurium easier to maintain and refactor.

= Tellurium Project =

We like to introduce the current status of the Tellurium project.

== History ==

Tellurium was started in June 2007 as an internal project and became [http://code.google.com/p/aost an open source project on Google Code] in June 2008. We release on a regular basis and the latest release 0.7.0 will be out next month.

http://tellurium-users.googlegroups.com/web/telluriumhistory.png?gda=GD0dGUYAAAA7fMi2EBxrNTLhqoq3FzPraJRXcLj8Noz0FE1yhGyZ4COuya-lMN3FcE5U0RlBOxV3riz0RlMs_1ov_iNdB7P8E-Ea7GxYMt0t6nY0uV5FIQ&gsc=jkTIIgsAAACI9y1tsPXdLT5_3omT2FAm
  
== Team and Community ==

[http://code.google.com/p/aost/wiki/ContributorList Tellurium Team] consists of 4-5 active team members and couple more contributors. We have [http://groups.google.com/group/tellurium-users Tellurium user group] and [http://groups.google.com/group/tellurium-developers Tellurium developer group]. Latest update information are available on [ http://twitter.com/TelluriumSource twitter]. Tellurium also provides a community repository on [http://github.com/telluriumsource/tellurium GitHub] so that anyone can fork Tellurium and contribute back to us. Tellurium wiki documents will be migrated to [http://telluriumsource.org/display/TE/Home TelluriumSource.org], a domain owned by us.

== Tellurium Sub-projects ==

Tellurium began as a small core project and quickly generated multiple sub-projects including: UDL, Core, Engine, Widget extensions, Maven Archetypes, and Trump sub-projects as shown in the following diagram.
 

http://tellurium-users.googlegroups.com/web/NewTelluriumSubProjects.png?gda=Keiwck0AAAA7fMi2EBxrNTLhqoq3FzPrmxvX91cGpWri3vpq-ffL5gWcRD5mEYHWd5K6yh20QaANn3YpWhqxIh1wjgDZawPl5Tb_vjspK02CR95VRrtmeQ&gsc=jkTIIgsAAACI9y1tsPXdLT5_3omT2FAm


  * Tellurium UDL: [http://code.google.com/p/aost/wiki/TelluriumUIDDescriptionLanguage Tellurium UID Description Language] (UDL) Parser.
  * Tellurium Engine: Based on Selenium Core with UI module, CSS selector, command bundle, and exception hierarchy support.
  * Tellurium Core: UI module, APIs, DSL, Object to Runtime Locator mapping (OLM), and test support.
  * Tellurium Extensions: Dojo Javascript widgets and ExtJS Javascript widgets.
  * Tellurium UI Module Plugin (Trump): [http://code.google.com/p/aost/wiki/TrUMP A Firefox plugin] to automatically generate the UI module after users select the UI elements from the web under testing.
  * Tellurium Maven Archetypes: [http://code.google.com/p/aost/wiki/UserGuide070TelluriumSubprojects#Tellurium_Maven_Archetypes Maven archetypes] to generate skeleton Tellurium JUnit and Tellurium TestNG projects using one Maven command.
  * Tellurium Reference Projects: Use Tellurium project site as examples to illustrate how to use different features in Tellurium and how to create Tellurium test cases.

== How Tellurium Works ==

Tellurium architecture is shown in the following diagram.

http://tellurium-users.googlegroups.com/web/telluriumnewarchitecture070.png?gda=0Cry3VEAAAA7fMi2EBxrNTLhqoq3FzPraJRXcLj8Noz0FE1yhGyZ4Cj9p0mTDab5g6bwssabHmxXgg0UR0O9X9-Irzu_uB8AUwk_6Qi3BU8HCN0q6OYwM5VxXgp_nHWJXhfr7YhqVgA&gsc=jkTIIgsAAACI9y1tsPXdLT5_3omT2FAm

There are two major parts, i.e., the Tellurium Core, which does Java/Groovy object to runtime locator mapping, event handling, and command bundling. The Tellurium Engine is embedded inside the Selenium server and is a test driving engine for Tellurium. The two are connected by Selenium RC.

Tellurium works in two mode. The first one is to work as a wrap of the Selenium framework.

http://tellurium-users.googlegroups.com/web/TelluriumRunningMode1.png?gda=qNEKqUsAAAA7fMi2EBxrNTLhqoq3FzPro_2kwg16ExMe9wfbYSgXCQdoVt8RgM6Q8hpOVtSHouVBqckrS9zbalJdCfH3I_v9BkXa90K8pT5MNmkW1w_4BQ&gsc=jkTIIgsAAACI9y1tsPXdLT5_3omT2FAm

That is to say, Tellurium core generates the runtime locator based on the attributes in a UI module and then pass the selenium calls to Selenium core with Tellurium extensions.

Tellurium is evolving to its own test driving Engine and the work mode is different as shown in the following sequence diagram.

http://tellurium-users.googlegroups.com/web/TelluriumRunningMode2.png?gda=kwN3wEsAAAA7fMi2EBxrNTLhqoq3FzPro_2kwg16ExMe9wfbYSgXCQdoVt8RgM6Q8hpOVtSHouWqzYvvFLF4HH6kcFg68ZqyBkXa90K8pT5MNmkW1w_4BQ&gsc=jkTIIgsAAACI9y1tsPXdLT5_3omT2FAm

The Tellurium Core will convert the UI module into a JSON representation and pass it to Tellurium Engine for the first time when the UI module is used. The Tellurium Engine uses the Santa algorithm to locate the whole UI module and put it into a cache. For the sequent calls, the cached UI module will be used instead of locating them again. Another new features in Tellurium 0.7.0 is the [http://code.google.com/p/aost/wiki/Tellurium070Update#Macro_Command Macro Command], which combine multiple commands into one batch and then send them to Tellurium engine in one call to reduce the round trip latency. For more new features in 0.7.0, please read [http://code.google.com/p/aost/wiki/Tellurium070Update What's New in Tellurium 0.7.0].

= Call for Participation =

Due to limited available resources in our Tellurium team, we need more people to join Tellurium community and more open source contributors to contribute to Tellurium to make it solid and a popular framework.

== Why Tellurium is Worthy for Your Contributions ==

First, Tellurium tackles the right problem for web automated testing, i.e., improve test robust and expressive and make tests easy to write and maintenance. Many users will be benefited by capabilities the framework provides.

Second, Tellurium uses a set of very hot techniques such as [http://code.google.com/p/aost/wiki/GroovyPatternsInTellurium Groovy for DSL], [http://code.google.com/p/aost/wiki/CustomJQuerySelectorInTellurium jQuery for Engine], [http://code.google.com/p/aost/wiki/BuildYourOwnJavaParserWithAntlr3 Antlr 3 for UDL parser], and Maven for build.

 
