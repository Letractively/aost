<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">

    <title>Tellurium UI Module Firefox Plugin</title>

    <section id="trumpInstall">
        <title>Install TrUMP</title>
        <para>Tellurium UI Model Plugin (TrUMP) is the Firefox plugin to automatically create UI modules for users.
            Go to the Tellurium project download page and download the TrUMP xpi file or download the Firefox 3
            version directly from the Firefox Addons site at:
        </para>
        <para>
            <link xlink:href="https://addons.mozilla.org/en-US/firefox/addon/11035">
                https://addons.mozilla.org/en-US/firefox/addon/11035
            </link>
        </para>
        <para>The Tellurium UI Module Plugin (TrUMP) automatically generates UI modules for users. An
            example of the TrUMP IDE is shown as follows:
        </para>

        <mediaobject>
            <imageobject>
                <imagedata fileref="./media/TrUMPIDE0.png" scalefit="1" width="100%"></imagedata>
            </imageobject>
        </mediaobject>        
        
    </section>

    <section>
        <title>TrUMP Workflow</title>
        <para>The workflow of TrUMP is shown as follows.
        </para>

        <mediaobject>
            <imageobject>
                <imagedata fileref="./media/TrUMPDiagramSmall.png" scalefit="1" width="100%"></imagedata>
            </imageobject>
        </mediaobject>
        <orderedlist>
            <listitem>
                <para>
                    Click onto a web page. The corresponding UI element is pushed into an array.
                </para>
                <para><emphasis role="bold">Note</emphasis>: If the element is clicked again, the UI
                    element is removed from the array.
                </para>
            </listitem>
            <listitem>
                <para>
                    Click the &quot;Generate&quot; button. TrUMP implements the following two steps:
                </para>
                <para>
                    <orderedlist>
                        <listitem>
                            <para>TrUMP generates an internal tree to represent the UI elements using a grouping
                                algorithm. During the tree generating procedure, extra nodes are generated to group UI
                                elements together based on their corresponding location on the DOM tree. The internal
                                tree is very useful and holds all original data that can be used for customization.
                            </para>
                        </listitem>
                        <listitem>
                            <para>Once the internal tree is built, TrUMP starts the second step, which is to build the
                                default UI module. For each node in the internal tree, TrUMP generates a UI object based
                                on its tag and whether or not it is a parent node.
                            </para>
                        </listitem>
                    </orderedlist>
                </para>
            </listitem>
            <listitem>
                <para>Click the &quot;Customize&quot; button. TrUMP pulls out the original data held in the internal
                    tree and
                    the current attributes utilized by the UI module to create the &quot;Customize&quot;
                    view. When the user clicks on an element, TrUMP lists all available optional
                    attributes in the View for users to customize.
                </para>
            </listitem>
            <listitem>
                <para>TrUMP attempts to validate the UI module automatically whenever a new UI module is generated or
                    updated. TrUMP evaluates each UI element&apos;s XPath the same way that Tellurium
                    generates the runtime XPath from the UI module and verifies if the generated runtime
                    XPath is unique in the current web page.
                </para>
                 <para>
                     <orderedlist>
                         <listitem>
                             <para>If it is not unique, a red "X" mark is displayed, and the user should modify the
                                 element's attribute to make it disappear.
                             </para>
                         </listitem>
                         <listitem>
                             <para>If a red "X is not displayed", the validation is completed. The user can export the
                                 generated UI module to a groovy file and start to write Tellurium tests based on the
                                 generated UI module.
                             </para>
                         </listitem>
                     </orderedlist>
                 </para>
            </listitem>
            <listitem>
                <para>
                    Select &quot;Tools&quot; &gt; &quot;TrUMP IDE&quot; in Firefox. The "Record" button is on by
                    default. Click on "Stop" to stop recording.
                </para>
            </listitem>
        </orderedlist>
         
    </section>

    <section>
        <title>How TrUMP Works</title>
        <para>
            Start to use the TrUMP IDE to record specific
            UI elements that were selected on the WEB. For example, open the Tellurium Download page and
            click the search elements and the three links as shown in the following figure:
        </para>

       <mediaobject>
            <imageobject>
                <imagedata fileref="./media/TrUMPRecordSmall.png" scalefit="1" width="100%"></imagedata>
            </imageobject>
        </mediaobject>

        <para>The blue color indicates selected element. Click the selected element again to de-select it. Then, click
            on the &quot;Generate&quot; button to create the Tellurium UI Module. The user is automatically
            directed to the &quot;Source&quot; window.
        </para>

       <mediaobject>
            <imageobject>
                <imagedata fileref="./media/TrUMPGenerateSmall.png" scalefit="1" width="100%"></imagedata>
            </imageobject>
        </mediaobject>

        <para>Click the &quot;Customize&quot; button to change the UI
            module such as UIDs, group locating option, and attributes selected for the UI module.
        </para>

       <mediaobject>
            <imageobject>
                <imagedata fileref="./media/TrUMPCustomizeSmall.png" scalefit="1" width="100%"></imagedata>
            </imageobject>
        </mediaobject>

        <para>One red &quot;X&quot; mark is displayed, indicating
            the UI element&apos;s XPath is not unique. Select group, or add more attributes to the UI
            element. The user sees the new customized UI as shown in the following Figure:
        </para>

       <mediaobject>
            <imageobject>
                <imagedata fileref="./media/TrUMPCustomizedSmall.png" scalefit="1" width="100%"></imagedata>
            </imageobject>
        </mediaobject>

        <para>
            <emphasis role="bold">Note:</emphasis>
            The red &quot;X&quot; mark is removed because Tellurium turned on the group locating and the
            element&apos;s xpath is now unique. In the meantime, the UI module in the source tab is
            automated and updated once the &quot;Save&quot; button is clicked.
        </para>

        <para>The &quot;Show&quot; button shows the actual Web element on the web for which the UI element
            is represented.
        </para>

       <mediaobject>
            <imageobject>
                <imagedata fileref="./media/TrUMPCustomizedSourceSmall.png" scalefit="1" width="100%"></imagedata>
            </imageobject>
        </mediaobject>

        <para>At this point, export the UI module to a groovy
            file. Be aware that if any error is seen complaining about the directory, first check the
            &quot;export directory&quot; in Options &gt; Settings and set it to &quot;C:\&quot; or other
            windows directory for the Windows system before you export the file.
        </para>

        <para>For Linux, the user may find there is no &quot;OK&quot; button on the option tab, which is
            caused by the configure &quot;browser.preferences.instantApply&quot; is set to true by
            default. Point the firefox to &quot;about:config&quot; and change the option to false.
        </para>
        <para>Once this is completed, the user sees the &quot;OK&quot; button.
        </para>

       <mediaobject>
            <imageobject>
                <imagedata fileref="./media/ExportToGroovySmall.png" scalefit="1" width="100%"></imagedata>
            </imageobject>
        </mediaobject>

        <para>Open the groovy file to view the following:
        </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
package tellurium.ui

import org.tellurium.dsl.DslContext

class NewUiModule extends DslContext{

  public void defineUi() {
    ui.Container(uid: "Tellurium", clocator: [tag: "body", class: "t2"]){
      Form(uid: "Form", clocator: [tag: "form", method: "get", action: "list"],
           group: "true")
      {
        Selector(uid: "DownloadType", clocator: [tag: "select", name: "can", id: "can"])
        InputBox(uid: "SearchBox", clocator: [tag: "input", type: "text", name: "q",
                                             id: "q"])
        SubmitButton(uid: "Search", clocator: [tag: "input", type: "submit",
                                               value: "Search"])
      }
      Container(uid: "Title", clocator: [tag: "table", id: "mt"]){
        UrlLink(uid: "Issues", clocator: [tag: "a", text: "Issues"], respond: ["click"])
        UrlLink(uid: "Wiki", clocator: [tag: "a", text: "Wiki"], respond: ["click"])
        UrlLink(uid: "Downloads", clocator: [tag: "a", text: "Downloads"],
                                      respond: ["click"])
      }
    }
  }

        //Add your methods here

}
]]>
        </programlisting>

    </section>

    <section id="trumpuimodulegenalg">
        <title>The UI Module Generating Algorithm</title>
        <para>You may wonder how the UI module is generated in TrUMP.
            The main idea behind this is to get the full xpath for each UI element that a user selects.
            Then, construct the UI module based on the xpaths.
        </para>
        <para>The core algorithm is a similar to the one to build a prefix tree. The data structure of the
            <link xlink:href="http://en.wikipedia.org/wiki/Trie">prefix tree, or Trie in short</link>
            can be illustrated by the following figure, which representing a dictionary with prefix
            chains.
        </para>

        <mediaobject>
            <imageobject>
                <imagedata fileref="./media/Trie_example.png" scale="100"></imagedata>
            </imageobject>
        </mediaobject>
        <para>Usually, a dictionary can be stored in the Trie data structure so that it is very easy to
            find the words with the same prefix and to do
            <link
                    xlink:href="http://en.wikipedia.org/wiki/Longest_prefix_match">long prefix match
            </link>
            .
        </para>
        <para>The UI module generating algorithm is implemented in Javascript. Similarly, we need to
            first define the node object,
        </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
function NodeObject(){

    this.constants = {
        TAG : "tag",
        POSITION: "position",
        HEADER : "header",
        TRAILER: "trailer"
    };

    //hold the dom Node associated to the current tree node
    this.domNode = null;
    this.id = null;
    this.xpath = null;
    this.attributes = new HashMap();
    this.parent = null;
    this.children = new Array();
    this.ui = new UiType();

    this.header = null;
    this.tailer = null;
    this.nodexpath = null;

    //flag to indicate whether this node is a new generated
    //during the grouping process, i.e., by the algorithm
    this.newNode = false;
    //tag selection state machine
    this.tagState = new TagState();
    //common methods to process xpath
    this.xpathProcessor = new XPathProcessor();
    //The filter to remove unwanted attributes
    this.filter = new Filter();
    //used to store the element tag
    this.tag = null;

    //The UI object associated with this node
    this.uiobject = new UiObject();

    this.xmlutil = new XmlUtil();
}
]]>
        </programlisting>

        <para>and some methods.</para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
NodeObject.prototype.walkUp = function(){
    var rxp = this.uiobject.buildXPath();

    var xp;

    if(this.parent != null){
        xp = this.parent.walkUp() + rxp;
    }else{
        xp = rxp;
    }

    return xp;
}

NodeObject.prototype.getLevel = function(){
    var level = 0;
    var current = this;

    while(current.parent != null){
        level++;
        current = current.parent;
    }

    return level;
}

NodeObject.prototype.buildUiObject = function(){
    var hasChildren = false;

    if (this.children.length > 0) {
        hasChildren = true;
    }

    this.uiobject.buildUiObject(this, hasChildren);

    if (hasChildren) {
        for (var i = 0; i < this.children.length; i++) {
            this.children[i].buildUiObject();
        }
    }

    this.checkUiDirectAttribute();
}

NodeObject.prototype.printUI = function(layout){
    var hasChildren = false;

    if (this.children.length > 0) {
        hasChildren = true;
    }

    //get the current level of the node so that we can do pretty print
    var level = this.getLevel();

    var strobj = this.uiobject.strUiObject(level);
    layout.push(strobj);

    if (hasChildren) {
        for (var i = 0; i < this.children.length; i++) {
            this.children[i].printUI(layout);
        }

        var strobjft = this.uiobject.strUiObjectFooter(level);
        layout.push(strobjft);
    }
}
]]>
        </programlisting>

        <para>The Trie Tree is defined as follows:</para>
        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
function Tree(){
    this.root = null;
    this.xpathMatcher = new XPathMatcher();
    this.uiModel = new Array();
    this.uid = new Uid();

    //An Array to hold reference to all the UI objects in the Tree
    //change it to a HashMap so that we can access it by key
    this.uiObjectMap = null;
};
]]>
        </programlisting>

        <para>To do the insertion, we need to implement the tree build process, which is a more
            complicated than the dictionary one because of the xpath processing.
        </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
Tree.prototype.addElement = function(element){

    //case I: root is null, insert the first node
    if (this.root == null) {
        this.root = new NodeObject();
        this.root.id = element.uid;
        this.root.parent = null;
        this.root.domNode = element.domNode;
        this.root.xpath = element.xpath;
        this.root.attributes = element.attributes;
    } else {
        //not the first node, need to match element's xpath with current
        //node's relative xpath starting from the root
        //First, need to check the root and get the common xpath
        var common = this.xpathMatcher.match(this.root.xpath, element.xpath);

        var leftover = this.xpathMatcher.remainingXPath(element.xpath, common);

        if (this.root.xpath == common) {
            //the current node shares the same common xpath as the new node
            //no extra node need to be added for the current node
            //then check current node's children
            if (this.root.children.length == 0) {
                //no children, so create a new child
                if (leftover != null && leftover.length > 0) {
                    //only create the child if there are extra xpath
                    var son = new NodeObject();
                    son.id = element.uid;
                    son.xpath = this.xpathMatcher.remainingXPath(element.xpath, common);
                    son.attributes = element.attributes;
                    son.domNode = element.domNode;
                    son.parent = this.root;
                    this.root.addChild(son);
                }
            } else {
                //there are children
                this.walk(this.root, element.uid, leftover, element.attributes,
                    element.domNode);
            }

        } else {
            var newroot = new NodeObject();
            newroot.id = "root";
            newroot.xpath = common;
            newroot.parent = null;
            newroot.newNode = true;
            var newxpath = this.xpathMatcher.remainingXPath(this.root.xpath, common);

            if (this.root.id != null && this.root.id == "root") {
                this.root.id = this.uid.genUid(newxpath);
            }
            this.root.xpath = newxpath;
            this.root.parent = newroot;
            newroot.addChild(this.root);

            this.root = newroot;

            if (leftover != null && leftover.length > 0) {
                //only create the child if there are extra xpath
                var child = new NodeObject();
                child.id = element.uid;
                child.xpath = this.xpathMatcher.remainingXPath(element.xpath, common);
                child.attributes = element.attributes;
                child.domNode = element.domNode;
                child.parent = this.root;
                this.root.addChild(child);
            }
        }
    }
}

Tree.prototype.walk = function(current, uid, xpath, attributes, domnode) {

    if (current.children.length == 0) {
        //there is no children
        if (trimString(xpath).length > 0) {
            //only create the child if there are extra xpath
            var child = new NodeObject();
            child.id = uid;
            child.xpath = xpath;
            child.attributes = attributes;
            child.domNode = domnode;
            child.parent = current;

            current.addChild(child);
        }
    } else {
        var cmp = new Array();
        var maxlen = 0;
        for (var l = 0; l < current.children.length; ++l) {
            var nd = current.children[l];
            var xpt = new XPath();
            xpt.xpath = this.xpathMatcher.match(nd.xpath, xpath);
            xpt.node = nd;
            if (xpt.xpath.length > maxlen) {
                maxlen = xpt.xpath.length;
            }
            cmp.push(xpt);
        }

        //need to handle the situation where there is no common xpath
        if (maxlen == 0) {

            //there is no shared common xpath, add the node directly
            var child = new NodeObject();
            child.id = uid;
            child.xpath = xpath;
            child.attributes = attributes;
            child.domNode = domnode;
            child.parent = current;
            current.addChild(child);
        } else {
            //there are shared common xpath
            var max = new Array();
            for (var m = 0; m < cmp.length; m++) {
                if (cmp[m].xpath.length == maxlen) {
                    max.push(cmp[m])
                }
            }

            var mx = max[0];

            var common = mx.xpath;

            if (mx.node.xpath == common) {

                //The xpath includes the common part, that is to say,
                //we need to walk down to the child
                if (max.length > 1) {
                    //we need to merge multiple nodes into one

                    for (var t = 1; t < max.length; t++) {
                        var cnode = max[t].node;

                        var left = this.xpathMatcher.remainingXPath(cnode.xpath, common);
                        if (left.length > 0) {
                            //have more for the left over xpath
                            cnode.xpath = left;
                            cnode.parent = mx.node;

                            current.removeChild(cnode.id());
                        } else {
                            for (var j = 0; j < cnode.children.length; ++j) {
                                var childNode = cnode.children[j];
                                mx.node.addChild(childNode);
                            }
                            current.removeChild(cnode.id);
                        }
                    }
                }
                this.walk(mx.node, uid, this.xpathMatcher.remainingXPath(xpath, common),
                    attributes, domnode);
            } else {
                //need to create extra node
                var extra = new NodeObject();
                extra.xpath = common;
                extra.parent = current;
                extra.id = this.uid.genUid(common);
                extra.newNode = true;
                current.addChild(extra);
                for (var k = 0; k < max.length; ++k) {
                    var xp = max[k];
                    var cn = xp.node;
                    cn.xpath = this.xpathMatcher.remainingXPath(cn.xpath, common);
                    cn.parent = extra;
                    extra.addChild(cn);
                    current.removeChild(cn.id);
                }

                var ch = new NodeObject();
                ch.id = uid;
                ch.xpath = this.xpathMatcher.remainingXPath(xpath, common);
                ch.attributes = attributes;
                ch.domNode = domnode;
                ch.parent = extra;
                extra.addChild(ch);
            }
        }
    }
}
]]>
        </programlisting>

        <para>Similarly, we defined a printUI method for the prefix tree.</para>
        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
Tree.prototype.printUI = function(){
    this.uiModel = new Array();
    if(this.root != null){
        this.root.printUI(this.uiModel);
        return this.uiModel;
    }
}   
]]>
        </programlisting>

        <para>If you want to understand more about the algorithm, please read the Javascript code at our
            <link xlink:href="http://aost.googlecode.com/svn/trunk/tools/firefox-plugin/trump">Trump</link>
            project.
        </para>
        <para>To demonstrate how the algorithm works, assume we have the following UI elements and their
            corresponding xpaths.
        </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
A:  "/html/body/table[@id='mt']"
B:  "/html/body/table[@id='mt']/tbody/tr/th[3]"
C:  "/html/body/table[@id='mt']/tbody/tr/th[3]/div"
D:  "/html/body/div[@id='maincol']/div[@id='colcontrol']/div/div[@id='bub']"
E:  "/html/body/div[@id='maincol']/div[@id='colcontrol']/div/div[@id='bub']
    /table[@id='resultstable']"
F:  "/html/body/div[@id='maincol']/div[@id='colcontrol']/div/div[@id='bub']
    /table[@id='resultstable']/tbody/tr[2]/td[3]/a"
]]>
        </programlisting>

        <para>Run the algorithm, you will get the following UI module.</para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
ui.Container(UID: 'root', clocator: [:]){
  Container(UID: 'A', clocator: [tag:'table']){
    Container(UID: 'B', clocator: [tag:'th']){
      DIV(UID: 'C', clocator: [tag:'div'])
    }
  }
  Container(UID: 'D', clocator: [tag:'div']){
    Container(UID: 'E', clocator: [id:'resultstable',tag:'table']){
      UrlLink(UID: 'F', clocator: [tag:'a'])
    }
  }
}
]]>
        </programlisting>

        <mediaobject>
            <imageobject>
                <imagedata fileref="./media/uimodule_trie.png" scalefit="1" width="70%"></imagedata>
            </imageobject>
        </mediaobject>

    </section>

</chapter>