#summary Tellurium First Anniversary: Retrospect And Prospect.
#labels Phase-Support
<wiki:toc max_depth="5" />

= Introduction =

The Tellurium Automated Testing Framework (Tellurium) is one year old now if we count from the day that it became an open source project. Tellurium was originated from a small project I did for my company in 2007. The task was to use Selenium to test one application written using the Dojo Javascript Framework. Selenium became very popular at that time because it was a ground-breaking framework and it offered many unique features such as browser based testing and "record and replay" testing mode using Selenium IDE. It was very attractive to many people including me, which was why I took over the task from our scrum board. 

When I started to create Selenium test cases, I soon realized the task was not easy at all because our application included many dynamic widgets such as data grids and I cannot simply apply the "record and replay" mode and data dependency was another issue. The first thought came to my mind was to refactor the code generated by the Selenium IDE for more general test cases. But later, this proved to be as tedious and painful as to re-generate a new test code from scratch because of the hard-coded locators and the coupling of locator with test code. Maintenance was a headache as well because the test code was not structured. 

To be honest, I was not a web developer and my work mainly focused on the server side of enterprise applications with a lot of research background in the past. I think my background helped to see problems and challenges more clearly. I asked myself: "Why not give up the record and replay mode in the first place. Instead, I can define a set of UI objects and make them suitable for dynamic web content". As a result, the prototype was called "Abstract Object-based Selenium Test Framework" (AOST). Abstract UI objects were designed to address dynamic factors inside so that the framework can handle the dynamic web content automatically for users. That is to say, the runtime locators were generated from some XPath templates. In the meanwhile, I tried to utilize as many features from Selenium as possible instead of reinventing the wheel. Hence, up to Tellurium 0.6.0, we still leveraged Selenium as the test driving engine.

Many Selenium users like me may also notice that Selenium test code is verbose and the XPath locator is everywhere. For maintenance purpose, it is preferable to have structured test code, which led to the UI module concept. The framework has been prototyped twice and the prototypes laid the foundation for today's Tellurium framework. Many concepts still remain there such as abstract UI objects, UI module, Javascript events, and runtime locator generation.  

The prototypes were used by my company for couple internal projects. However, there were very little motivation to improve the it since only couple teams used it. In 2008, I worked on a project using Ruby and Rails and was very impressed by Ruby's syntax, meta programming features, and expressiveness. To exploit the expressiveness and meta programming features of dynamic languages, I re-wrote the whole framework using Groovy and made it an open source project so that it could attract more users and push me to keep improving it. One month later, the framework was renamed as the Tellurium Automated Testing Framework (Tellurium), which indicated it walked out the prototype phase.

= Look Back =

== Tellurium Project ==

In the past one year, Tellurium grew rapidly from one small core project into multiple sub-projects including

  * Tellurium Core: UI module, APIs, DSL, Object to Runtime Locator mapping, and test support.
  * Tellurium Engine: Based on Selenium Core with UI module, jQuery selector, command bundle, and exception hierarchy support.
  * Tellurium Extensions: Dojo Javascript widgets and ExtJS Javascript widgets.
  * Tellurium UI Module Plugin (TrUMP): A Firefox plugin to automatically generate the UI module after users select the UI elements from the web under testing.
  * Tellurium Maven Archetypes: Maven archetypes to generate skeleton Tellurium JUnit and Tellurium TestNG projects using one Maven command.
  * Tellurium Reference Projects: Use Tellurium project site as examples to illustrate how to use different features in Tellurium and how to create Tellurium test cases.

Main features in Tellurium include:
  * Abstract UI objects
  * DSL for UI definition, actions, and testing
  * Composite Locator
  * Group locating
  * Dynamically generate runtime locators
  * UI module for structured test code and re-usability
  * UI templates for dynamic web content
  * XPath and jQuery selector support
  * Locator caching to improve speed 
  * Javascript event support
  * Use TrUMP to automatically generate UI modules
  * Dojo and ExtJS widget extensions
  * JUnit and TestNG support
  * Ant and Maven support 
  * Data driven test support


== Tellurium Team ==

Tellurium is a team project and thank all team members, past and current ones, for their contributions. Thank Adrian Carr for being the first Tellurium user and proposed "Tellurium Automated Testing Framework" as the full name for the framework. Thank Quan Bui for his work on Tellurium reference projects and the proposal of the ExtJS widget project. Thank Mikhail Koryak for his expertise in jQuery and prototyping jQuery support for Tellurium. We cannot implement the jQuery selector so quickly without his involvement. Thank Haroon Rasheed for his contributions to Tellurium reference projects and Selenium Grid support as well as user support in Tellurium user group. Thank Matt Senter for restructuring the project code base, adding Maven support, and coming up with the name "Tellurium". His work to build and release Tellurium as well as the Maven repository maintenance should be acknowledged. Thank Vivek Mongolu for his expertise in web development and prototyping the TrUMP Firefox plugin. His work on TrUMP led to the release of TrUMP 0.1.0. Last but not the least, thank Jeff Xiong for his interest in contributing to Tellurium and his expertise in Selenium should be a huge asset to our team. Looking forward to his contributions.

The past year was a difficult one for most of us with the economic downturn. Two of our team members were affected directly and the rest have also experienced head cuts and other pressures from both work and life. But we still managed to improve and release Tellurium on a regular basis. We have released Tellurium 0.2.0, 0.3.0, 0.4.0, 0.5.0, 0.6.0, and TrUMP 0.1.0 in the past one year, which was a huge achievement for our team. All these would not be possible without all your hard work.   

Of course, there is still room to improve. Our goal to build a strong and active team has not been achieved due to many reasons. We are expecting more exceptional members to join our team. In the meanwhile, we also welcome committers to work on one or couple Tellurium tasks. Let us work together to make Tellurium a solid, real useful, and popular framework.
 
== Tellurium Community ==

Tellurium cannot reach today's stage without our users' support. Our users' comments and suggestions have shaped the Tellurium framework in many different ways and various aspects. 

First, I like to thank Harihara Vinayakaram for his support and contribution to Tellurium, he was the most active Tellurium user for 2008-2009 without any doubt. Thanks to Dominic Mooney for his constructive suggestions and many bug reports. As the most valuable Tellurium for 2008-2009, we look forward to his continuous contribution to Tellurium in 2009-2010. 

Special thanks to Kevin Zhang for providing us the chance to be interviewed by InfoQ China. Thanks to Al Snow for being the first person to introduce Tellurium in conference. Thanks to Tarun for advocating TestNG to Tellurium. Thanks to poweroftesting, smartqa, Nicolae Vintila, Jason, Ravi Chaddha, laimu, DogTailFish, Raghu Savalagi, konstantin, boraldomaster, Filip Korling, Praveen, Iustina Vintila, Mariangela, Thomas Ro√überg, Theyagarajan, rajagopalcs, AbsolutZero, Ernst, dazz_x, rohanh, Manoj Chavan, syllant, and many other users for bug reporting and being actively involved in technical discussions in Tellurium user group.

Thanks to many people who are interested in Tellurium, use Tellurium, and promote Tellurium.   

= Future Directions =

First of all, we need more people to get involved in Tellurium development, test, documentation, and promotion. We need a strong and active team to move forward quickly. We need volunteers who have free time to contribute to Tellurium. More specifically, we are looking for 
  * An English technical writer to join our team to help us with documents.
  * JavaScript and jQuery gurus to join our team to develop the TrUMP and the Engine projects.  
  * Other talented people to bring new ideas and contribute to Tellurium.

If you are interested, please contact me (John.Jian.Fang@gmail.com) directly. Thanks in advance.

From technical perspective, we will focus on the following tasks,

  * Develop the Engine project in 0.7.0 to provide better support for UI module and achieve better re-usability, speed performance, and robust to changes. 
  * Tellurium widget will be re-architected to encapsulate dynamic factors and to make it easier to define and use Tellurium widgets. 
  * The widget extension projects will be implemented to include many widgets from Javascript frameworks such as Dojo and ExtJS so that users can include these widgets in their UI modules simply by their names without the need to know the details of the internal UI elements. 
  * TrUMP will be improved to support frames, pop-up widows, and UI templates. Another big move will be to automatically create UI modules as well as DSL test scripts for non-developers. 
  * To better support functional tests, we will introduce a "stage and test binding" concept to make functional tests easier to write and configure. 
  * Headless web testing using HtmlUnit could be another interesting topic. 
  * Other initiatives include behavior driven test support, IDE plugins, XHTML support, integration with other testing framework like Fitnesse, and porting to other languages.

As we always said, Tellurium cannot grow without the support from our users. In the next year, we need to do a better job to promote Tellurium and build a larger and better community. Please keep supporting Tellurium. Tellurium is still young and it needs your *LTC* (love, tender, and care) to become mature and popular. 

= Acknowledgments =

Special thanks to JetBrains for providing us the Open Source License for IntelliJ IDEA and thanks to InfoQ China for interviewing us.