#summary Tellurium First Anniversary: Retrospect And Prospect.
#labels Phase-Support
<wiki:toc max_depth="5" />

= Introduction =

The Tellurium Automated Testing Framework (Tellurium) is one year old now if we count from the day that it became an open source project. Tellurium was originated from a small project I did for my company in 2007. The task was to use Selenium to test one application written using the Dojo Javascript Framework. Selenium became very popular at that time because it was a ground-breaking framework and it offered many unique features such as browser testing and "record and replay" testing mode using Selenium IDE. It was very attractive to a lot of people including me, which was why I took over the task from our scrum board. 

When I started to create Selenium test cases, I soon realized the task was not easy at all because our application was too dynamic to simply apply the "record and play" mode and data dependency was another contraint. The first thought came to my mind was to refactor the code generated by the Selenium IDE for more general test cases. But later, this proved to be as tedious and painful as to re-generate a new test code from scratch because of the hard-coded locators and the coupling of locator with test code. Maintenance was a headache as well because the test code is not structured. 

To be honest, I was not a web developer and my work mainly focused on the server side of Enterprise applications with a lot of research background in the past. I think my background helped to see problems and challenges more clearly. I asked myself: "Why not give up the record and re-play mode in the first place. Instead, I can define the UI objects and make them suitable for dynamic web". As a result, the prototype was called "Abstract Object-based Selenium Test Framework" (AOST). I tried to encapsulate dynamic factors inside UI objects so that the framework can handle them automatically for users. In the meanwhile, We should try to utilize as many cool features from Selenium as possible instead of reinventing the wheel. Hence, up to Tellurium 0.6.0, we still leveraged Selenium as the test driving engine.

Many Selenium users like me may also notice that Selenium test code is verbose and the XPath locator is everywhere. For maintenance purpose, it is preferable to have structured test code, which led to the UI module concept. The framework was prototyped twice and the prototypes laid the foundation of today's Tellurium framework. Many concepts still remain there such as the UI object, UI module, Javascript events, and runtime locator generation.  

The prototypes were used by our company for internal projects. However, there were very little motivation to improve the framework since only couple teams used it. In 2008, I worked on a project using Ruby and Rails and was very impressed by its syntax, meta programming features, and expressiveness. Motivated by the expressiveness and easiness of the dynamic language, I re-wrote the whole framework using Groovy and made it an open source project so that it could attract more users and urge me to keep improve it. One month later, it was renamed as the Tellurium Automated Testing Framework (Tellurium), which indicated the framework walked out the prototype phase.

= Look Back =

== Tellurium Project ==

In the past one year, Tellurium grew rapidly from a small core project into multiple sub-projects including

  * Tellurium Core: UI module, APIs, DSL, Object to Runtime Locator mapping, and test support.
  * Tellurium Engine: Based on Selenium Core with UI module, jQuery selector, command bundle, and exception hierarchy support.
  * Tellurium Extensions: Dojo Javascript widgets and ExtJS Javascript widgets.
  * Tellurium UI Module Plugin (TrUMP): A Firefox plugin to automatically generate the UI module after users select the UI elements from the web under testing.
  * Tellurium Maven Archetypes: Maven archetypes to generate skeleton Tellurium JUnit and Tellurium TestNG projects using one Maven command.
  * Tellurium Reference Projects: Use Tellurium project site as examples to illustrate how to use different features in Tellurium and how to create Tellurium test cases.

Main features in Tellurium include:
  * DSL for UI definition, actions, and testing
  * Dynamically generate runtime locators
  * UI module for structured testing code and reuse
  * UI templates for dynamic web contents
  * Javascript event support
  * Use TrUMP to automatically generate UI modules
  * Dojo and ExtJS widget extensions
  * JUnit and TestNG support
  * Ant and Maven support 
  * Data driven test support


== Tellurium Team ==

Tellurium is a team project and thank all team members, past and current members, for their contributions. Thank Adrian Carr for being the first Tellurium user and proposed "Tellurium Automated Testing Framework" as the name for the framework. Thank Quan Bui for his good work on Tellurium reference projects and the proposal of the ExtJS widget project. Thank Mikhail Koryak for his expertise in jQuery and prototyping jQuery support for Tellurium. We cannot implement the jQuery selector so quickly without his involvement. Thank Haroon Rasheed for his contribution to Tellurium reference projects and Selenium Grid support as well as user support in Tellurium user group. Thank Matt Senter for reconstructing the project code base and adding Maven support. His work to build and release Tellurium as well as the Maven repository Maintenance should be acknowledged. Thank Vivek Mongolu for his expertise in web development and prototyping the TrUMP Firefox plugin. His excellent work on TrUMP led to the release of TrUMP 0.1.0. Last but not the least, thank Jeff Xiong for his interest in contributing to Tellurium and his expertise in Selenium should be a huge asset to our team.

The past year was a difficult one for most of us with the economic downturn. Two of our team members were affected directly and the rest also experienced head cuts and other pressures from both work and life. But we still managed to improve and release Tellurium on a regular basis. We have released Tellurium 0.2.0, 0.3.0, 0.4.0, 0.5.0, 0.6.0, and TrUMP 0.1.0 in the past one year, which was a huge achievement for our team. All these would be impossible without all your hard work.   

Of course, there is still room to improve. Our goal to build a strong and active team has not been achieved due to many reasons. We are expecting more exceptional members to join our team. In the meanwhile, we also welcome committers to work on one or couple Tellurium tasks. Let us work together to make Tellurium a solid, real useful, and popular framework.
 
== Tellurium Community ==

Tellurium cannot reach today's stage without our users' support. Our users' comments and suggestions have shaped the Tellurium framework in many ways and various aspects. 

First, I like to thank Harihara Vinayakaram for his support and contribute to Tellurium, he was the most active Tellurium user for 2008-2009 without any doubt. Thanks to Dominic Mooney for his constructive suggestions and many bug reports. As the most valuable Tellurium for 2008-2009, we look forward to his continuous contribution to Tellurium in 2009-2010. 

Special thanks to Kevin Zhang for providing us the chance to be interviewed by InfoQ China. Thanks to Al Snow for being the first person to introduce Tellurium in conference. Thanks to Tarun for advocating TestNG to Tellurium. Thanks to poweroftesting, smartqa, Nicolae Vintila, Jason, Ravi Chaddha, laimu, DogTailFish, Raghu Savalagi, konstantin, boraldomaster, Filip Korling, Praveen, Iustina Vintila, Mariangela, Thomas Ro√überg, Theyagarajan, rajagopalcs, AbsolutZero, Ernst, dazz_x, rohanh, Manoj Chavan, syllant, and many other usrs for bug reporting and being involved in technical discussions in Tellurium user group.

Thanks to many people who are interested in Tellurium, use Tellurium, and promote Tellurium.   

= Future Directions =

First of all, we need more people to get involved in Tellurium development, testing, documenting, and promoting. We need a strong and active team to move forward quickly. 

From technical perspective, we will focus on our Engine project in 0.7.0 to provide better support for UI module and achieve better re-usability, speed performance, and robust. Tellurium widget will be re-architected to encapsulate dynamic factors and to make it easier to define and use. The widget extension projects will be implemented to include many widgets from Javascript frameworks such as Dojo and ExtJS so that users can include these widgets in their UI modules just by their names without knowing the details of the internal UI elements. TrUMP will be improved to support frames, pop-up widows, and UI templates. Another big move will be to automatically create UI module as well as the testing DSL scripts for non-developers. To better support functional tests, we like to introduce the stage concept into functional testing to make functional tests easier to write and configure. Headless web testing using HtmlUnit would be another interesting topic. Other initiatives include behavior driven test support, IDE plugins, XHTML support, integration with other testing framework like Fitnesse, and porting to other languages.

As we always said, Tellurium cannot grow without the support from our users. In the next year, we need to do a better job to promote Tellurium and build a stronger and better community. Tellurium is still young and need your *LTC* (love, tender, and care) to become mature and popular. 

= Acknowledgments =

Special thanks to JetBrains for providing us the Open Source License for IntelliJ IDEA. Special thanks to InfoQ China for interviewing us.