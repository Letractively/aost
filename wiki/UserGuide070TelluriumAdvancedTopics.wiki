#summary Advanced Topics in Tellurium.
#labels Phase-Support

(A PDF version of the user guide is available [http://aost.googlecode.com/files/TelluriumUserGuide.0.6.0.pdf here])

<wiki:toc max_depth="5" />

= Advanced Topics in Tellurium =

== Data Driven Testing ==

Data Driven Testing is a different way to write tests. For example, separate test data from the test scripts and the test flow is not controlled by the test scripts, but by the input file instead. In the input file, users can specify which tests to run, what are input parameters, and what are expected results. Data driven testing in Tellurium is illustrated in Figure 2-5 with the following system diagram:

*Figure 2-5 Data Driven Testing in Tellurium System Diagram*

http://tellurium-users.googlegroups.com/web/TelluriumDataDrivenSmall.jpg?gda=WePTVk4AAAD5mhXrH3CK0rVx4StVj0LYYQ-a0sZzxEmmZWlHbP2MWzTrErMgjh_s8-a7FfMpsGsNL5bu5vgQy2xsA01CuO9M47Cl1bPl-23V2XOW7kn5sQ&gsc=ODykzgsAAACEc2FtJPGdXe_7CHb1VB6Z

The Tellurium Data Driven Test consists of three main parts: 

  # Data Provider
  # TelluriumDataDrivenModule
  # TelluriumDataDrivenTest

=== Data Provider ===

The Data Provider is responsible for reading data from input stream and converting data to Java variables. 

Tellurium includes the following Data Provider methods:

  # loadData file_name, load input data from a file
  # useData String_name, load input data from a String in the test script
  # bind(field_name), bind a variable to a field in a field set
  # closeData, close the input data stream and report the test results
  # cacheVariable(name, variable), put variable into cache
  # getCachedVariable(name, variable), get variable from cache where the file_name includes the file path. For example:

{{{loadData "src/test/example/test/ddt/GoogleBookListCodeHostInput.txt"}}}

Tellurium supports pipe format and CSV format input file. 

=== loadData ===

To change the file reader for different formats, change the following settings in the configuration file {{{TelluriumConfig.groovy:}}}

{{{
datadriven{
  dataprovider{
    //specify which data reader you like the data provider to use
    //the valid options include "PipeFileReader", "CSVFileReader" at this point
    reader = "PipeFileReader"
  }
}
}}}

=== useData ===

Tellurium's useData is designed to specify test data in the test scripts directly. It loads input from a String. The String is usually defined in Groovy style using triple quota, for example:

{{{
protected String data = """
  google_search | true | 865-692-6000 | tellurium
  google_search | false| 865-123-4444 | tellurium selenium test
  google_search | true | 755-452-4444 | tellurium groovy
  google_search | false| 666-784-1233 | tellurium user group
  google_search | true | 865-123-5555 | tellurium data driven
  """
  ...

  useData data
}}}

=== bind ===

{{{bind}}} is the command used to bind a variable to an input Field Set field at runtime. {{{FieldSet}}} is the format of a line of data. For example:

{{{def row = bind("GCHLabel.row")}}}

is used to bind the row variable to the "row" field in the FieldSet "GCHLabel". Tellurium does not explicitly differentiate input parameters from the expected results in the input data. To bind variables to the input data then use any of them as the expected results for result comparison.

=== cacheVariable and getCachedVariable === 

cacheVariable and getCachedVariable are used to pass intermediate variables among tests. 

  * cacheVariable is used to put a variable into a cache 
  * getCachedVariable is used to get back the variable 

For example:

{{{
int headernum = getTableHeaderNum()
cacheVariable("headernum", headernum)

...

int headernum = getCachedVariable("headernum")
...
}}}

=== closeData ===

When testing is completed, use "closeData" to close the input data stream. In the meantime, the result reporter outputs the test results in the format specified in the configuration file. 

For example: the XML file as shown in the TelluriumConfig.groovy file:

{{{
test{
  result{
    //specify what result reporter used for the test result
    //valid options include "SimpleResultReporter", "XMLResultReporter", 
    //and "StreamXMLResultReporter"
    reporter = "XMLResultReporter"
   
    //the output of the result
    //valid options include "Console", "File" at this point
    //if the option is "File", you need to specify the file name, 
    //other wise it will use the default
    //file name "TestResults.output"
    output = "Console"

    //test result output file name
    filename = "TestResult.output"
  }
}
}}}

=== TelluriumDataDrivenModule ===

{{{TelluriumDataDrivenModule}}} is used to define modules, where users can define UI Modules, FieldSets, and tests as shown in the following Figure 2-6 sequence diagram. Users should extend this class to define their own test modules.

*Figure 2-6 TelluriumDataDrivenModule Sequence Diagram*

http://tellurium-users.googlegroups.com/web/TelluriumDDTModule.png?gda=oIfzLkgAAAD5mhXrH3CK0rVx4StVj0LY6r7Fxo4RaVZ2InRIkvRUPW9wwFNWzBcwQWJJR7cmP5glzhb83kORdLwM2moY-MeuGjVgdwNi-BwrUzBGT2hOzg&gsc=x3TBYwsAAAAeXMPG6HH-B1VXA1h0gdTp

{{{TelluriumDataDrivenModule}}} provides one method "defineModule" for users to implement. Since it extends the DslContext class, users define UI modules as in regular Tellurium UI Modules. For example:

{{{
ui.Table(uid: "labels_table", clocator: [:], group: "true"){
   TextBox(uid: "row: 1, column: 1", clocator: [tag: "div", 
           text: "Example project labels:"])
   Table(uid: "row: 2, column: 1", clocator: [header: "/div[@id=\"popular\"]"]){
        UrlLink(uid: "all", locator: "/a")
   }
}
}}}

=== FieldSet ===

FieldSet defines the format of one line of input data. FieldSet consists of fields such as columns, in the input data. There is a special field "test", where users can specify what tests this line of data applies to. For example:


{{{
fs.FieldSet(name: "GCHStatus", description: "Google Code Hosting input") {
    Test(value: "getGCHStatus")
    Field(name: "label")
    Field(name: "rowNum", type: "int")
    Field(name: "columNum", type: "int")
}  
}}}

FieldSet defines the input data format for testing Google code hosting web page. 

*Note:* The Test field must be the first column of the input data. 

The default name of the test field is "test" and does not need to be specified. If the value attribute of the test field is not specified, it implies this same format. For example, FieldSet is used for different tests.

A regular field includes the following attributes:

{{{
class Field {
        //Field name
        private String name

        //Field type, default is String
        private String type = "String"

        //optional description of the Field
        private String description

        //If the value can be null, default is true
        private boolean nullable = true

        //optional null value if the value is null or not specified
        private String nullValue

        //If the length is not specified, it is -1
        private int length = -1

        //optional String pattern for the value
        //if specified, use it for String validation
        private String pattern
   } 
}}}

Tellurium can automatically handle Java primitive types. 

=== typeHandler ===

Another flexibility Tellurium provides is allowing users to define their own custom type handlers to deal with more complicated data types by using "typeHandler". For example:

{{{
//define custom data type and its type handler

typeHandler "phoneNumber", "org.tellurium.test.PhoneNumberTypeHandler"

//define file data format
fs.FieldSet(name: "fs4googlesearch", description: "example field set for google search"){
    Field(name: "regularSearch", type: "boolean", 
          description: "whether we should use regular search or use I'm feeling lucky")
    Field(name: "phoneNumber", type: "phoneNumber", description: "Phone number")
    Field(name: "input", description: "input variable")
}
}}}

The above script defines a custom type "PhoneNumber" and the Tellurium automatically calls this type handler to convert the input data to the "PhoneNumber" Java type.

=== Define Test ===

The "defineTest" method is used to define a test in the TelluriumDataDrivenModule. For example, the following script defines the "clickGCHLabel" test:

{{{
defineTest("clickGCHLabel"){
    def row = bind("GCHLabel.row")
    def column = bind("GCHLabel.column")

    openUrl("http://code.google.com/hosting/")
    click  "labels_table[2][1].[${row}][${column}]"

    waitForPageToLoad 30000
}
}}}

*Note:* The bind command binds variables row, column to the fields "row" and "column" in the FieldSet "GCHLabel".

=== compareResult ===

Tellurium also provides the command "compareResult" for users to compare the actual result with the expected result. For example, the following script compares the expected label, row number, and column number with the acutal ones at runtime:

{{{
defineTest("getGCHStatus"){
    def expectedLabel = bind("GCHStatus.label")
    def expectedRowNum = bind("GCHStatus.rowNum")
    def expectedColumnNum = bind("GCHStatus.columNum")

    openUrl("http://code.google.com/hosting/")
    def label = getText("labels_table[1][1]")
    def rownum = getTableMaxRowNum("labels_table[2][1]")
    def columnum = getTableMaxColumnNum("labels_table[2][1]")
    
    compareResult(expectedLabel, label)
    compareResult(expectedRowNum, rownum) 
    compareResult(expectedColumnNum, columnum)
    pause 1000
}
}}}

Sometimes users may require custom "compareResult" to handle more complicated situations. For example, when users compare two lists, users can override the default "compareResult" behaviour by specifying custom code in the closure:

{{{
compareResult(list1, list2){
    assertTrue(list1.size() == list2.size())
    for(int i=0; i<list1.size();i++){
        //put your custom comparison code here
    }
}
}}}

=== checkResult ===

If users want to check a variable in the test, the "checkResult" method is used coming with a closure where users define the actual assertions inside:

{{{
checkResult(issueTypeLabel) {
    assertTrue(issueTypeLabel != null)
}
}}}

Like "compareResult", "checkResult" captures all assertion errors. The test resumes even when the assertions fail. The result is reported in the output.

=== Log Message ===

In addition, the "logMessage" is used by users to log any messages in the output.

{{{
logMessage "Found ${actual.size()} ${issueTypeLabel} for owner " + issueOwner 
}}}

=== Tellurium Data Driven Test ===

TelluriumDataDrivenTest is the class users should extend to run the actual data driven testing. It is more like a data driven testing engine. There is only one method, "testDataDriven", which users implement. The sequence diagram for the testing process is shown in Figure 2-7:

*Figure 2-7 TelluriumDataDrivenTest System Diagram*

http://tellurium-users.googlegroups.com/web/TelluriumDDTTestSequence.png?gda=Fgy8N04AAAD5mhXrH3CK0rVx4StVj0LY6r7Fxo4RaVZ2InRIkvRUPYEAgewWsw-pfk-JI3kLTQ9omPhdHiHZ5EjvmEnpg6SE47Cl1bPl-23V2XOW7kn5sQ&gsc=x3TBYwsAAAAeXMPG6HH-B1VXA1h0gdTp

Complete the following steps to use TelluriumDataDrivenTest:

  # Use "includeModule" to load defined Modules
  # Use "loadData" or "useData" to load input data stream
  # Use "stepToEnd" to read the input data line by line and pick up the specified test and run it, until reaches the end of the data stream
  # Use "closeData" to close the data stream and output the test results

What the "includeModule" does is to merge in all Ui modules, FieldSets, and tests defined in that module file to the global registry. 

"stepToEnd" looks at each input line, first find the test name and pass in all input parameters to it, and then run the test. The whole process is illustrated in the following example:

{{{
class GoogleBookListCodeHostTest extends TelluriumDataDrivenTest{

    public void testDataDriven() {
        includeModule  example.google.GoogleBookListModule.class
        includeModule  example.google.GoogleCodeHostingModule.class
        //load file
        loadData "src/test/example/test/ddt/GoogleBookListCodeHostInput.txt"

        //read each line and run the test script until the end of the file
        stepToEnd()

        //close file
        closeData()
   }
}
}}}

The input data for this example are as follows:

{{{
##TEST should be always be the first column

##Data for test "checkBookList"
##TEST | CATEGORY | SIZE
checkBookList|Fiction|8
checkBookList|Fiction|3

##Data for test "getGCHStatus"
##TEST | LABEL | Row Number | Column Number
getGCHStatus |Example project labels:| 3 | 6
getGCHStatus |Example project| 3 | 6

##Data for test "clickGCHLabel"
##TEST | row | column
clickGCHLabel | 1 | 1
clickGCHLabel | 2 | 2
clickGCHLabel | 3 | 3
}}}

*Note:* The line starting with "##" is the comment line and the empty line is ignored.

If users want to control the testing execution flow by themselves, Tellurium also provides this capability even though its use is *_not recommended_*.

Tellurium provides two additional commands, "step" and "stepOver". 

  * "step" is used to read one line of input data and run it.
  * "stepOver" is used to skip one line of input data. 

In this meanwhile, Tellurium also allows the user to specify additional test scripts using closure. For example:

{{{
step{
    //bind variables
    boolean regularSearch = bind("regularSearch")
    def phoneNumber = bind("fs4googlesearch.phoneNumber")
    String input = bind("input")
    openUrl "http://www.google.com"
    type "google_start_page.searchbox", input
    pause 500
    click "google_start_page.googlesearch"
    waitForPageToLoad 30000
}
}}}

This usually implies that the input data format is unique or the test script knows about what format the current input data are using.

== Selenium Grid Support ==

Selenium Grid transparently distributes tests on multiple machines so that the tests are run in parallel. Recently support for the Selenium Grid has been added to Tellurium. Now Tellurium tests can be run against different browsers using Selenium Grid. Tellurium core is updated to support Selenium Grid sessions.

For example, assume 3 machines are set up to run Tellurium tests on the Selenium Grid. All the steps can be completed on the userâs local box. To do this locally, remove the machine names with {{{localhost}}}. Each machine in this set up has a defined role as described below:

  # *dev1.tellurium.com* Tellurium test development machine.
  # *hub.tellurium.com* Selenium Grid hub machine that drives the tests.
  # *rc.tellurium.com* Multiple Selenium RC server running and registered to the Selenium Grid HUB. 

The actual test execution is completed on this machine. Register as many Selenium RC servers as required. However, be realistic about the hardware specification.

Download the Selenium Grid from the following URL and extract the contents of the folder on each of these machines.

Tellurium uses Selenium Grid 1.0.3, the current released version. [http://selenium-grid.seleniumhq.org/download.html http://selenium-grid.seleniumhq.org/download.html]. Figure 2-8 shows an illustration of the environment.

*Figure 2-8 Selenium Grid Support Environment*

http://tellurium-users.googlegroups.com/web/TelluriumGridSetup.png?gda=9fgieUgAAAD5mhXrH3CK0rVx4StVj0LYYQ-a0sZzxEmmZWlHbP2MW6uQS0SyLBzYwfM7_kvx7qklzhb83kORdLwM2moY-MeuGjVgdwNi-BwrUzBGT2hOzg&gsc=ODykzgsAAACEc2FtJPGdXe_7CHb1VB6Z

=== Selenium Grid Support Test Procedure ===

1. Launch the Selenium Grid Hub on the hub machine. Open up a terminal on the HUB machine {{{hub.tellurium.com}}} and go to the download directory of the Selenium Grid.

{{{
> cd /Tools/selenium-grid-1.0.3
> ant launch-hub
}}}

*Result:* The Selenium HUB is launched on the machine with different browsers. 

2. Navigate to the following URL location to ensure that the HUB is working properly: 
[http://hub.tellurium.com:4444/console http://hub.tellurium.com:4444/console]

3. View the web page with 3 distinct columns: 
  # a Configured Environments
  # Available Remote Controls
  # Active Remote Controls

4. Have a list of browsers configured by default to run the tests while the list for Available Remote Controls and Active Remote Controls is empty.

5. Launch the Selenium RC servers and register them with the selenium HUB. Open up a terminal on rc.tellurium.com and go to the selenium grid download directory.

{{{
> cd /Tools/selenium-grid-1.0.3
> ant -Dport=5555 -Dhost=rc.tellurium.com -DhubURL=http://hub.tellurium.com:4444 \
      -Denvironment="Firefox on Windows" launch-remote-control
}}}

*Result:* The command starts a Selenium RC server on this machine.

6. Register the Selenium RC server with the Selenium Grid hub machine as specified by the hubURL.

*Note:* To register another Selenium RC server on this machine for internet explorer repeat the step on a different port.

{{{
> cd /Tools/selenium-grid-1.0.3
> ant -Dport=5556 -Dhost=rc.tellurium.com -DhubURL=http://hub.tellurium.com:4444  -Denvironment="IE on Windows" launch-remote-control
}}}
 
  # _port_ the remote control is listening to. Must be unique on the machine the remote control runs from.
  # _hostname_ Hostname or IP address of the machine the remote control runs on. Must be visible from the Hub machine.
  # _hub url_ Which hub the remote control should register/unregister to. As the hub is running on hostname hub.tellurium.com, the URL is [http://hub.tellurium.com:4444/ http://hub.tellurium.com:4444]

7. Point your browser to the Hub console Once you are successful in replicating a setup similar to the one described above, ([http://hub.tellurium.com:4444/console http://hub.tellurium.com:4444/console]). 

8. Verify that all the remote controls registered correctly. Available remote controls list should be updated and have the 2 selenium servers available to run the tests.

9. Run the Tellurium tests against different browsers once the Selenium Hub and the Selenium RC servers on the Grid environment have started.

10. Go to the Tellurium test development machine, the *dev1.tellurium.com*.

11. Open up the TelluriumConfig.groovy. 
 
12. Change the values of the Selenium server and port to ensure the Tellurium requests for the new sessions from the Selenium HUB are received. 
 
13. Verify that the Selenium HUB points to Tellurium tests run on rc.tellurium.com based on the browser of choice.

14. Change the values for the following properties:

  # _runInternally_: ensures that the Selenium Server on the local machine is not launched.
  # _serverHost_: the selenium grid hub machine that has the information about the available selenium rc servers.
  # _port_: port that Selenium HUB is running on. By default, this port is 4444. This can be changed in the grid_configuraton.yml file if this port is not available on your HUB machine.
  # _browser_: the browser that comes under the configured environments list on the selenium HUB machine. These values can be changed to a userâs choice in the grid_configuration.yml file.

{{{
tellurium{

    //embedded selenium server configuration
    embeddedserver {

        //port number
        port = "4444"

        //whether to use multiple windows
        useMultiWindows = false

        //whether to run the embedded selenium server. 
        //If false, you need to manually set up a selenium server
        runInternally = false

        //profile location
        profile = ""

        //user-extension.js file
        userExtension = "target/classes/extension/user-extensions.js"
    }

    //event handler
    eventhandler{

        //whether we should check if the UI element is presented
        checkElement = false

        //wether we add additional events like "mouse over"
        extraEvent = true
    }

    //data accessor
    accessor{
        //whether we should check if the UI element is presented
        checkElement = true
    }

    //the configuration for the connector that connects the selenium client 
    //to the selenium server
    connector{
        //selenium server host
        //please change the host if you run the Selenium server remotely
        serverHost = "hub.tellurium.com"

        //server port number the client needs to connect
        port = "4444"

        //base URL
        baseUrl = "http://localhost:8080"

        //Browser setting, valid options are
        //  *firefox [absolute path]
        //  *iexplore [absolute path]
        //  *chrome
        //  *iehta
        browser = "Firefox on Windows"

        //user's class to hold custom selenium methods associated with user-extensions.js
        //should in full class name, for instance, "com.mycom.CustomSelenium"
        customClass = "org.tellurium.test.MyCommand"
    }
}}}

15. The set up is now complete.

16. Run the tests as usual using either the Maven command or the IDE. Notice that the tests are running on rc.tellurium.com and the list for Active Remote Controls is also updated on the hub URL ([http://hub.tellurium.com:4444/console http://hub.tellurium.com:4444/console]) during the test execution.

== Mock Http Server ==

This feature only exists in Tellurium Core 0.7.0 SNAPSHOT. The MockHttpServer is an embedded http server leveraging the Java 6 http server and it is very convenient method of testing HTML sources directly without running a web server. 

Tellurium defines two classes:

  # MockHttpHandler
  # MockHttpServer

=== Mock Http Handler Class ===

The MockHttpHandler class processes the http request:

{{{
public class MockHttpHandler implements HttpHandler {

  private Map<String, String> contents = new HashMap<String, String>();

  private String contentType = "text/html";

  public void handle(HttpExchange exchange) {
     ......
  }
}
}}}

The MockHttpHandler method is handle (HttpExchange exchange) and its actions are:

  * Reads the request URI
  * Finds the corresponding response HTML source from the hash map contents
  * Sends the response back to the http client

By default, the response is treated as an HTML source. The user can change this by using the following setter:

{{{public void setContentType(String contentType)}}}

MockHttpHandler includes two methods to add URI and its HTML source to the hash map contents:

  # public void registerBody(String url, String body)
  # public void registerHtml(String url, String html)

The MockHttpHandler comes with a default HTML template as follows:

{{{
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>Mock HTTP Server</title>
    </head>

    <body>
        BODY_HTML_SOURCE   
    </body>
</html>
}}}

If {{{registerBody(String url, String body}}} is used, the MockHttpHandler uses the above HTML template to wrap the HTML body. Overwrite the default HTML template by calling {{{registerHtml(String url, String html)}}} directly, which uses the whole HTML source provided in the variable ''html''.

Usually, the MockHttpHandler is encapsulated by the MockHttpServer and the user does not need to work on it directly.

The MockHttpServer includes an embedded http server, a http handler, and a http port:

{{{
public class MockHttpServer {

  //default port
  private int port = 8080;

  private HttpServer server = null;
  private MockHttpHandler handler;

  public MockHttpServer() {
    this.handler = new MockHttpHandler();
    this.server = HttpServer.create();
  }

  public MockHttpServer(int port) {
    this.handler = new MockHttpHandler();
    this.port = port;
    this.server = HttpServer.create();
  }

  public MockHttpServer(int port, HttpHandler handler) {
    this.port = port;
    this.handler = handler;
    this.server = HttpServer.create();
  }

  ......
}
}}}

=== Mock Http Server ===

The MockHttpServer provides three different constructors so the user can overwrite the default values. The MockHttpServer encapsulates the MockHttpHander by providing the following methods:

  # public void setContentType(String contentType)
  # public void registerHtmlBody(String url, String body)
  # public void registerHtml(String url, String html)

The user can stop and start the server with the following methods:

  # public void start()
  # public void stop()

Use a modified version of a HTML source provided by one Tellurium user as an example and create the UI module Groovy class as follows:

{{{
public class ListModule extends DslContext {

  public static String LIST_BODY = """
<div class="thumbnails">
    <ul>
        <li class="thumbnail">
            <img alt="Image 1"
                 src="/images_root/image_pictures/01.jpg"/>
        </li>
        <li class="thumbnail">
            <img alt="Image 2"
                 src="/images_root/image_pictures/02.jpg"/>
        </li>
        <li class="thumbnail">
            <img alt="Image 3"
                 src="/images_root/image_pictures/03.jpg"/>
        </li>
        <li class="thumbnail">
        </li>
        <li class="thumbnail active">
            <img alt="Image 4"
                 src="/images_root/image_pictures/04.jpg"/>
        </li>
        <li class="thumbnail potd">
            <div class="potd-icon png-fix"/>
            <img alt="Image 5"
                 src="/images_root/image_pictures/05.jpg"/>
        </li>
    </ul>
</div>    
  """

  public void defineUi() {
    ui.Container(uid: "rotator", clocator: [tag: "div", class: "thumbnails"]) {
      List(uid: "tnails", clocator: [tag: "ul"], separator: "li") {
        UrlLink(uid: "all", clocator: [:])
      }
    }
  }
}
}}}

The reason the HTML source in a Groovy file is included is that the """ quote in Groovy is very easy to present complicated HTML source as a String variable. In Java, the user must concatenate each line of the HTML Source to make it a String variable.

The {{{defineUi()}}} defines the UI module for the given HTML source. The major part of the UI module is a List, which uses UI templates to represent a list of links. Tellurium makes it easy and concise to use UI templates to represent UI elements.
Based on the ListModule UI module, define a Tellurium JUnit test case as follows:

{{{
public class ListTestCase  extends TelluriumJavaTestCase {
    private static MockHttpServer server;

    @BeforeClass
    public static void setUp(){
        server = new MockHttpServer(8080);
        server.registerHtmlBody("/list.html", ListModule.LIST_BODY);
        server.start();
    }

    @Test
    public void testGetSeparatorAttribute(){
        ListModule lm = new ListModule();
        lm.defineUi();

        connectUrl("http://localhost:8080/list.html");

        attr = (String)lm.getParentAttribute("rotator.tnails[6]", "class");
        assertEquals("thumbnail potd", attr);
    }
    

    @AfterClass
    public static void tearDown(){
        server.stop();    
    }
}
}}}

== Generate Html Source From UI Modules ==

Very often, some Tellurium users asked us to help them to track problems in their Tellurium test code. Due to some company policy, they cannot provide us the HTML source directly, but the UI module instead. Without the HTML source, there is no way for us to debug their test code because we do not have access to their web applications.

However, if we can do reverse engineering to generate the HTML source from the given UI module, we can use the [http://code.google.com/p/aost/wiki/TelluriumMockHttpServer mock http server] to test the generated HTML Source without the need to access their web applications. 

Driven by this motivation, we provided the following new method in {{{DslContext}}} for users to generate HTML source from UI modules:

{{{
  public String generateHtml(String uid)
}}}

The {{{generateHtml(uid)}}} method is really helpful if you want to help other people to track the problem in their Tellurium test code but you have not access to their web applications and HTML sources. Once the HTML source is generated, you can use the [http://code.google.com/p/aost/wiki/TelluriumMockHttpServer mock http server] to test the generated HTML Source].

=== Implementation ===

The key is to generate the HTML source for each individual UI object from the composite locator, denoted by {{{clocator}}}. As a result, we added two methods to the {{{CompositeLocator}}} class:

{{{
class CompositeLocator {
    String header
    String tag
    String text
    String trailer
    Map<String, String> attributes = [:]

    public String generateHtml(boolean closeTag){ 
      ......
    }

    public String generateCloseTag(){
      ......
    }
}}}

where {{{generateHtml(boolean closeTag)}}} returns the generated HTML source from the composite locator and the boolean variable _closeTag_ indicates whether to generate the closing tag for the HTML source. For Container type UI objects, most likely, you will not generate the closing tag directly, but use the other method {{{generateCloseTag()}}} to generate the closing tag separately so that we can include its child elements in between.

Then on the base class UiObject, we add the {{{generateHtml()}}} method as follows,

{{{
abstract class UiObject implements Cloneable{
    String uid
    String namespace = null
  
    def locator

    //reference back to its parent
    def Container parent

    public String generateHtml(){
      if(this.locator != null){
        return getIndent() + this.locator.generateHtml(true) + "\n";
      }
      
      return "\n";
    }

    public String getIndent(){
      if(parent != null){
          return parent.getIndent() + "    ";
      }else{
        return "";
      }
    }
}
}}}

To make pretty print, we add a {{{getIndent()}}} method in the UiObject to get the indentation for the current UI object. 

Once we added the {{{generateHtml()}}} method, all the concrete UI objects such as Button, InputBox, and UrlLink inherit this method to generate HTML source. However, for a Contain type, the implementation is different because we need to include its child UI objects in the HTML source. As a result, we overwrite the {{{generateHtml()}}} method in the UiObject.

{{{
class Container extends UiObject {
    def components = [:]

    @Override
    public String generateHtml(){
      StringBuffer sb = new StringBuffer(64);
      String indent = getIndent();

      if(this.components.size() > 0){
        if(this.locator != null)
          sb.append(indent + this.locator.generateHtml(false)).append("\n");
        this.components.each {String uid, UiObject obj ->
          sb.append(obj.generateHtml());
        }
        if(this.locator != null)
          sb.append(indent + this.locator.generateCloseTag()).append("\n");
      }else{
        if(this.locator != null){
          sb.append(this.locator.generateHtml(true)).append("\n")
        }
      }

      return sb.toString();
    }
}
}}}

UI templates in Tellurium objects such as List and Table make things more complicated. The basic idea is to elaborate all UI templates and key is to get the appropriate List size and Table size. We use an algorithm to determine the sizes and we don't want to go over the details here. 

Finally, we add the {{{generateHtml(String uid)}}} method to the {{{DslContext}}} class

{{{
  public String generateHtml(String uid){
    WorkflowContext context = WorkflowContext.getContextByEnvironment(this.exploreJQuerySelector, this.exploreSelectorCache)
    def obj = walkToWithException(context, uid)
    return obj.generateHtml()
  }
}}}

Another method {{{generateHtml()}}} is used to generate the HTML source for all UI modules defined in a UI module class file.

{{{
  public String generateHtml(){
    StringBuffer sb = new StringBuffer(128)
    ui.registry.each {String key, UiObject val ->
      sb.append(val.generateHtml())
    }

    return sb.toString()
  }
}}}

=== Usage ===

==== Container ====

We used the following UI module

{{{
    ui.Form(uid: "accountEdit", clocator: [tag: "form", id: "editPage", method: "post"]) {
        InputBox(uid: "accountName", clocator: [tag: "input", type: "text", name: "acc2", id: "acc2"])
        InputBox(uid: "accountSite", clocator: [tag: "input", type: "text", name: "acc23", id: "acc23"])
        InputBox(uid: "accountRevenue", clocator: [tag: "input", type: "text", name: "acc8", id: "acc8"])
        TextBox(uid: "heading", clocator: [tag: "h2", text: "*Account Edit "])
        SubmitButton(uid: "save", clocator: [tag: "input", class: "btn", type: "submit", title: "Save", name: "save"])
    }
}}}

Call the {{{generateHtml()}}} method 

{{{
    generateHtml("accountEdit");
}}}

and it generates the HTML source as follows,

{{{
<form id="editPage" method="post">
    <input type="text" name="acc2" id="acc2"/>
    <input type="text" name="acc23" id="acc23"/>
    <input type="text" name="acc8" id="acc8"/>
    <h2>Account Edit </h2>
    <input class="btn" type="submit" title="Save" name="save"/>
</form>
}}}

==== List ====

We have the following UI module with a List, which defines a set of URL links using UI template,

{{{
    ui.Container(uid: "subnav", clocator: [tag: "ul", id: "subnav"]) {
        Container(uid: "CoreLinks", clocator: [tag: "li", id: "core_links"]) {
          List(uid: "links", clocator: [tag: "ul"], separator: "li") {
            UrlLink(uid: "all", clocator: [:])
          }
        }
        UrlLink(uid: "subscribe", clocator: [tag: "li", id: "subscribe"])
    }
}}}
 
The generated HTML source is 

{{{
<ul id="subnav">
    <li id="core_links">
        <ul>
          <li>
            <a/>
          </li>
        </ul>
    </li>
    <li id="subscribe"/>
</ul>
}}}

==== Table ====

Table is a frequently used UI object with UI templates, the Tellurium Issue web page has a data grid to show the issues and it can described using the following UI module:

{{{
    ui.Table(uid: "issueResult", clocator: [id: "resultstable", class: "results"], group: "true") {
        TextBox(uid: "header: 1", clocator: [:])
        UrlLink(uid: "header: 2", clocator: [text: "*ID"])
        UrlLink(uid: "header: 3", clocator: [text: "*Type"])
        UrlLink(uid: "header: 4", clocator: [text: "*Status"])
        UrlLink(uid: "header: 5", clocator: [text: "*Priority"])
        UrlLink(uid: "header: 6", clocator: [text: "*Milestone"])
        UrlLink(uid: "header: 7", clocator: [text: "*Owner"])
        UrlLink(uid: "header: 9", clocator: [text: "*Summary + Labels"])
        UrlLink(uid: "header: 10", clocator: [text: "*..."])

        //define table elements
        //for the border column
        TextBox(uid: "row: *, column: 1", clocator: [:])
        TextBox(uid: "row: *, column: 8", clocator: [:])
        TextBox(uid: "row: *, column: 10", clocator: [:])
        //For the rest, just UrlLink
        UrlLink(uid: "all", clocator: [:])
    }
}}}

The generated HTML source is as follows

{{{
<table id="resultstable" class="results">
 <tbody>
  <tr>
   <th>
   

   </th>
   <th>
    <a>ID</a>

   </th>
   <th>
    <a>Type</a>

   </th>
   <th>
    <a>Status</a>

   </th>
   <th>
    <a>Priority</a>

   </th>
   <th>
    <a>Milestone</a>

   </th>
   <th>
    <a>Owner</a>

   </th>
   <th>


   </th>
   <th>
    <a>Summary + Labels</a>

   </th>
   <th>
    <a>...</a>

   </th>
  </tr>
  <tr>
   <td>
   

   </td>
   <td>
    <a/>

   </td>
   <td>
    <a/>

   </td>
   <td>
    <a/>

   </td>
   <td>
    <a/>

   </td>
   <td>
    <a/>

   </td>
   <td>
    <a/>

   </td>
   <td>
   

   </td>
   <td>
    <a/>

   </td>
   <td>
   

   </td>
   <td>
    <a/>

   </td>
  </tr>
 </tbody>
</table>
}}}

== Use Firebug and JQuery to Trace Problems in Tellurium Tests ==

=== Firebug Support ===

To add Firebug support, one way is to install the Firebug plugin to your web browser. You can get Firebug from 

https://addons.mozilla.org/en-US/firefox/addon/1843

Then, use the Firefox profile in your Tellurium Tests. For example, you can add the Firefox profile in TelluriumConfig.groovy as follows,

{{{
tellurium{
    //embedded selenium server configuration
    embeddedserver {
        //port number
        port = "4444"
        //whether to use multiple windows
        useMultiWindows = false
        //whether to run the embedded selenium server. If false, you need to manually set up a selenium server
        runInternally = true
        //profile location
        profile = "/home/jfang/.mozilla/firefox/zlduhghq.test"
        //user-extension.js file
        userExtension = "target/test-classes/extension/user-extensions.js"
    }
}}}

Or you can use the following command to specify the profile if you run the Selenium server externally,

{{{
[jfang@Mars ]$ java -jar selenium-server.jar -profilesLocation /home/jfang/.mozilla/firefox/zlduhghq.test
}}}

But sometimes, Selenium server has trouble to create a new profile from your profile and it might be better to add the Firebug plugin directly to the Selenium server. To do this, you need to following the following steps.

First, unpack the custom Selenium server

{{{
[jfang@Mars ]$ jar xvf selenium-server.jar
}}}

You will see all the files and directories listed as follows

{{{
[jfang@Mars Mars]$ ls -l
-rw-rw-r--. 1 jfang jfang    1677 2009-06-09 12:59 coding-conventions.txt
drwxrwxr-x. 6 jfang jfang    4096 2009-06-17 18:41 core
drwxrwxr-x. 3 jfang jfang    4096 2009-06-17 18:41 customProfileDirCUSTFF
drwxrwxr-x. 3 jfang jfang    4096 2009-08-14 16:58 customProfileDirCUSTFFCHROME
drwxrwxr-x. 3 jfang jfang    4096 2009-06-17 18:41 cybervillains
drwxrwxr-x. 2 jfang jfang    4096 2009-06-17 18:41 doctool
drwxrwxr-x. 2 jfang jfang    4096 2009-06-17 18:41 hudsuckr
drwxrwxr-x. 2 jfang jfang    4096 2009-06-17 18:41 images
-rw-rw-r--. 1 jfang jfang    1933 2009-06-09 12:59 index.html
-rw-rw-r--. 1 jfang jfang     620 2009-06-09 12:59 install-readme.txt
drwxrwxr-x. 3 jfang jfang    4096 2009-06-17 18:41 javax
drwxrwxr-x. 6 jfang jfang    4096 2009-06-17 18:41 jsunit
drwxrwxr-x. 2 jfang jfang    4096 2009-06-17 18:41 killableprocess
drwxrwxr-x. 2 jfang jfang    4096 2009-06-17 18:41 konqueror
drwxrwxr-x. 3 jfang jfang    4096 2009-06-17 18:41 META-INF
drwxrwxr-x. 2 jfang jfang    4096 2009-06-17 18:41 opera
drwxrwxr-x. 6 jfang jfang    4096 2009-06-17 18:41 org
-rw-rw-r--. 1 jfang jfang    2020 2009-06-09 12:59 readyState.xpi
-rw-rw-r--. 1 jfang jfang  129458 2009-06-09 12:59 reference.html
-rw-rw-r--. 1 jfang jfang      55 2009-06-12 15:12 selenium-ant.properties
drwxrwxr-x. 2 jfang jfang    4096 2009-06-17 18:41 sslSupport
drwxrwxr-x. 2 jfang jfang    4096 2009-06-17 18:41 strands
drwxrwxr-x. 5 jfang jfang    4096 2009-06-17 18:41 tests
drwxrwxr-x. 3 jfang jfang    4096 2009-06-17 18:41 unittest
-rw-rw-r--. 1 jfang jfang     153 2009-06-12 15:14 VERSION.txt
}}}

Then, copy your Firebug installed in your Firefox profile to the profiles in Selenium Server.

{{{
[jfang@Mars Mars]$ cp -rf /home/jfang/.mozilla/firefox/zlduhghq.test/extensions/firebug\@software.joehewitt.com customProfileDirCUSTFF/extensions/

[jfang@Mars Mars]$ cp -rf /home/jfang/.mozilla/firefox/zlduhghq.test/extensions/firebug\@software.joehewitt.com customProfileDirCUSTFFCHROME/extensions/
}}}

After that, re-pack the custom Selenium server

{{{
jar cmf META-INF/MANIFEST.MF selenium-server.jar *
}}}

Fortunately, you don't need to repeat the above step any more, we provide a custom Selenium server with Firebug support in our Maven repository. You should access it by using the following Maven dependency,

{{{
        <dependency>
            <groupId>org.openqa.selenium.server</groupId>
            <artifactId>selenium-server</artifactId>
            <version>1.0.1-tf</version>
          </dependency>
        </dependencies>
}}}

Of course, you need to specify our Maven repository in your settings.xml or your pom file.

{{{
        <repository>
            <id>kungfuters-thirdparty-releases-repo</id>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <url>http://maven.kungfuters.org/content/repositories/thirdparty</url>
        </repository>
}}}

=== Debug JavaScript Using Firebug ===

First, you need to put a breakpoint in your Java/Groovy test code, for example, we put a breakpoint on the UserTestCase class,


http://tellurium-users.googlegroups.com/web/TelluriumUserTestCase.png?gda=aK5n30sAAACvY3VTaWrtpkaxlyj9o09Eze2zIhq6411I_8TGzz5DI-qW4SmLmVbvXBbEmeIsaNidYZYxwa0BE4XjboRU-oYaBkXa90K8pT5MNmkW1w_4BQ&gsc=EAymlwsAAABsf4AHuALmOmkLNHG2feRw

Then, use the "Debug" menu to start your test case. Once the test reaches breakpoint, you can go to the Firefox browser to open Firebug.

http://tellurium-users.googlegroups.com/web/TelluriumOpenFirebug.png?gda=ixZrO0oAAACvY3VTaWrtpkaxlyj9o09EDO6MGplfJGHVhUec0kpXPoiAcPDq6RaxFOV-k14EkLyB_EtY4PNGNRy1KtA3K9bL_e3Wg0GnqfdKOwDqUih1tA&gsc=hGoVDAsAAAB8vRO2zTlOouy3DcrgOZrb

Sometime, the Firebug console is disabled by default, you need to enable it. After that, you can select the JavaScript files including those from Selenium core from the Javascripts menu in Firebug.

http://tellurium-users.googlegroups.com/web/TelluriumFirebugScript.png?gda=4-oX70wAAACvY3VTaWrtpkaxlyj9o09E7NkZ8HCattGn-1iiIrkpLwyVYbbBb4wvSnrgfyj7FfY29mST-NKidxSrAhXCh25v_Vpvmo5s1aABVJRO3P3wLQ&gsc=hGoVDAsAAAB8vRO2zTlOouy3DcrgOZrb

You can set a breakpoint in the JavaScript file and resume the test until it hits the breakpoint in the JavaScript file. You can find more details on how to debug Javascript from [http://getfirebug.com/js.html Firebug JavaScript debugging].

=== Trace Problems Using jQuery ===

The custom Selenium server is bundled with jQuery 1.3.2 when we added support for jQuery selector in Tellurium. We yielded the "$" sign and also renamed _jQuery_ to _teJQuery_ to avoid conflicts with user's jQuery library.

To use jQuery, you need to use the single window module for the custom Selenium server, i.e., change settings in TelluriumConfig.groovy to

{{{
        //whether to use multiple windows
        useMultiWindows = false
}}}

If you run the Selenium server externally, you should use the following command to start it in a single window mode,

{{{
java -jar selenium-server.jar -singlewindow
}}}

Similarly, you need to set a breakpoint in your Java/Groovy test code so that you can work on the Firefox browser using Firebug when the test suspends. 

If you open Firebug and look at the html content, you will see that your web application is actually running inside an IFrame in Selenium server shown as follows,

http://tellurium-users.googlegroups.com/web/TelluriumSeleniumServerIFrame.png?gda=PVoZHlMAAACvY3VTaWrtpkaxlyj9o09EgO6a7zKvb8te6WdvjGDohVyd-tnS0xlr1YxP__WLUaGnQLDSh5D6u11BZBWKcByUMrYifh3RmGHD4v9PaZfDexVi73jmlo822J6Z5KZsXFo&gsc=n_OfJwsAAACQg_IcbRBLWbV5y8FhKpga

To access elements in the IFrame using jQuery, you need to use the following trick

{{{
teJQuery("#selenium_myiframe").contents().find(YOUR_JQUERY)
}}}

For example, we use the following jQuery to check if a button is there 

{{{
teJQuery("#selenium_myiframe").contents().find("input.btn")
}}}
 
We can also dump out the html source starting from the button's parent,

{{{

teJQuery("#selenium_myiframe").contents().find("input.btn").parent().html()
}}}

The output is shown as follows,

http://tellurium-users.googlegroups.com/web/TelluriumJQueryIframe.png?gda=W0CtWEsAAACvY3VTaWrtpkaxlyj9o09Ei2DGeSsGpuBT4mNQYpRc0uTSq-Pi7IIn7mvi-lgcznBE4WwyXqDrOCG6YsJPv3PQBkXa90K8pT5MNmkW1w_4BQ&gsc=n_OfJwsAAACQg_IcbRBLWbV5y8FhKpga

Thanks to Dominic. For multiple window mode, you can use the following way to find an element.

{{{
teJQuery(selenium.browserbot.getCurrentWindow().document).find("#username")
}}}

== Tellurium Powerful Utility: Diagnose ==

Usually, the main problem that users have in Tellurium is that their UI modules are not defined correctly. As a result, the generated runtime locator is either not unique or cannot be found. Very often, users ask our developers to trace or debug their test code. However, it is a difficult task for our Tellurium developers, too because usually the web application and their full test code are not available to us. It would be more important to provide users some utilities for them to trace/debug their code by themselves instead of relying on our Tellurium developers.

The utility method _diagnose_ is designed for this purpose, which is available in the DslContext class and the method signature is as follows,

{{{
public void diagnose(String uid)
}}}
 
What it actually does is to dump the following information to console, 

  # The number of the matching UI element for the runtime locator corresponding to the _uid_.
  # The html source for the parent UI object of the UI object _uid_.
  # The closest matching UI elements in the DOM for the generated locator.
  # The html source for the entire page.

Most of the above are optional, and thus, Tellurium provides you three more methods for your convenience.

{{{
public DiagnosisResponse getDiagnosisResult(String uid)
public void diagnose(String uid, DiagnosisOption options)
public DiagnosisResponse getDiagnosisResult(String uid, DiagnosisOption options)
}}} 

where DiagnosisResponse is defined as

{{{
public class DiagnosisResponse {
  private String uid;

  private int count;

  private ArrayList<String> matches;

  private ArrayList<String> parents;

  private ArrayList<String> closest;

  private String html;
}
}}}
  
so that you can process the result programmatically. 

DiagnosisOption is used to configure the return result,

{{{
public class DiagnosisOption {

  boolean retMatch = true;

  boolean retHtml = true;

  boolean retParent = true;

  boolean retClosest = true;
}
}}}


=== Implementation ====

Under the hood, Tellurium core first creates a request for the diagnose call,

{{{
public class DiagnosisRequest {
  //uid for the UI object
  private String uid;

  //parent UI object's locator
  private String pLocator;

  //UI objects attributes obtaining from the composite locator
  private Map<String, String> attributes;

  //options for the return results
  private boolean retMatch;
  
  private boolean retHtml;

  private boolean retParent;

  private boolean retClosest;
}}}

The request is then converted into a JSON string so that we can pass the request to Selenium as a custom method,

{{{
class CustomSelenium extends DefaultSelenium {
    ......

    public String diagnose(String locator, String request){
		String[] arr = [locator, request];
		String st = commandProcessor.doCommand("getDiagnosisResponse", arr);
		return st;
    }
}
}}}

The custom Selenium server includes [http://code.google.com/p/aost/wiki/TelluriumjQuerySelector our jQuery selector] support. We add the following new Selenium method,

{{{
Selenium.prototype.getDiagnosisResponse = function(locator, req){
......
}
}}}
 
I wouldn't go over the implementation details for this method and you can read the source code on Tellurium Engine project if you are really interested.
 
=== Usage ===

Assume we have the following Tellurium UI module defined

{{{
public class ProgramModule extends DslContext {

    public static String HTML_BODY = """
<div id="ext-gen437" class="x-form-item" tabindex="-1">
    <label class="x-form-item-label" style="width: 125px;" for="ext-comp-1043">
        <a class="help-tip-link" onclick="openTip('Program','program');return false;" title="click for more info" href="http://localhost:8080">Program</a>
    </label>

    <div id="x-form-el-ext-comp-1043" class="x-form-element" style="padding-left: 130px;">
        <div id="ext-gen438" class="x-form-field-wrap" style="width: 360px;">
            <input id="programId" type="hidden" name="programId" value=""/>
            <input id="ext-comp-1043" class="x-form-text x-form-field x-combo-noedit" type="text" autocomplete="off"
                   size="24" readonly="true" style="width: 343px;"/>
            <img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger" src="images/s.gif"/>
        </div>
    </div>
    <div class="x-form-clear-left"/>
</div>
    """

  public void defineUi() {
    ui.Container(uid: "Program", clocator: [tag: "div"], group: "true") {
      Div(uid: "label", clocator: [tag: "a", text: "Program"])
      Container(uid: "triggerBox", clocator: [tag: "div"], group: "true") {
        InputBox(uid: "inputBox", clocator: [tag: "input", type: "text", readonly: "true"], respond: ["click"])
        Image(uid: "trigger", clocator: [tag: "img", src: "*images/s.gif"], respond: ["click"])
      }
    }
  }
}
}}}

We create a Tellurium test case using the [http://code.google.com/p/aost/wiki/TelluriumMockHttpServer MockHttpServer] without running an actual web application.

{{{
public class ProgramModuleTestCase extends TelluriumJavaTestCase{
    private static MockHttpServer server;

    @BeforeClass
    public static void setUp(){
        server = new MockHttpServer(8080);
        server.registerHtmlBody("/program.html", ProgramModule.HTML_BODY);
        server.start();
    }

    @Test
    public void testGetSeparatorAttribute(){
        ProgramModule pm = new ProgramModule();
        pm.defineUi();
        pm.useJQuerySelector();
        connectUrl("http://localhost:8080/program.html");
        pm.diagnose("Program.triggerBox.trigger");
        pm.click("Program.triggerBox.trigger");
    }

    @AfterClass
    public static void tearDown(){
        server.stop();
    }
}
}}}

Note that we want to diagnose the Image UI object "Program.triggerBox.trigger",

{{{
pm.diagnose("Program.triggerBox.trigger");
}}}

Run the test and you will see the return result as follows,

{{{
Diagnosis Result for Program.triggerBox.trigger

-------------------------------------------------------

	Matching count: 1

	Match elements: 

	--- Element 1 ---

<img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger" src="images/s.gif">


	Parents: 

	--- Parent 1---

<div id="x-form-el-ext-comp-1043" class="x-form-element" style="padding-left: 130px;">
        <div id="ext-gen438" class="x-form-field-wrap" style="width: 360px;">
            <input id="programId" name="programId" value="" type="hidden">
            <input id="ext-comp-1043" class="x-form-text x-form-field x-combo-noedit" autocomplete="off" size="24" readonly="true" style="width: 343px;" type="text">
            <img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger" src="images/s.gif">
        </div>
    </div>

	--- Parent 2---

<div id="ext-gen438" class="x-form-field-wrap" style="width: 360px;">
            <input id="programId" name="programId" value="" type="hidden">
            <input id="ext-comp-1043" class="x-form-text x-form-field x-combo-noedit" autocomplete="off" size="24" readonly="true" style="width: 343px;" type="text">
            <img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger" src="images/s.gif">
        </div>


	Closest: 

	--- closest element 1---

<img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger" src="images/s.gif">
HTML Source: 

<head>
    <title>Mock HTTP Server</title>
</head>
<body>
  <div id="ext-gen437" class="x-form-item" tabindex="-1">
    <label class="x-form-item-label" style="width: 125px;" for="ext-comp-1043">
        <a class="help-tip-link" onclick="openTip('Program','program');return false;" title="click for more info" href="http://localhost:8080">Program</a>
    </label>

    <div id="x-form-el-ext-comp-1043" class="x-form-element" style="padding-left: 130px;">
        <div id="ext-gen438" class="x-form-field-wrap" style="width: 360px;">
            <input id="programId" name="programId" value="" type="hidden">
            <input id="ext-comp-1043" class="x-form-text x-form-field x-combo-noedit" autocomplete="off" size="24" readonly="true" style="width: 343px;" type="text">
            <img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger" src="images/s.gif">
        </div>
    </div>
    <div class="x-form-clear-left">
    </div>
  </div>
</body>

-------------------------------------------------------
}}}

This is really the happy path and runtime locator is found and is unique. What if the UI module definition is a bit wrong about the Image object?

{{{
   Image(uid: "trigger", clocator: [tag: "img", src: "*image/s.gif"], respond:["click"])
}}}

That is to say, the _src_ attribute is not correct.

Run the same test code and the result is as follows,

{{{
Diagnosis Result for Program.triggerBox.trigger

-------------------------------------------------------

	Matching count: 0


	Parents: 

	--- Parent 1---

<div id="x-form-el-ext-comp-1043" class="x-form-element" style="padding-left: 130px;">
        <div id="ext-gen438" class="x-form-field-wrap" style="width: 360px;">
            <input id="programId" name="programId" value="" type="hidden">
            <input id="ext-comp-1043" class="x-form-text x-form-field x-combo-noedit" autocomplete="off" size="24" readonly="true" style="width: 343px;" type="text">
            <img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger" src="images/s.gif">
        </div>
    </div>

	--- Parent 2---

<div id="ext-gen438" class="x-form-field-wrap" style="width: 360px;">
            <input id="programId" name="programId" value="" type="hidden">
            <input id="ext-comp-1043" class="x-form-text x-form-field x-combo-noedit" autocomplete="off" size="24" readonly="true" style="width: 343px;" type="text">
            <img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger" src="images/s.gif">
        </div>


	Closest: 

	--- closest element 1---

<img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger" src="images/s.gif">

HTML Source: 

<head>
    <title>Mock HTTP Server</title>
</head>
<body>
  <div id="ext-gen437" class="x-form-item" tabindex="-1">
    <label class="x-form-item-label" style="width: 125px;" for="ext-comp-1043">
        <a class="help-tip-link" onclick="openTip('Program','program');return false;" title="click for more info" href="http://localhost:8080">Program</a>
    </label>

    <div id="x-form-el-ext-comp-1043" class="x-form-element" style="padding-left: 130px;">
        <div id="ext-gen438" class="x-form-field-wrap" style="width: 360px;">
            <input id="programId" name="programId" value="" type="hidden">
            <input id="ext-comp-1043" class="x-form-text x-form-field x-combo-noedit" autocomplete="off" size="24" readonly="true" style="width: 343px;" type="text">
            <img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger" src="images/s.gif">
        </div>
    </div>
    <div class="x-form-clear-left">
    </div>
  </div>
</body>

-------------------------------------------------------
}}}

You can see that there is no matching elements for the runtime locator. But the good thing is that the diagnose method provides you the closest UI elements it can find from the DOM,

{{{
	--- closest element 1---

<img id="ext-gen439" class="x-form-trigger x-form-arrow-trigger" src="images/s.gif">
}}}

By looking at this above lines, we could realize that the _src_ attribute is wrong in our UI module. 

Some careful readers may want to ask "why you add a partial matching symbol `*` to the src attribute in the UI module. The reason is that in jQuery, seems the _src_ attribute in an Image has to be a full URL such as http://code.google.com/p/aost/. One workaround is to put the partial matching symbol `*` before the URL.

In some case, the return matching count is larger than 1 and you can figure out how to update your UI module definition by looking at all the return elements and their parents.

== Internationalization support in Tellurium ==

Tellurium now provides support for internationalization of strings and exception messages. Any software system should have support for regional language settings and options to be effective. Internationalization and localization provides this support. Locales define the language and region. Locales can define how region specific data is presented to users. Every locale will have a language code followed by a region code. Ex: fr_FR represents french language in the region of France. Internationalized strings for each locale is provided through a MessageBundle engineered for a specific locale which is of the format `<MessageBundleName>_<language-code>_<country code>.properties`

=== Internationalization support in Tellurium ===

The Internationalization support in Tellurium is provided through the InternationalizationManager class. The default bundle used in Tellurium is the DefaultMessagesBundle.properties. All strings and exception messages used in the tellurium core classes are read in from the DefaultMessageBundle properties file. 

In order to configure regional messages, This class has a translate that provides Internationalization support. 


For plain strings
{{{
translate( "<key>") 
}}}
For Strings with parameters
{{{
translate("<key>" , { [ item1 , item2 , … , item n]}
}}}
For double numeric value
{{{
translate(<doubleValue> , false)
}}}
For currency data
{{{
translate(<doubleValue> , true)
}}}
For Dates
{{{
translate(<dateValue> , false)
}}}
For time
{{{
translate(<timeValue> , true)
}}}

The `translate(<key>)` method signature internationalizes a simple string. The `translate(<key> , { [ item1 , item2 , … , item n]}` method definition allows parameterization of an internationalized string to allow external strings/arguments as parameter to the string.

The localization can be defined in two ways
# setting the locale on your system preferences / settings. (ex: regional settings in Windows machine). This is the preferred and a better way of setting the locale
# adding an i18n section similar to below

{{{
i18n{
        locales = "en_EN"
    }
}}}

=== Internationalization extension to user defined tests ===

Internationalization support has been extended to test cases, so any user defined test case can use
{{{
 geti18nManager() 
}}}

to utilize the translate function support in their own test code. Internationalized strings can be added to user defined MessageBundles defined in the src/main/resources folder of user defined projects. The general steps to provide internationalization in your project are as follows:

1. Create a user defined MessageBundle.properties, a default locale message bundle, as well as one for each region you want to provide support for in your project, ex: MessageBundle_fr_FR.properties will have strings translated into french

2. Add the user defined resource bundle using the geti18nManager function, like so: `getI18nManager().addResourceBundle("MessageBundle")`

3. Now use the `translate` function to internationalize strings

=== Simple Example ===

Here is a simple example of code from a GoogleBooksListGroovyTestCase. I assume that user has already defined a MessagesBundle.properties,located at src/main/resources, as follows

MessagesBundle.properties
{{{
GoogleBooksListGroovyTestCase.SetUpModule=Setting up google book list
GoogleBooksListGroovyTestCase.Category=Category is {0}
GoogleBooksListGroovyTestCase.ConnectSeleniumServer=Connection to selenium server
}}}

Now defining the same properties file in French

MessageBundle_fr_FR.properties
{{{
GoogleBooksListGroovyTestCase.SetUpModule=Liste de livre de google d'établissement
GoogleBooksListGroovyTestCase.Category=La catégorie est {0}
GoogleBooksListGroovyTestCase.ConnectSeleniumServer=Se relier au serveur de sélénium
}}}

Here is the definition of a testCase that uses the Internationalization support
{{{
class SampleGroovyTestCase extends TelluriumGroovyTestCase {

    public void initUi() {
    }

    public void setUp(){
        setUpForClass()
        //adding the local resource bundle, make sure it's not titled "DefaultMessagesBundle" since
        //this will overwrite the default one we use in Tellurium core and cause exceptions
        geti18nManager().addResourceBundle("MessagesBundle")
        
        //geti18nManager() can also be replaced by 
        //manager = new InternationalizationManager(), where manager is a class level variable of type
       //InternationalizationManager

    }

    public void tearDown(){
        tearDownForClass()
    }

    public void testTranslateWithEnglishLocale()
    {
       //translating of strings
       String message = geti18nManager().translate("i18nManager.testString")
       assertEquals("This is a testString in English", message)

       //translation of number data types
       Double amount = new Double(345987.246);
       String translatedValue = geti18nManager().translate(amount, false)
       assertEquals("345,987.246" , translatedValue)

       //translation of currency data types
       amount = new Double(9876543.21);
       translatedValue = geti18nManager().translate(amount, true)
       assertEquals("\$9,876,543.21" , translatedValue)

       //translation of dates - date is 2009, Jan 1
       Date date = new Date(109 , 0 , 1)
       translatedValue = geti18nManager().translate(date, false)
       assertEquals("Jan 1, 2009" , translatedValue)
     }
}
}}}