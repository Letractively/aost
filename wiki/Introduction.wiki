#labels Featured,Phase-Design
= Introduction =

*Abstract Object-based Selenium Test* (_AOST_) framework
  * Written in *Groovy*, test cases can be written in *Java* or *Groovy* 
  * Include a *Domain Specific Language* (_DSL_) to define UI objects 
  * Can also use the _DSL_ to describe events, actions, or assertions 
  * include an *Object to Locator Mapping framework* (_OLM_)
  * AOST can automatically generate the UI object locator for you
  * AOST implements the *group locating* concept to utilize a group of UI objects to help locating their locators
  * Make it possible for users to write Selenium tests when they start coding
  * Reusable, easier to refactor and maintain
  * Provide _DSL_ script executor so that non-developers can write Selenium tests in DSL

= Details =

== UI Objects ==

The UI Object includes
  * uid: should be unique in a UI module
  * namespace: for future extension
  * locator: the locator of the UI object, could be XPATH, CSS selector... The easier way to find the locator would be to use firefox XPather plugin.
  * Features: the inherent feature of the UI component, for example, the selection UI component normally comes with “label=?” or “value=?”. Table always has the “table”, “tr”, “td”, “th” tags.
  * useGroupInfo: this option only applies to a collection type of UI object such as Container, Table, List, Form and so on. By default, this option is turned off. If it is on, the object will use the UI objects to help locating its locator.

Regular UI objects include Button, CheckBox, Icon, InputBox, Selector, TextBox, Table... 
A container is a special UI object and it could be a pure abstract object to hold and group different UI objects together. The container will make the objects inside searchable since it uses a list to hold them.

Users can also define custom UI objects. They need to create a UI builder for each new UI 
object and add it to the UiObjectBuilderRegistry.

Be aware that each UI object only has predefined set of events or actions. For example, the InputBox has the _type_ action, but the Selector does not have that.

== DSL ==
 
DSL can only be run in *DslContext*, which defines the basic DSLs. 

=== Define UI objects ===
_ui.Container_ is used to define the UI objects on the web and map them to objects.
For example, the search module in the google start page can be defined by 
the following DSL.

{{{
ui.Container(uid: "google_search"){
   InputBox(uid: "inputbox1", locator: "//input[@title='Google Search']")
   Button(uid: "button1", locator: "//input[@name='btnG' and @type='submit']")
}
}}}

The definition can be nested, for example
{{{
ui.Container(uid: "parent_ui"){
   InputBox(uid: "inputbox1", locator: "...")
   Button(uid: "button1", locator: "...")
   Container(uid: "child_ui){
     Selector(uid: "selector1", locator: "...")
     ...
     Container(uid: "grand_child"){
       TextBox(uid: "textbox1", locator: "...")
       ...
     }
   }
}
}}}

=== Basic DSLs ===

Because of the Groovy Syntax, each method in the DslContext is a DSL expression.
For example, the _click_ method as follows:
{{{
def click(String id){
  ...
}
}}}
is a dsl in the format:
{{{
  click id
}}}

Similarly, we have the following dsls:
{{{
doubleClick id
clickAt id, coordination
check id
uncheck id
type id, input
keyType id, input
typeAndReturn id, input
clearText id
select id, target
selectByLabel  id, target
selectByValue id, target
waitForText id, timeout
isElementPresent id
isVisible id
isChecked id
waitForElementPresent id, timeout
waitForElementPresentid, timeout, step
getText id
getValue id
pause milliseconds
}}}

=== Extended DSLs ===
The DslContext can be extended to include more DSLs. For example, 
the DslScriptEngine extends DslContext to add the following DSL
{{{
openUrl url
}}}
and other assertions defined in GroovyTestCase.

=== UI Object Locators ===
There are two type of UI object locators:
  * Base Locator: the actual locator at run time. Denoted by "locator".
  * Composite Locator: User specifies a set of parameters for the object and the actual locator will be derived automatically by AOST. Denoted by "clocator".

The Basic Locator is only a String that you can specify the run time locator. But the Composite Locator is more complicated and its definition is as follows:
{{{
class CompositeLocator {
    String header
    String tag
    String text
    String trailer
    def position
    Map<String, String> attributes = [:]
}
}}}

For most UI object, the html tag is fixed, for example, a Table's tag is always "table". Header and Trailer are used to specify addition xpath related to this UI object and the final xpath is 
{{{
XPath = header + derived xpath for object + trailer
}}}

=== The Group Locating Concept (GLC) ===

The Group Locating Concept (GLC) concept comes from the simple observation, i.e., it is much easier to locate a collection of UI objects than a single UI object. The reason is multiple UI objects provide more search criteria to help you to locate the UIs. This concept is implemented in AOST. All collection type object, i.e., Container and its extended classes have an option to use the group locating concept. 

Let's see the differences between regular locating and group locating. Still take the google start page as an example:

{{{
ui.Container(uid: "google_start_page", clocator: [tag: "td"], group: "true"){
  InputBox(uid: "searchbox", clocator: [title: "Google Search"])
  SubmitButton(uid: "googlesearch", clocator: [name: "btnG", value: "Google Search"])
  SubmitButton(uid: "Imfeelinglucky", clocator: [value: "I'm Feeling Lucky"])
}

}}}

Here, clocator stands for composite locator. Without group locating, I can only use the given criteria 

{{{
tag = "td" 
}}}

to find the container locator, i.e., 
{{{
I am looking for a td html tag in the DOM
}}} 
which is quite difficult. If we use the group locating, the Container can use the group information provided by its children. Now, the problem becomes: 
{{{
  I am looking for a td html tag in the DOM and its children including an input box with
  title "Google Search", a submit button with name "btnG" and value "Google Search", and
  another submit button with value "I'm Feeling Lucky"
}}}
Woo! I have a lot of information to help me to locate the container. Once the container is found, all its children can be found very easily.

The direct result of group locating is that for most case, the information defined in the UI module itself is enough for you to locate all UI objects in that UI module. That is to say, your test code only depends on your own UI module, not its location and its outside. Even we change the UI, the test may still work.  

Another advantage is that you may be able to map your JSP, PHP, ASP,..., file directly to the UI module in AOST. This could help developers a lot for writing Selenium tests because they do not need to manually find the locator for an UI object. 

=== Define multiple UI modules in a single file ===
Initially, you can define only one UI module in a file that extends the DslContext class. Now, AOST supports multiple UI modules in a single file. This is extremely important for pure DSL scripts.

For example, you can define multiple UI modules as follows:
{{{
class AostProjectPage extends DslContext{
  public void defineUi() {
     //define the menu
     //It is fine to use Container to abstract Table if you have special table
     ui.Container(uid: "menu", clocator: [tag: "table", id: "mt", trailer: "/tbody/tr/th"], group: "true"){
     //since the actual text is  Project&nbsp;Home, we can use partial match here. Note "%%" stands for partial match
     UrlLink(uid: "project_home", clocator: [text: "%%Home"])
     UrlLink(uid: "downloads", clocator: [text: "Downloads"])
     UrlLink(uid: "wiki", clocator: [text: "Wiki"])
     UrlLink(uid: "issues", clocator: [text: "Issues"])
     UrlLink(uid: "source", clocator: [text: "Source"])
    }

    //define the search module, which includes an input box, two search buttons
    ui.Form(uid: "search", clocator: [:], group: "true"){
     InputBox(uid: "searchbox", clocator: [name: "q"])
     SubmitButton(uid: "search_project_button", clocator: [value: "Search Projects"])
     SubmitButton(uid: "search_web_button", clocator: [value: "Search the Web"])
    }
  }
}
}}}