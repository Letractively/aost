<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">

    <title>Tellurium Core Basics</title>
     <section>
        <title>UiID Attribute</title>
        <para>In Tellurium, the UI object is referred to by its
            UiID, i.e., the UI object identifier.For nested Ui
            objects, the UiID of the UI Object is a concatenated UI
            objects' uids along its path to the UI Object. For
            example, in the following nested UI Module shown
            below, the TextBox is referred to as the "parent_ui.child_ui.grand_child.textbox1".
        </para>
        <para>
            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
ui.Container(uid: "parent_ui"){
  InputBox(uid: "inputbox1", locator: "...")
  Button(uid: "button1", locator: "...")
  Container(uid: "child_ui){
    Selector(uid: "selector1", locator: "...")
    ...
    Container(uid: "grand_child"){
      TextBox(uid: "textbox1", locator: "...")
      ...
    }
  }
}        
]]>
            </programlisting>
        </para>
        <para>
            The exceptions are tables and lists, which use [x][y]  or
            [x] to reference the elements inside. For example,
            labels_table[2][1]  and GoogleBooksList.subcategory[2].
            The Table header can be referred in the format of
            issueResult.header[2]. 
        </para>
         <para>
             More general cases are shown below - General
             Cases Search Example: 
         </para>
         <para>
            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
ui.Form(uid: "A", clocator: [:]){
  InputBox(uid: "B", clocator: [:])
  Container(uid: "C", clocator: [tag: "div"]){
     Selector(uid: "D", clocator: [:])
     List(uid: "E", clocator: [tag: "ul"], separator: "li"){
        UrlLink(uid: "{1} as Link", clocator: [:])
        InputBox(uid: "{all}", clocator: [:])
     }
  }        
]]>
            </programlisting>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./media/TelluriumUID.png" scalefit="1" width="100%"></imagedata>
                </imageobject>

            </mediaobject>
        </para>
         <para>
             For example, the UiID of the List E in the above diagram is A.C.E and the InputButton in the List E  is
             referred by its index n. For example: A.C.En. 
         </para>
    </section>
    <section>
    <title>Locator Attributes</title>
        <para>
            Tellurium supports two types of UI Object locators:
            <orderedlist>
                <listitem>
                    Base locator
                </listitem>
                <listitem>
                    Composite locator
                </listitem>
            </orderedlist>

        </para>
        <para>
            The Base locator is a relative XPath.
        </para>
        <para>
            The Composite locator, denoted by "clocator", specifies a set of attributes for the UI object.
            The actual locator is derived automatically by Tellurium at runtime.
            The Composite locator is defined as follows: 
        </para>
        <para>
            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
class CompositeLocator {
   String header
   String tag
   String text
   String trailer
   def position
   boolean direct
   Map<String, String> attributes = [:]
}
]]>                
            </programlisting>
        </para>
        <para>
            To use the Composite locator, use "clocator" with a map as its value. For example:
       
            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
clocator: [key1: value1, key2: value2, ...]
]]>
            </programlisting>
        </para>
        <para>
            The default attributes include "header", "tag", "text", "trailer", "position", and "direct".
            They are all optional. The "direct" attribute specifies whether this UI object is a direct
            child of its parent UI, and the default value is "false". If there are additional attributes,
            they are defined in the same way as the default attributes. For example:
            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
clocator: [tag: "div", value: "Tellurium home"]
]]>
            </programlisting>
        </para>
        <para>
            Most Tellurium objects come with default values for certain attributes. For example, the tag attribute.
            If these attributes are not specified, the default attribute values are used. In other words, if the
            default attribute values of a Tellurium UI object are known, omit them in clocator. For example,
            if the RadioButton Objectâ€™s default tag is "input", and the default type is "radio", omit them and
            write the clocator as follows: <literal><emphasis>clocator: [:]</emphasis></literal> which is equivalent to:
            <literal><emphasis>clocator: [tag: "input", type: "radio"]</emphasis></literal>
        </para>
        
    </section>

    <section>
        <title>Group Attribute</title>
        <para>
            In the Tellurium UI module, the "group" attribute is seen often. For example:
        </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
ui.Container(uid: "google_start_page", clocator: [tag: "td"], group: "true"){
  InputBox(uid: "searchbox", clocator: [title: "Google Search"])
  SubmitButton(uid: "googlesearch", clocator: [name: "btnG", value: "Google Search"])
  SubmitButton(uid: "Imfeelinglucky", clocator: [value: "I'm Feeling Lucky"])
}
]]>
        </programlisting>

        <para>
            The group attribute is a flag for the Group Locating Concept. Usually, the XPath generated by Selenium IDE,
            XPather, or other tools is a single path to the target node such as:
        </para>

        <programlisting language="sh"><?db-font-size 75% ?>
<![CDATA[
//div/table[@id='something']/div[2]/div[3]/div[1]/div[6]
]]>
        </programlisting>

        <para>
            Sibling node information is not used in this example as the XPath depends too much on information from nodes
            far away from the target node. In Tellurium, every effort is made to localize the information and reduce
            this dependency by using sibling information or local information.
        </para>

        <para>
            For example, in the above google UI module example, the group locator concept searches for the location of
            the "td" tag with its children as "InputBox", "googlesearch" button, and "Imfeelinglucky" button. In this
            way, the dependencies of the UI elements inside a UI module on external UI elements are reduced, making the
            UI definition more robust.
        </para>
        
    </section>

    <section>
        <title>self attribute</title>
        <para>
            Some times, elements inside a Table usually are inside its parent tag, for instance, we have the following HTML source.
        </para>
        <programlisting language="html"><?db-font-size 75% ?>
<![CDATA[
<div id="table">
   <div>
       <div id="name">
           <div>Data</div>
           <div>
               <img/>
           </div>
       </div>
       <div id="shortname">
           <div>Bezeichnung</div>
           <div>
               <img/>
           </div>
       </div>
       <div id="type">
           <div>Typ</div>
           <div>
               <img/>
           </div>
       </div>
   </div>
   <div id="client-area">
       <div>
           <div>Bildsystem</div>
           <div>Bildsystem</div>
           <div>Bildserver</div>
       </div>
       <div>
           <div>Partner</div>
           <div>Partner</div>
           <div>Bestandssystem</div>
       </div>
       <div>
           <div>MS</div>
           <div>MS</div>
           <div>MS</div>
       </div>
   </div>
</div>
]]>
        </programlisting>

        <para>
            where the "Data" element and many others are inside its parent tag "div". To module this, we added a self
            attribute to the UiObject class and the default is "false".  To describe the above html, we can define the following UI module. 
        </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
ui.StandardTable(uid: "Table", clocator: [id: "table"], bt: "div", brt: "div", bct: "div"){
  TextBox(uid: "{tbody: 1, row: all, column: 1}", clocator: [tag: "div"], self: "true")
  Image(uid: "{tbody: 1, row: all, column: 2}", clocator: [:])
  TextBox(uid: "{tbody: 2, row: all, column: 1}", clocator: [tag: "div"], self: "true")
  TextBox(uid: "{tbody: 2, row: all, column: 2}", clocator: [tag: "div"], self: "true")
  TextBox(uid: "{tbody: 2, row: all, column: 3}", clocator: [tag: "div"], self: "true")
}
]]>
        </programlisting>

        <para>To test the UI module, you can simply call the following api. </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
getHTMLSource("Table");
]]>
        </programlisting>

        <para>
            Be aware that the self can be "true" ONLY for UI elements inside a List, a Table, or a StandardTable Object. 
        </para>
        
    </section>

    <section>
        <title>Respond Attribute</title>
        <para>
            Tellurium provides a "respond" attribute used to define any event requiring the UI object to respond.
            Most web applications include Javascript, and thus the web testing framework must be able to handle Javascript events.
            What is important is firing the appropriate events to trigger the event handlers.
            Selenium has already provided methods to generate events such as:
        </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
fireEvent(locator, "blur")
fireEvent(locator, "focus")
mouseOut(locator)
mouseOver(locator)
]]>
        </programlisting>

        <para>
            Tellurium was born with Javascript events in mind since it was initially designed to test applications
            written using the DOJO JavaScript framework. For example, we have the following radio button:
        </para>

        <programlisting language="html"><?db-font-size 75% ?>
<![CDATA[
<input type='radio' name='mas_address_key' value='5779' onClick='SetAddress_5779()'>
]]>
        </programlisting>

        <para>Alternately one can define the radio button as follows: </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
RadioButton(uid: "billing", clocator: [name: 'mas_address_key', value: '5779'])
]]>
        </programlisting>

        <para>
            The above code does not respond to the Click event as the Tellurium RadioButton only supports the "check"
            and "uncheck" actions. This is enough for the normal case. As a result, no "click" event/action is generated
            during testing.
            To address this problem, Tellurium added the "respond" attribute to Tellurium UI objects. The "respond"
            attribute is used to define any event requiring the UI object to respond. The Radio Button is redefined as:
        </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
ui.Container(uid: "form", clocator: [whatever]){
   RadioButton(uid: "billing", clocator: [name: 'mas_address_key', value: '5779'],
        respond: ["click"])
 }
]]>
        </programlisting>

        <para>Then issue the following command: </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
click "form.billing"
]]>
        </programlisting>

        <para>
            Even if the RadioButton does not have the click method defined by default, it is still able to dynamically
            add the click method at runtime and call it. Be aware, you have to explicitly call the click method and
            Event Handler will not automatically trigger the click event.
            A more general example is:
        </para>

        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
 InputBox(uid: "searchbox", clocator: [title: "Google Search"],
      respond: ["click", "focus", "mouseOver", "mouseOut", "blur"])
]]>
        </programlisting>

        <para>
            Except for the "click" event, all of the "focus", "mouseOver", "mouseOut", and "blur" events are
            automatically fired by Tellurium during testing. Do not worry about the event order for the respond
            attribute as Tellurium automatically re-orders the events and then processes them appropriately. That is to
            say, the Event Handler will automatically trigger these events.
        </para>
        
    </section>

</chapter>