<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">

    <title>What's New in Tellurium 0.7.0</title>
    <section>
        <title>Introduction</title>
        <para>
            We have closed over 200 issues and have included several interesting new features. There have been a lot of
            fundamental changes in Tellurium 0.7.0 as compared to 0.6.0 such as the group locating algorithm, module
            caching, macro command, jquery based APIs and i18n support.
        </para>
        <para>
            The architecture of Tellurium 0.7.0 has been changed and the system diagram is shown as follows,
            <mediaobject>
                <imageobject>
                    <imagedata fileref="./media/telluriumnewarchitecture070.png" scalefit="1" width="100%"></imagedata>
                </imageobject>
            </mediaobject>
        </para>
    </section>
    <section>
        <title>New features</title>
        <para>
        <itemizedlist>
            <listitem>
                <para><emphasis role="bold">Package Name change</emphasis></para>
                <para>
                    Tellurium Core used the package name "org.tellurium", but we do not actually own
                    the domain "tellurium.org". Our Tellurium team came out with a domain name "telluriumsource.org"
                    and have registered this domain name. As a result, we changed the package name from
                    "org.tellurium" to "org.telluriumsource". 
                </para>
                <para>
                    In your code, if you have the following import statement, 
                </para>
                <para>
                    <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
import org.tellurium.dsl.DslContext
]]>
                    </programlisting>
                </para>
                <para>
                    please change it to
                </para>
                <para>
                    <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
import org.telluriumsource.dsl.DslContext
]]>
                    </programlisting>
                </para>
                <para>
                    Accordingly, the Maven dependency should be changed as follows, 
                </para>
                <para>
                    <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
<groupId>org.telluriumsource</groupId>
<artifactId>tellurium-core</artifactId>
<version>0.7.0-SNAPSHOT</version>
]]>
                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Package Structure</emphasis></para>
                <para>The original core package structure was a flat one and it has been changed as follows, 
                </para>
                 <para>
                    <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
`-- org
    `-- telluriumsource
        |-- component
        |   |-- bundle
        |   |-- client
        |   |-- connector
        |   |-- custom
        |   |-- data
        |   |-- dispatch
        |   `-- event
        |-- crosscut
        |   |-- i18n
        |   |-- log
        |   `-- trace
        |-- dsl
        |-- entity
        |-- exception
        |-- framework
        |   |-- bootstrap
        |   `-- config
        |-- server
        |-- test
        |   |-- ddt
        |   |   `-- mapping
        |   |       |-- bind
        |   |       |-- builder
        |   |       |-- io
        |   |       |-- mapping
        |   |       |-- type
        |   |       `-- validator
        |   |-- groovy
        |   |-- java
        |   |-- mock
        |   `-- report
        |-- ui
        |   |-- builder
        |   |-- locator
        |   |-- object
        |   |   `-- routing
        |   `-- widget
        `-- util
            `-- grid
]]>
                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">CSS Selector</emphasis></para>
                <para>One feedback we got from <link
                    xlink:href="http://code.google.com/p/aost/wiki/TelluriumAtRichWebExperience2009">the Rich Web Experience 2009 </link>
                    is that we should use the name "CSS selector" instead of "jQuery selector" because jQuery
                    implements a subset of CSS selectors. As a result, we changed the following two methods
                    in DslContext.
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public void enableJQuerySelector();
public void disableJQuerySelector();
]]>
                        </programlisting>
                </para>
                <para>to </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public void enableCssSelector();
public void disableCssSelector(); 
]]>
                        </programlisting>
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Group Locating (Santa Algorithm)</emphasis></para>
                <para>
                    Up to Tellurium 0.6.0, Tellurium still generates runtime locators such as XPath and CSS
                    selector on the Tellurium Core side, then pass them to Selenium Core, which is basically
                    still to locate one element in the UI module at a time. With the new Engine in Tellurium 0.7.0,
                    the UI module will be located as a whole first, the subsequent calls will reuse the already
                    located UI element in the DOM. 

                    This, called the Santa algorithm, is the missing half of the Tellurium UI module concept.
                    The algorithm can locate the whole UI module at the runtime DOM. After that, you can just pass
                    in UI element's UID to find it in the cached UI module on Tellurium Engine. That is to say,
                    you don't need Tellurium Core to generate the runtime locators any more.

                    Group Locating has some fundamental impacts on Tellurium and this can be explained by an example.
                    For instance, you have the following html on the page that you want to test.
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
<H1>FORM Authentication demo</H1>

<div class="box-inner">
    <a href="js/tellurium-test.js">Tellurium Test Cases</a>
    <input name="submit" type="submit" value="Test">
</div>

<form method="POST" action="j_security_check">
    <table border="0" cellspacing="2" cellpadding="1">
        <tr>
            <td>Username:</td>
            <td><input size="12" value="" name="j_username" maxlength="25" type="text"></td>
        </tr>
        <tr>
            <td>Password:</td>
            <td><input size="12" value="" name="j_password" maxlength="25" type="password"></td>
        </tr>
        <tr>
            <td colspan="2" align="center">
                <input name="submit" type="submit" value="Login">
            </td>
        </tr>
    </table>
</form>
]]>
                        </programlisting>
                </para>
                <para>
                    The correct UI module is shown as follows, 
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
ui.Container(uid: "Form", clocator: [tag: "table"]){
        Container(uid: "Username", clocator: [tag: "tr"]){
            TextBox(uid: "Label", clocator: [tag: "td", text: "Username:", direct: "true"])
            InputBox(uid: "Input", clocator: [tag: "input", type: "text", name: "j_username"])
        }
        Container(uid: "Password", clocator: [tag: "tr"]){
            TextBox(uid: "Label", clocator: [tag: "td", text: "Password:", direct: "true"])
            InputBox(uid: "Input", clocator: [tag: "input", type: "password", name: "j_password"])
        }
        SubmitButton(uid: "Submit", clocator: [tag: "input", type: "submit", value: "Login",
            name: "submit"])
}
]]>
                        </programlisting>
                </para>
                <para>
                    Assume the html was changed recently and you still use the UI module defined some time ago.
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
ui.Container(uid: "ProblematicForm", clocator: [tag: "table"]){
        Container(uid: "Username", clocator: [tag: "tr"]){
            TextBox(uid: "Label", clocator: [tag: "td", text: "Username:", direct: "true"])
            InputBox(uid: "Input", clocator: [tag: "input", type: "text", name: "j"])
        }
        Container(uid: "Password", clocator: [tag: "tr"]){
            TextBox(uid: "Label", clocator: [tag: "td", text: "Password:", direct: "true"])
            InputBox(uid: "Input", clocator: [tag: "input", type: "password", name: "j"])
        }
        SubmitButton(uid: "Submit", clocator: [tag: "input", type: "submit", value: "logon",
            name: "submit"])
}
]]>
                        </programlisting>
                </para>
                <para>
                    Here are the differences.
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
InputBox(uid: "Input", clocator: [tag: "input", type: "text", name: "j_username"])
   InputBox(uid: "Input", clocator: [tag: "input", type: "text", name: "j"])

   InputBox(uid: "Input", clocator: [tag: "input", type: "password", name: "j_password"])
   InputBox(uid: "Input", clocator: [tag: "input", type: "password", name: "j"])

   SubmitButton(uid: "Submit", clocator: [tag: "input", type: "submit", value: "Login",
    name: "submit"])
   SubmitButton(uid: "Submit", clocator: [tag: "input", type: "submit", value: "logon",
    name: "submit"])     
]]>
                        </programlisting>
                </para>
                <para>
                    What will happen without the new group locating algorithm? You tests will be broken
                    because the generated locators will not be correct any more. But if you use the latest
                    Tellurium 0.7.0 snapshot, you will notice that the tests still work if you allow
                    Tellurium to do closest match by calling 
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
useClosestMatch(true);
]]>
                        </programlisting>
                </para>
                <para>
                   The magic is that the new Tellurium Engine will locate the UI module as a whole.
                    It may have trouble to find the individual UI element such as "ProblematicForm.Username.Input",
                    but it has no trouble to find the whole UI module structure in the DOM. Apart from that, Tellurium 0.7.0
                    also provides a handy method for you to validate your UI module. For example, if you call  
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
validate("ProblematicForm");
]]>
                        </programlisting>
                </para>
                <para>
                   You will get the detailed validation results including the closest matches. 
                </para>
                
            </listitem>
            <listitem>
                <para><emphasis role="bold">Macro command</emphasis></para>
                <para>Macro Command is a set of Selenium
                    commands that are bundled together and sent to Selenium Core in one call. This will
                    reduce the round trip latency from Tellurium Core to Engine and thus, improve the
                    speed performance. Another advantage for Macro Command is that Tellurium Engine can
                    reuse the locator because many times the commands in the same bundle act on the same
                    UI element or same sub-tree in the DOM.
                </para>
                <para>
                    To implement Macro Command, we added one more tier to Tellurium Core to automatically
                    handle the Macro Command bundling as shown in the following figure.
                    <mediaobject>
                         <imageobject>
                            <imagedata fileref="./media/telluriumbundle.gif" scalefit="1" width="100%"></imagedata>
                        </imageobject>
                    </mediaobject>
                </para>
                

            </listitem>
            <listitem>
                <para><emphasis role="bold">UI Module Caching</emphasis></para>
                <para>
                    From Tellurium 0.6.0, Tellurium
                    provides the cache capability for CSS selectors so that Tellurium can reuse them without
                    doing re-locating. In 0.7.0, Tellurium moves a step further to cache the whole UI module
                    on the Engine side. Each UI module cache holds a snapshot of the DOM references for the
                    UI elements in the UI module. The exceptions are dynamic web elements defined by Tellurium
                    UI templates. For these dynamic web elements, the Engine will try to get the DOM reference
                    of its parent and then do locating inside this subtree with its parent node as the root,
                    which will improve the locating speed a lot. 
                </para>
                
            </listitem>
            <listitem>
                <para><emphasis role="bold">Tellurium UID Description Language</emphasis></para>
                <para>
                    The Tellurium UID Description Language (UDL) is designed to
                    <orderedlist>
                        <listitem>
                            address the dynamic factors in Tellurium UI templates 
                        </listitem>
                        <listitem>
                            increase the flexibility of Tellurium UI templates. 
                        </listitem>
                    </orderedlist>
                </para>
                <para>
                    UDL is implemented with
                    <link
                    xlink:href="http://www.antlr.org/">the Antlr 3 parser generator.</link>
                    The implementation details can be found
                    <link
                    xlink:href="http://code.google.com/p/aost/wiki/BuildYourOwnJavaParserWithAntlr3/">here.</link>
                    The grammars and technical details are recovered in
                    <link
                    xlink:href="http://code.google.com/p/aost/wiki/TelluriumUIDDescriptionLanguage/">Tellurium UID Description
                        Language. </link>
                </para>
                <para>
                    To migrate your UI templates from 0.6.0 to 0.7.0, please make the following changes:
                    <orderedlist>
                        <listitem>
                           Put "{}" around 0.6.0 UI template uids 
                        </listitem>
                        <listitem>
                            Replace "*" with "all"
                        </listitem>
                         <listitem>
                            Replace "all" in table with "row: all, column: all" 
                        </listitem>
                         <listitem>
                            You can add an ID for each UI template object, where the ID starts with a
                             letter and is followed by digits, letters, and "_". 
                        </listitem>
                         <listitem>
                            The implicit tokens defined in UDL such as "header", "footer", "row", "column", 
                             and "tbody" are all reserved and they cannot be used as IDs. But UDL is
                             case-sensitive, you can still use "Header", "Footer", "Row", "Column", and "TBody" as IDs.
                        </listitem>
                         
                    </orderedlist>
                </para>
                <para>
                    For example the following TableExampleModule UI module in the ui-examples reference project. 
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
class TableExampleModule extends DslContext {

  public void defineUi() {
    ui.StandardTable(uid: "GT", clocator: [id: "xyz"], ht: "tbody"){
      TextBox(uid: "header: all", clocator: [:])
      TextBox(uid: "row: 1, column: 1", clocator: [tag: "div", class: "abc"])
      Container(uid: "row: 1, column: 2"){
        InputBox(uid: "Input", clocator: [tag: "input", class: "123"])
        Container(uid: "Some", clocator: [tag: "div", class: "someclass"]){
          Span(uid: "Span", clocator: [tag: "span", class: "x"])
          UrlLink(uid: "Link", clocator: [:])
        }
      }
    }
  }

  public void work(String input){
    keyType "GT[1][2].Input", input
    click "GT[1][2].Some.Link"
    waitForPageToLoad 30000
  }
}
]]>
                        </programlisting>
                </para>
                <para>
                    Now, this UI module can be re-defined in a more flexible way with UDL as follows. 
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
class TableExampleModule extends DslContext {

  public void defineUi() {
    ui.StandardTable(uid: "GT", clocator: [id: "xyz"], ht: "tbody"){
      TextBox(uid: "{header: first} as One", clocator: [tag: "th", text: "one"], self: true)
      TextBox(uid: "{header: 2} as Two", clocator: [tag: "th", text: "two"], self: true)
      TextBox(uid: "{header: last} as Three", clocator: [tag: "th", text: "three"], self: true)
      TextBox(uid: "{row: 1, column -> One} as A", clocator: [tag: "div", class: "abc"])
      Container(uid: "{row: 1, column -> Two} as B"){
        InputBox(uid: "Input", clocator: [tag: "input", class: "123"])
        Container(uid: "Some", clocator: [tag: "div", class: "someclass"]){
          Span(uid: "Span", clocator: [tag: "span", class: "x"])
          UrlLink(uid: "Link", clocator: [:])
        }
      }
      TextBox(uid: "{row: 1, column -> Three} as Hello", clocator: [tag: "td"], self: true)
    }
  }

  public void work(String input){
    getText "GT.A"
    keyType "GT.B.Input", input
    click "GT.B.Some.Link"
    waitForPageToLoad 30000
  }
}
]]>
                        </programlisting>
                </para>
                <para>
                    Apart from that, you need to add the UDL dependency to you project. 
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
 <dependency>
    <groupId>org.telluriumsource</groupId>
    <artifactId>tellurium-udl</artifactId>
    <version>0.7.0-SNAPSHOT</version>
    <scope>compile</scope>
</dependency>
]]>
                        </programlisting>
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Tellurium New APIs</emphasis></para>
                <para>Tellurium Engine in 0.7.0 re-implemented a set of Selenium APIs
                    by exploiting jQuery, plus many more new APIs. For example, 
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
 TelluriumApi.prototype.getCSS = function(locator, cssName) {
    var element = this.cacheAwareLocate(locator);
    var out = [];
    var $e = teJQuery(element);
    $e.each(function() {
        out.push(teJQuery(this).css(cssName));
    });
    return JSON.stringify(out);
};
]]>
                        </programlisting>
                </para>
                <para>
                    To switch between Tellurium new API and Selenium Core API,
                    you can call the following method. 
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
     public void useTelluriumApi(boolean isUse);
]]>
                        </programlisting>
                </para>
                <para>
                    Or use the following DSL methods from DslContext. 
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public void enableTelluriumApi();
public void disableTelluriumApi()
]]>
                        </programlisting>
                </para>
                <para>
                    Be aware, the New Tellurium APIs are still under development
                    and are not fully tested. Use them at your discretion. 
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Trace</emphasis></para>
                <para>Tellurium 0.7.0 provides built-in support for the
                    command execution time including execution time for each command, total run time,
                    and aggregated times for each command.
                </para>
                <para>
                    We added the following settings to TelluriumConfig.groovy 
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
test{
        execution{
            //whether to trace the execution timing
            trace = false
}  
]]>
                        </programlisting>
                </para>
                <para>
                    You can use the follow methods in DslContext to turn on or off the trace, and get the trace data. 
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public void enableTrace();

public void disableTrace();

public void showTrace();
]]>
                        </programlisting>
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Methods Accessible in Test Cases</emphasis></para>
                <para>
                    There are many Tellurium APIs that used to be available only in DslContext.
                    That is to say, you have to extend DslContext to use them. For example, you
                    often see code in a test case likes this, 
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
GoogleSearchModule gsm = new GoogleSearchModule();
gsm.defineUi();
gsm.usejQuerySelector();
gsm.registerNamespace("te", te_ns);
]]>
                        </programlisting>
                </para>
                <para>
                    Now, many of them, which are not really tied to a specific UI module,
                    are made available in Tellurium test cases. For example, the above code
                    can be changed as follows, 
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
GoogleSearchModule gsm = new GoogleSearchModule();
gsm.defineUi();
useCssSelector();
registerNamespace("te", te_ns);
]]>
                        </programlisting>
                </para>
                <para>
                    New TelluriumGroovyTestCase provides the following list of new APIs for your convenience. 
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public void useCssSelector(boolean isUse);

    public void useCache(boolean isUse);

    public void cleanCache();

    public boolean isUsingCache();

    public void setCacheMaxSize(int size);

    public int getCacheSize();

    public int getCacheMaxSize();

    public Map<String, Long> getCacheUsage();

    public void useCachePolicy(CachePolicy policy);

    public String getCurrentCachePolicy();

    public void useDefaultXPathLibrary();

    public void useJavascriptXPathLibrary();

    public void useAjaxsltXPathLibrary();

    public void registerNamespace(String prefix, String namespace);

    public String getNamespace(String prefix);

    public void pause(int milliseconds);

    public void useMacroCmd(boolean isUse);

    public void setMaxMacroCmd(int max);

    public int getMaxMacroCmd();

    public boolean isUseTelluriumApi();

    public void useTelluriumApi(boolean isUse);

    public void useTrace(boolean isUse);

    public void showTrace();

    public void setEnvironment(String name, Object value);

    public Object getEnvironment(String name);

    public void allowNativeXpath(boolean allow);

    public void addScript(String scriptContent, String scriptTagId);

    public void removeScript(String scriptTagId);

    public void EngineState getEngineState();

    public void useEngineLog(boolean isUse);

    public void useTelluriumEngine(boolean isUse);

    public void dumpEnvironment();
]]>
                        </programlisting>
                </para>
                <para>
                    Tellurium Java test cases provide the same APIs and the only
                    difference is that the APIs in Tellurium Java test cases are static. 
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Environment</emphasis></para>
                <para>We added an Environment class to Tellurium Core so that you can change the runtime environment.</para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Get UIs by Tag Name</emphasis></para>
                <para>As requested by users, Tellurium 0.7.0 added the following two methods.</para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
UiByTagResponse getUiByTag(String tag, Map filters);
void removeMarkedUids(String tag);
]]>                    </programlisting>
                </para>
                <para>The first method passes in the tag name and the attributes as filters and get back the UI elements
                    associated with the tag. The second method cleans up all the temporally assigned IDs by the Tellurium Engine. 
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">DIV object change</emphasis></para>
                <para>The Div object has been changed to be a Container type object. For example, you can define the following UI module.</para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
ui.Div(uid: "div1", clocator: [id: "div1"]) {
      Div(uid: "div2", clocator: [id: "div2"]) {
        List(uid: "list1", clocator: [tag: "ul"], separator: "li"){
          UrlLink(uid: "{all}", clocator: [:])
        }
      }
   }
]]>                    </programlisting>
                </para>

            </listitem>
             <listitem>
                <para><emphasis role="bold">Selector changes</emphasis></para>
                <para>For the Selector UI object, the following DSL methods have been implemented in the Tellurium new Engine: </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
* select(String uid, String target): Equals to selectByLabel.
* selectByLabel(String uid, String target): Select based on the text attribute.
* selectByValue(String uid, String target): Select based on the value attribute.
* selectByIndex(String uid, int target): Select based on index (starting from 1).
* selectById(String uid, String target): Select based on the ID attribute.
* String[] getSelectOptions(String uid): Get all option texts.
* String[] getSelectValues(String uid): Get all option values.
* String[] getSelectedLabels(String uid): Get selected texts.
* String getSelectedLabel(String uid): Get selected text, for multiple selections,
    return the first one.
* String[] getSelectedValues(String uid): Get selected values.
* String getSelectedValue(String uid): Get selected value, for multiple selections,
    return the first one.
* addSelectionByLabel(String uid, String target): Add selection based on text.
* addSelectionByValue(String uid, String target): Add selection based on value.
* removeSelectionByLabel(String uid, String target): Remove selection based on text.
* removeSelectionByValue(String uid, String target): Remove selection based on value.
* removeAllSelections(String uid): Remove all selections.
]]>                    </programlisting>
                </para>

            </listitem>
            <listitem>
                <para><emphasis role="bold">Toggle</emphasis></para>
                <para>Tellurium 0.7.0 provides a toggle method to animate the UI element on the web page.
                    For example, you can the following commands to show the UI element under testing. </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
    toggle "Form.Username.Input"
    pause 500
    toggle "Form.Username.Input"
]]>                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">UI Module Live Show</emphasis></para>
                <para>The show command is used to show the UI module that you defined on the actual web page.</para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
    public show(String uid, int delay);
]]>                    </programlisting>
                </para>
                 <para>
                    where delay is in milliseconds. Be aware that show is available in Tellurium API. Example: 
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
   useCache(true);
   useTelluriumApi(true);
   JettyLogonModule jlm = new JettyLogonModule();
   jlm.show("Form", 5000);
]]>                    </programlisting>
                </para>
                <para>
                    The UI module on the web page is outlined and if a user hives over the UI module, the UIDs of the selected UI element's
                    and its ancestors' are shown as a tooltip. 
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">getHTMLSource</emphasis></para>
                <para>Use getHTMLSource, users can get back the runtime html source for a UI module.
                    Tellurium provided two methods for this purpose. .</para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public Map getHTMLSourceResponse(String uid);
public void getHTMLSource(String uid);
]]>                    </programlisting>
                </para>
                 <para>
                   The first method get back the html source as a uid-to-html map and the second one simply
                     print out the html source on the console. Be aware, getHTMLSource is only available in Tellurium new APIs. 
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">type and keyType</emphasis></para>
                <para>type and keyType now accept different types of objects and convert them to a String automatically by
                    calling the toString() method. For example, you can use the following commands: </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
type "Google.Input", "Tellurium"
type "Google.Input", 12.15
type "Google.Input", true
]]>                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">i18n Support</emphasis></para>
                <para>Tellurium now provides support for
                    internationalization of strings and exception messages. Internationalized strings for each
                    locale is provided through a MessageBundle for a specific locale which is of the
                    format
                    <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
<MessageBundleName>_<language-code>_<country code>.properties.
]]>
                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Excel File Reader in Data Driven Test</emphasis></para>
                <para>Excel file reader has been added to Tellurium Data Driven Test. If you have excel
                    input files, you can specify the reader in the configuration file TelluriumConfig.groovy as follows,  </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
datadriven{
        dataprovider{
            //specify which data reader you like the data provider to use
            //the valid options include "PipeFileReader", "CVSFileReader", and "ExcelFileReader" at this point
            reader = "ExcelFileReader"
        }
    }
]]>                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Standard Table</emphasis></para>
                <para>The Standard Table is used for table with multiple "tbody" sections. The Table layout is as follows.   </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
table
      thead
         tr
           th
           ...
           th
      tbody
         tr
           td
           ...
           td
         ...
      tbody (Could have multiple ones)
         tr
           td
           ...
           td
         ...
      tfoot
         tr
           td
           ...
           td
]]>                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">self attribute</emphasis></para>
                <para>Some times, elements inside a Table usually are inside its parent tag, for instance, we
                    have the following HTML source.
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
<div id="table">
   <div>
       <div id="name">
           <div>Data</div>
           <div>
               <img/>
           </div>
       </div>
       <div id="shortname">
           <div>Bezeichnung</div>
           <div>
               <img/>
           </div>
       </div>
       <div id="type">
           <div>Typ</div>
           <div>
               <img/>
           </div>
       </div>
   </div>
   <div id="client-area">
       <div>
           <div>Bildsystem</div>
           <div>Bildsystem</div>
           <div>Bildserver</div>
       </div>
       <div>
           <div>Partner</div>
           <div>Partner</div>
           <div>Bestandssystem</div>
       </div>
       <div>
           <div>MS</div>
           <div>MS</div>
           <div>MS</div>
       </div>
   </div>
</div>
]]>                    </programlisting>
                </para>
                <para>where the "Data" element and many others are inside its parent tag "div". To module this,
                    we added a self attribute to the UiObject class and the default is "false".To describe the
                    above html, we can define the following UI module. 
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
ui.StandardTable(uid: "Table", clocator: [id: "table"], bt: "div", brt: "div", bct: "div"){
      TextBox(uid: "{tbody: 1, row: all, column: 1}", clocator: [tag: "div"], self: "true")
      Image(uid: "{tbody: 1, row: all, column: 2}", clocator: [:])
      TextBox(uid: "{tbody: 2, row: all, column: 1}", clocator: [tag: "div"], self: "true")
      TextBox(uid: "{tbody: 2, row: all, column: 2}", clocator: [tag: "div"], self: "true")
      TextBox(uid: "{tbody: 2, row: all, column: 3}", clocator: [tag: "div"], self: "true")
    }
]]>                    </programlisting>
                </para>
                <para>
                    To test the UI module, you can simply call the following api. 
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
   getHTMLSource("Table");
]]>                    </programlisting>
                </para>
                <para>
                     Be aware that the self can be "true" ONLY  for UI elements inside a List, a Table, or a StandardTable Object. 
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Engine State Offline Update</emphasis></para>
                <para>For some reason, you may need to make Engine state calls before you actually connect to
                    the Engine. For example, call one of the following methods.
                    <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public void enableCache();
public void disableCache();
public void useTelluriumApi(boolean isUse);
public void useClosestMatch(boolean isUse);
]]>
                    </programlisting>
                </para>
                <para>
                    We added an Engine State tracer in the bundle tier to record all the requests if
                    the Engine is not connected and aggregate them. Once the Engine is connected,
                    Tellurium will automatically send out the Engine state update request. For example,
                    the following test code works fine in 0.7.0.
                </para>
                <para>For some reason, you may need to make Engine state calls before you actually connect to
                    the Engine. For example, call one of the following methods.
                    <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
@Test
    public void testOfflineEngineStateUpdate(){
        JettyLogonModule jlm = new  JettyLogonModule();
        jlm.defineUi();
        useCssSelector(true);
        useTrace(true);
        //Engine state offline update
        useTelluriumApi(true);
        useCache(true);
        connectSeleniumServer();
        connectUrl("http://localhost:8080/logon.html");
        jlm.logon("test", "test");
        //Back to state online update
        useClosestMatch(true);
        connectUrl("http://localhost:8080/logon.html");
        jlm.plogon("test", "test");
    }]]>
                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Repeat Object</emphasis></para>
                <para>Very often, we need to use the same UI elements for multiple times on the web page
                    <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
<div class="segment clearfix">
       <div class="option">
           <ul class="fares">
               <li>
                   <input type="radio">&nbsp;
                   <label>Economy</label>
               </li>
               <li>
                   <input type="radio">&nbsp;
                   <label>Flexible</label>
               </li>
           </ul>
           <div class="details">
               <dl>
                   <dt>Ship:</dt>
                   <dd>A</dd>
                   <dt>Departs</dt>
                   <dd>
                       <em>08:00</em>
                   </dd>
                   <dt>Arrives</dt>
                   <dd>
                       <em>11:45</em>
                   </dd>
               </dl>
           </div>
       </div>
       <div class="option">
           <ul class="fares">
               <li>
                   <input type="radio">&nbsp;
                   <label>Economy</label>
               </li>
               <li>
                   <input type="radio">&nbsp;
                   <label>Flexible</label>
               </li>
           </ul>
           <div class="details">
               <dl>
                   <dt>Ship:</dt>
                   <dd>B</dd>
                   <dt>Departs</dt>
                   <dd>
                       <em>17:30</em>
                   </dd>
                   <dt>Arrives</dt>
                   <dd>
                       <em>21:15</em>
                   </dd>
               </dl>
           </div>
       </div>
   </div>
   <div class="segment clearfix">
       <div class="option">
           <ul class="fares">
               <li>
                   <input type="radio">&nbsp;
                   <label>Economy</label>
               </li>
               <li>
                   <input type="radio">&nbsp;
                   <label>Flexible</label>
               </li>
           </ul>
           <div class="details">
               <div class="photo"><img/></div>
               <dl>
                   <dt>Ship:</dt>
                   <dd>C</dd>
                   <dt>Departs</dt>
                   <dd>
                       <em>02:00</em>
                   </dd>
                   <dt>Arrives</dt>
                   <dd>
                       <em>06:00</em>
                   </dd>
               </dl>
           </div>
       </div>
       <div class="option">
           <ul class="fares">
               <li>
                   <input type="radio">&nbsp;
                   <label>Economy</label>
               </li>
               <li>
                   <input type="radio">&nbsp;
                   <label>Flexible</label>
               </li>
           </ul>
           <div class="details">
               <dl>
                   <dt>Ship:</dt>
                   <dd>D</dd>
                   <dt>Departs</dt>
                   <dd>
                       <em>12:45</em>
                   </dd>
                   <dt>Arrives</dt>
                   <dd>
                       <em>16:30</em>
                   </dd>
               </dl>
           </div>
       </div>
   </div>
</form>
]]>
                    </programlisting>
                </para>
                <para>
                    You can see the elements <literal><![CDATA[<div class="segment clearfix">]]></literal>
                    and <literal><![CDATA[<div class="option">]]></literal>  repeated for couple times.
                    We can use the Repeat object for this UI module.
                    The Repeat object inherits the Container object and You can use it just like a Container.
                    The difference is that you should use index to refer to a Repeat object. For the above html
                    source, we can create the following UI module
                </para>
                <para>
                    <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
ui.Form(uid: "SailingForm", clocator: [name: "selectedSailingsForm"] ){
      Repeat(uid: "Section", clocator: [tag: "div", class: "segment clearfix"]){
        Repeat(uid: "Option", clocator: [tag: "div", class: "option", direct: "true"]){
          List(uid: "Fares", clocator: [tag: "ul", class: "fares", direct: "true"], separator: "li"){

            Container(uid: "all"){
                RadioButton(uid: "radio", clocator: [:], respond: ["click"])
                TextBox(uid: "label", clocator: [tag: "label"])
            }
          }
          Container(uid: "Details", clocator: [tag: "div", class: "details"]){
            Container(uid: "ShipInfo", clocator: [tag: "dl"]){
              TextBox(uid: "ShipLabel", clocator: [tag: "dt", position: "1"])
              TextBox(uid: "Ship", clocator: [tag: "dd", position: "1"])
              TextBox(uid: "DepartureLabel", clocator: [tag: "dt", position: "2"])
              Container(uid: "Departure", clocator: [tag: "dd", position: "2"]){
                TextBox(uid: "Time", clocator: [tag: "em"])
              }
              TextBox(uid: "ArrivalLabel", clocator: [tag: "dt", position: "3"])
              Container(uid: "Arrival", clocator: [tag: "dd", position: "3"]){
                TextBox(uid: "Time", clocator: [tag: "em"])
              }
            }
          }
        }
      }
    }
    ]]>
                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">All Purpose Object</emphasis></para>
                <para>Tellurium 0.7.0 added an all purpose object for internal usage only.
                    This object includes all methods for non-Container type objects.
                    The object is defined as   </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
class AllPurposeObject extends UiObject {

}
]]>                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Groovy and GMaven</emphasis></para>
                <para>Groovy has been upgraded to the latest version 1.7.0. For GMaven,
                    we use the latest version 1.2 and removed the Maven Antrun plugin.    </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
<dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <version>1.7.0</version>
</dependency>
]]>                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">JUnit</emphasis></para>
                <para>JUnit is upgraded to 4.7 since it provides more features.
                    One such a good feature is the Rule annotation.  To be consistent with TestNG test case,
                    the class TelluriumJavaTestCase is deprecated and you should use TelluriumJUnitTestCase instead. </para>
                
            </listitem>
            <listitem>
                <para><emphasis role="bold">TestNG</emphasis></para>
                <para>TelluriumTestNGTestCase was changed to allow the setup and teardown procedures
                    only work once for all the tests. The magic are the @BeforeTest and @AfterTest
                    annotations. See the following code for more details,     </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
public abstract class TelluriumTestNGTestCase extends BaseTelluriumJavaTestCase {

    @BeforeTest(alwaysRun = true)
    public static void setUpForTest() {
        tellurium = TelluriumSupport.addSupport();
        tellurium.start(customConfig);
        connector = (SeleniumConnector) tellurium.getConnector();
    }

    @AfterTest(alwaysRun = true)
    public static void tearDownForTest() {
        if(tellurium != null)
            tellurium.stop();
    }
}
]]>                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">TelluriumMockJUnitTestCase and TelluriumMockTestNGTestCase</emphasis></para>
                <para>TelluriumMockJUnitTestCase and TelluriumMockTestNGTestCase incorporated the Mock Http Server
                    so that you can load up a html web page and test against it with minimal configuration.     </para>

            </listitem>
            <listitem>
                <para><emphasis role="bold">Tellurium Configuration</emphasis></para>
                <para>The configuration parser has been refactored.
                    The configuration file name is stored in the Environment class as follows.      </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
@Singleton
public class Environment implements Configurable{

  protected String configFileName = "TelluriumConfig.groovy";

  protected String configString = "";

  public static Environment getEnvironment(){
    return Environment.instance;
  }

  public void useConfigString(String json){
    this.configString = json;
  }
  ...
]]>                    </programlisting>
                </para>
                <para>
                    That is to say, you can get the Environment singleton instance and change the
                    file name before Tellurium core is loaded up if you have a good reason to do that.
                    In the meanwhile, we add support to load the configuration from a JSON string,
                    which will be stored in the configString} variable in the Environment. 
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Run DSL Script</emphasis></para>
                <para>Tellurium 0.7.0 provides a rundsl.groovy script for users to
                    run DSL test script. The rundsl.groovy uses Groovy Grape to
                    automatically download all dependencies and then run DSL script.
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">useTelluriumEngine</emphasis></para>
                <para>To make it convenient for users, Tellurium provides a useTelluriumEngine command as follows,       </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
void useTelluriumEngine(boolean isUse){
        useCache(isUse);
        useMacroCmd(isUse);
        useTelluriumApi(isUse);
    }  
]]>                    </programlisting>
                </para>
                <para>
                    As you can see, this command actually consists of three commands.
                    In DslContext, Tellurium also provides two handy DSL style methods.
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
void enableTelluriumEngine();
void disableTelluriumEngine();
]]>                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Selenium RC</emphasis></para>
                <para>Selenium RC is 1.0.1 in Tellurium 0.7.0. Please use the following Maven dependencies.
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
<dependency>
            <groupId>org.seleniumhq.selenium.server</groupId>
            <artifactId>selenium-server</artifactId>
            <version>${selenium-server-version}</version>
            <!--classifier>standalone</classifier-->
            <exclusions>
                <exclusion>
                    <groupId>ant</groupId>
                    <artifactId>ant</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.seleniumhq.selenium.client-drivers</groupId>
            <artifactId>selenium-java-client-driver</artifactId>
            <version>${selenium-version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.codehaus.gmaven.runtime</groupId>
                    <artifactId>gmaven-runtime-default</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.seleniumhq.selenium.core</groupId>
                    <artifactId>selenium-core</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.seleniumhq.selenium.server</groupId>
                    <artifactId>selenium-server</artifactId>
                </exclusion>
            </exclusions>
</dependency>
]]>                    </programlisting>
                </para>
                <para>
                    where the properties are defined as 
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
<properties>
        ...
        <selenium-version>1.0.1</selenium-version>
        <selenium-server-version>1.0.1-te3-SNAPSHOT</selenium-server-version>
</properties>
]]>                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para><emphasis role="bold">Miscellaneous Changes</emphasis></para>
                <para>The default locator in Tellurium Engine is CSS selector by default.
                    That is to say, we set
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
exploitCssSelector = true
]]>                    </programlisting>
                </para>
                <para>
                    in the Environment class and you can use 
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
disableCssSelector()

or

useCssSelector(false)
]]>                    </programlisting>
                </para>
                <para>
                    to switch back to xpath if you like to.
                </para>
                <para>
                    Exposed the following Selenium APIs to DslContext.
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
    * void addScript(String scriptContent, String scriptTagId)
    * void removeScript(String scriptTagId)
    * void captureEntirePageScreenshot(String filename, String kwargs)
    * String captureScreenshotToString()
    * String captureEntirePageScreenshotToString(String kwargs)
    * String retrieveLastRemoteControlLogs() 
]]>                    </programlisting>
                </para>
                <para>
                    The following methods in DslContext have been renamed
                </para>
                <para>
                        <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
    * String jsonify(String uid) is renamed to String toString(String uid)
    * String generateHtml(String uid) is renamed to String toHTML(String uid) )
]]>                    </programlisting>
                </para>

            </listitem>
        </itemizedlist>
        </para>
    </section>
     <section>
        <title>Changes in Engine</title>
        <para>
            Tellurium 0.7.0 include a new Engine embedded in Selenium Core.
            The main functionalities of the Tellurium Engine include
            <itemizedlist>
            <listitem>CSS Selector support based on jQuery</listitem>
            <listitem>New APIs based on jQuery</listitem>
            <listitem>UI  module group locating</listitem>
            <listitem>UI module Caching</listitem>
            </itemizedlist>
        </para>
         <para>
            <itemizedlist>
                <listitem>
                    <para><emphasis role="bold">Code Structure change</emphasis></para>
                    <para>
                        The following are Javascript files in the Engine project:
                    </para>
                    <para>
                        <programlisting language="java"><?db-font-size 75% ?>
    <![CDATA[
    src/main/resources/core/scripts/
    |-- firebuglite
    |   |-- errorIcon.png
    |   |-- firebug-lite.css
    |   |-- firebug-lite.js
    |   |-- firebug.gif
    |   |-- firebug_logo.png
    |   |-- infoIcon.png
    |   |-- progress.gif
    |   |-- spacer.gif
    |   |-- tree_close.gif
    |   |-- tree_open.gif
    |   `-- warningIcon.png
    |-- htmlutils.js
    |-- jquery-1.4.2.js
    |-- jquery-cookies-2.1.0.js
    |-- jquery-simpletip-1.3.1.js
    |-- json2.js
    |-- log4js.js
    |-- selenium-api.js
    |-- selenium-browserbot.js
    |-- selenium-browserdetect.js
    |-- selenium-commandhandlers.js
    |-- selenium-executionloop.js
    |-- selenium-logging.js
    |-- selenium-remoterunner.js
    |-- selenium-testrunner.js
    |-- selenium-version.js
    |-- tellurium-api.js
    |-- tellurium-cache.js
    |-- tellurium-extensions.js
    |-- tellurium-logging.js
    |-- tellurium-selector.js
    |-- tellurium-udl.js
    |-- tellurium-uialg.js
    |-- tellurium-uibasic.js
    |-- tellurium-uiextra.js
    |-- tellurium-uimodule.js
    |-- tellurium-uiobj.js
    |-- tellurium-uisnapshot.js
    |-- tellurium.js
    |-- tooltip
    |   `-- simpletip.css
    |-- user-extensions.js
    |-- utils.js
    `-- xmlextras.jst
    ]]>
                        </programlisting>
                    </para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">Locate Strategies</emphasis></para>
                    <para>
                        Moved the CSS selector locate strategy and the cache aware locate strategy
                        from Core to the Engine. This is done by adding the following lines to
                        the method BrowserBot.prototype._registerAllLocatorFunctions  in
                        the selenium-browserbot.js file:
                    </para>
                    <para>
                        <programlisting language="java"><?db-font-size 75% ?>
    <![CDATA[
    this.locationStrategies['jquery'] = function(locator, inDocument, inWindow) {
            return tellurium.locateElementByCSSSelector(locator, inDocument, inWindow);
    };

    //used internally by Tellurium Engine
    this.locationStrategies['uimcal'] = function(locator, inDocument, inWindow) {
            return tellurium.locateElementWithCacheAware(locator, inDocument, inWindow);
    };
    ]]>
                        </programlisting>
                    </para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">CSS Selector Support</emphasis></para>
                    <para>
                        Actually, the CSS selector support was added in Tellurium 0.6.0
                        and we changed the name "jQuery Selector" to "CSS Selector" as suggested by Dylan.
                    </para>

                </listitem>
                <listitem>
                    <para><emphasis role="bold">New APIs</emphasis></para>
                    <para>
                        Right now, new Tellurium jQuery-based APIs include
                    </para>
                    <para>
                        <programlisting language="java"><?db-font-size 75% ?>
    <![CDATA[
    TelluriumApi.prototype.blur = function(locator);

    TelluriumApi.prototype.click = function(locator);

    TelluriumApi.prototype.clickAt = function(locator, coordString);

    TelluriumApi.prototype.doubleClick = function(locator);

    TelluriumApi.prototype.fireEvent = function(locator, event);

    TelluriumApi.prototype.focus = function(locator);

    TelluriumApi.prototype.typeKey = function(locator, key);

    TelluriumApi.prototype.keyDown = function(locator, key);

    TelluriumApi.prototype.keyPress = function(locator, key);

    TelluriumApi.prototype.keyUp = function(locator, key);

    TelluriumApi.prototype.mouseOver = function(locator);

    TelluriumApi.prototype.mouseDown = function(locator);

    TelluriumApi.prototype.mouseDownRight = function(locator);

    TelluriumApi.prototype.mouseEnter = function(locator);

    TelluriumApi.prototype.mouseLeave = function(locator);

    TelluriumApi.prototype.mouseOut = function(locator);

    TelluriumApi.prototype.submit = function(locator);

    TelluriumApi.prototype.check = function(locator);

    TelluriumApi.prototype.uncheck = function(locator);

    TelluriumApi.prototype.isElementPresent = function(locator);

    TelluriumApi.prototype.getAttribute = function(locator, attributeName);

    TelluriumApi.prototype.waitForPageToLoad = function(timeout);

    TelluriumApi.prototype.type = function(locator, val);

    TelluriumApi.prototype.select = function(locator, optionLocator);

    TelluriumApi.prototype.addSelection = function(locator, optionLocator);

    TelluriumApi.prototype.removeSelection = function(locator, optionLocator);

    TelluriumApi.prototype.removeAllSelections = function(locator);

    TelluriumApi.prototype.open = function(url);

    TelluriumApi.prototype.getText = function(locator);

    TelluriumApi.prototype.isChecked = function(locator);

    TelluriumApi.prototype.isVisible = function(locator);

    TelluriumApi.prototype.isEditable = function(locator) ;

    TelluriumApi.prototype.getXpathCount = function(xpath);

    TelluriumApi.prototype.getAllText = function(locator);

    TelluriumApi.prototype.getCssSelectorCount = function(locator);

    TelluriumApi.prototype.getCSS = function(locator, cssName);

    TelluriumApi.prototype.isDisabled = function(locator);

    TelluriumApi.prototype.getListSize = function(locator, separators);


    TelluriumApi.prototype.getCacheState = function();

    TelluriumApi.prototype.enableCache = function();

    TelluriumApi.prototype.disableCache = function();

    TelluriumApi.prototype.cleanCache = function();

    TelluriumApi.prototype.setCacheMaxSize = function(size);

    TelluriumApi.prototype.getCacheSize = function();

    TelluriumApi.prototype.getCacheMaxSize = function();

    TelluriumApi.prototype.getCacheUsage = function();

    TelluriumApi.prototype.addNamespace = function(prefix, namespace);

    TelluriumApi.prototype.getNamespace = function(prefix);

    TelluriumApi.prototype.useDiscardNewPolicy = function();

    TelluriumApi.prototype.useDiscardOldPolicy = function();

    TelluriumApi.prototype.useDiscardLeastUsedPolicy = function();

    TelluriumApi.prototype.useDiscardInvalidPolicy = function();

    TelluriumApi.prototype.getCachePolicyName = function();

    TelluriumApi.prototype.useUiModule = function(json);

    TelluriumApi.prototype.isUiModuleCached = function(id);

    TelluriumApi.prototype.getEngineState = function();

    TelluriumApi.prototype.useEngineLog = function(isUse);
    ]]>
                        </programlisting>
                    </para>
                    <para>
                        As you can see, most of the new APIs have the same signature as the
                        Selenium ones so that your test code is agnostic to which test
                        driving engine that you use. You can always switch between the
                        Tellurium Engine and Selenium Engine by the following API at Tellurium core.
                    </para>
                    <para>
                        <programlisting language="java"><?db-font-size 75% ?>
    <![CDATA[
    public void useTelluriumApi(boolean isUse);
    ]]>
                        </programlisting>
                    </para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">jQuery</emphasis></para>
                    <para>
                        The jQuery in Engine has been upgraded from 1.3.2 to 1.4.2.
                    </para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">Engine Logging</emphasis></para>
                    <para>
                        Tellurium Engine uses Firebug Lite to add debug information
                        to the console. By default the Firebug Lite is off.
                    </para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold">Add JavaScript Error Stack to Selenium Errors</emphasis></para>
                    <para>
                        We utilized the JavaScript Stack Trace project to refactor Selenium Errors in Selenium
                        Core so that the JavaScript Error Stack will be passed back Tellurium Core.
                    </para>
                </listitem>

            </itemizedlist>
        </para>
    </section>
    <section>
        <title>Changes in Maven Build</title>
        <para>
        Our Maven repository is moved and the Maven Repositories are changed as well. 
        </para>
        <para>
            <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
<repository>
    <id>kungfuters-public-releases-repo</id>
    <name>Kungfuters.org Public Releases Repository</name>
    <url>http://maven.kungfuters.org/content/repositories/releases</url>
</repository>
<snapshotRepository>
    <id>kungfuters-public-snapshots-repo</id>
    <name>Kungfuters.org Public Snapshot Repository</name>
    <url>http://maven.kungfuters.org/content/repositories/snapshots</url>
</snapshotRepository>
]]>
            </programlisting>
        </para>
        <para>
            telluriumsource.org becomes our official domain name and the web site is under construction. 
           <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
<site>
    <id>tellurium-site</id>
    <name>Tellurium Site</name>
    <url>scp://telluriumsource.org/var/www/telluriumsource.org/public/maven</url>
</site>
]]>
            </programlisting>
        </para>
        <para>
            After the domain name change, you need to use the following Tellurium
            dependencies for your project 
        </para>
        <para>
           <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
<dependency>
            <groupId>org.telluriumsource</groupId>
            <artifactId>tellurium-core</artifactId>
            <version>0.7.0-SNAPSHOT</version>
</dependency>
<dependency>
            <groupId>org.seleniumhq.selenium.server</groupId>
            <artifactId>selenium-server</artifactId>
            <version>1.0.1-te3-SNAPSHOT</version>
</dependency>
]]>
            </programlisting>
        </para>
        <para>
            For Maven archetypes, tellurium-junit-archetype becomes the following,
        </para>
         <para>
           <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
<groupId>org.telluriumsource</groupId>
<artifactId>tellurium-junit-archetype</artifactId>
<version>0.7.0-SNAPSHOT</version>
]]>
            </programlisting>
        </para>
        <para>
            Similarly, the tellurium-testng-archetype has been changed to
        </para>
        <para>
           <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
<groupId>org.telluriumsource</groupId>
<artifactId>tellurium-testng-archetype</artifactId>
<version>0.7.0-SNAPSHOT</version>
]]>
            </programlisting>
        </para>
        <para>
            To create a Tellurium project based on Tellurium 0.7.0 SNAPSHOT,
            you should use the Maven archetype 0.7.0-SNAPSHOT. To create a JUnit project,
            use the following Maven command:
        </para>
        <para>
           <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
mvn archetype:create -DgroupId=your_group_id -DartifactId=your_artifact_id
-DarchetypeArtifactId=tellurium-junit-archetype -DarchetypeGroupId=org.telluriumsource
-DarchetypeVersion=0.7.0-SNAPSHOT
-DarchetypeRepository=http://maven.kungfuters.org/content/repositories/snapshots
]]>
            </programlisting>
        </para>
        <para>
            Similarly, to create a TestNG project, use the following command: 
        </para>
        <para>
           <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
mvn archetype:create -DgroupId=your_group_id -DartifactId=your_artifact_id
-DarchetypeArtifactId=tellurium-testng-archetype -DarchetypeGroupId=org.telluriumsource
-DarchetypeVersion=0.7.0-SNAPSHOT
-DarchetypeRepository=http://maven.kungfuters.org/content/repositories/snapshots
]]>
            </programlisting>
        </para>
        <para>
            To create a Tellurium UI widget project, we can use Tellurium Widget archetype as follows. 
        </para>
        <para>
           <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
mvn archetype:create -DgroupId=your_group_id -DartifactId=your_artifact_id
-DarchetypeArtifactId=tellurium-widget-archetype -DarchetypeGroupId=org.telluriumsource
-DarchetypeVersion=0.7.0-SNAPSHOT
-DarchetypeRepository=http://maven.kungfuters.org/content/repositories/snapshots
]]>
            </programlisting>
        </para>
    </section>
    <section>
        <title>Reference Project</title>
        <para>
        The old two reference projects, i.e., tellurium-junit-java and tellurium-testng-java
            reference projects have been updated and merged into one reference project,
            tellurium-website. The code structure is shown as follows,
        </para>
        <para>
           <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
|-- HowTO
|-- LICENSE.txt
|-- README
|-- TelluriumConfig.groovy
|-- pom.xml
|-- rundsl.bat
|-- rundsl.sh
|-- src
|   |-- main
|   |   |-- groovy
|   |   |   `-- org
|   |   |       `-- telluriumsource
|   |   |           `-- ui
|   |   |               |-- builder
|   |   |               |   `-- SelectMenuBuilder.groovy
|   |   |               `-- object
|   |   |                   `-- SelectMenu.groovy
|   |   `-- resources
|   `-- test
|       |-- groovy
|       |   `-- org
|       |       `-- telluriumsource
|       |           |-- ddt
|       |           |   |-- TelluriumIssuesDataDrivenTest.groovy
|       |           |   `-- TelluriumIssuesModule.groovy
|       |           |-- module
|       |           |   |-- TelluriumDownloadsPage.groovy
|       |           |   |-- TelluriumIssuesPage.groovy
|       |           |   |-- TelluriumProjectPage.groovy
|       |           |   `-- TelluriumWikiPage.groovy
|       |           `-- test
|       |               |-- TelluriumDownloadsPageJUnitTestCase.java
|       |               |-- TelluriumDownloadsPageTestNGTestCase.java
|       |               |-- TelluriumIssuesPageJUnitTestCase.java
|       |               |-- TelluriumIssuesPageTestNGTestCase.java
|       |               |-- TelluriumProjectPageJUnitTestCase.java
|       |               |-- TelluriumProjectPageTestNGTestCase.java
|       |               |-- TelluriumWikiPageJUnitTestCase.java
|       |               `-- TelluriumWikiPageTestNGTestCase.java
|       `-- resources
|           `-- org
|               `-- telluriumsource
|                   |-- data
|                   |   `-- TelluriumIssuesInput.txt
|                   |-- dsl
|                   |   `-- TelluriumPage.dsl
|                   `-- test-suites
|                       `-- reportng.xml
]]>
            </programlisting>
        </para>
    </section>
    <section>
        <title>Examples</title>
        <para>
        In Tellurium Core, we include test cases for Google search UI. 
        </para>
    </section>
    <section>
        <title>How to Obtain Tellurium 0.7.0</title>
        <para>
            Tellurium 0.7.0 bundle can be downloaded from
            <itemizedlist>
                <listitem>
                    <quote><link xlink:href="http://code.google.com/p/aost/downloads/list">Tellurium download site</link></quote>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            Tellurium 0.7.0-SNAPSHOT can be obtained from 
            <itemizedlist>
                <listitem>
                    <quote><link xlink:href="http://maven.kungfuters.org/content/repositories/snapshots/org/telluriumsource/tellurium-core/0.7.0-SNAPSHOT/">Tellurium Core SNAPSHOT</link></quote>
                </listitem>
                <listitem>
                    <quote><link xlink:href="http://maven.kungfuters.org/content/repositories/snapshots/org/seleniumhq/selenium/server/selenium-server/1.0.1-te3-SNAPSHOT/">Custom Selenium Server with Tellurium Engine</link></quote>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            If you use Maven, you need the following dependencies
        </para>
        <para>
           <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
<dependency>
    <groupId>org.telluriumsource</groupId>
    <artifactId>tellurium-core</artifactId>
    <version>0.7.0-SNAPSHOT</version>
    <scope>compile</scope>
</dependency>
<dependency>
    <groupId>org.seleniumhq.selenium.server</groupId>
    <artifactId>selenium-server</artifactId>
    <version>1.0.1-te3-SNAPSHOT</version>
</dependency>        
]]>
            </programlisting>
        </para>
        <para>
            Here is a sample POM file
        </para>
        <para>
           <programlisting language="java"><?db-font-size 75% ?>
<![CDATA[
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.telluriumsource</groupId>
    <artifactId>tellurium-website</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>Tellurium Reference Project - Tellurium Website</name>

    <repositories>
        <repository>
            <id>caja</id>
            <url>http://google-caja.googlecode.com/svn/maven</url>
        </repository>
        <repository>
            <id>kungfuters-public-snapshots-repo</id>
            <name>Kungfuters.org Public Snapshot Repository</name>
            <releases>
                <enabled>false</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
            <url>http://maven.kungfuters.org/content/repositories/snapshots</url>
        </repository>
        <repository>
            <id>kungfuters-public-releases-repo</id>
            <name>Kungfuters.org Public Releases Repository</name>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <url>http://maven.kungfuters.org/content/repositories/releases</url>
        </repository>
        <repository>
            <id>kungfuters-thirdparty-releases-repo</id>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <url>http://maven.kungfuters.org/content/repositories/thirdparty</url>
        </repository>
        <repository>
            <id>openqa-release-repo</id>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
            <url>http://archiva.openqa.org/repository/releases</url>
        </repository>
    </repositories>


    <dependencies>
        <dependency>
            <groupId>org.codehaus.gmaven</groupId>
            <artifactId>gmaven-mojo</artifactId>
            <version>${gmaven-version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.codehaus.gmaven.runtime</groupId>
                    <artifactId>gmaven-runtime-1.5</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.codehaus.gmaven.runtime</groupId>
            <artifactId>gmaven-runtime-1.6</artifactId>
            <version>${gmaven-version}</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.7</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.telluriumsource</groupId>
            <artifactId>tellurium-core</artifactId>
            <version>${tellurium-version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.seleniumhq.selenium.server</groupId>
            <artifactId>selenium-server</artifactId>
            <version>${selenium-version}-te3-SNAPSHOT</version>
            <!--classifier>standalone</classifier-->
        </dependency>
        <dependency>
            <groupId>org.seleniumhq.selenium.client-drivers</groupId>
            <artifactId>selenium-java-client-driver</artifactId>
            <version>${selenium-version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.codehaus.groovy.maven.runtime</groupId>
                    <artifactId>gmaven-runtime-default</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.seleniumhq.selenium.core</groupId>
                    <artifactId>selenium-core</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.seleniumhq.selenium.server</groupId>
                    <artifactId>selenium-server</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-all</artifactId>
            <version>${groovy-version}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>caja</groupId>
            <artifactId>json_simple</artifactId>
            <version>r1</version>
        </dependency>
        <dependency>
            <groupId>org.stringtree</groupId>
            <artifactId>stringtree-json</artifactId>
            <version>2.0.10</version>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>3.0.1-FINAL</version>
        </dependency>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>5.8</version>
            <classifier>jdk15</classifier>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.uncommons</groupId>
            <artifactId>reportng</artifactId>
            <version>0.9.8</version>
        </dependency>
        <dependency>
            <groupId>velocity</groupId>
            <artifactId>velocity-dep</artifactId>
            <version>1.4</version>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>src/main/groovy</directory>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/groovy</directory>
            </testResource>
            <testResource>
                <directory>src/test/resources</directory>
            </testResource>
        </testResources>

        <pluginManagement>
            <plugins>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>2.0.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.4.3</version>
                </plugin>
                <plugin>
                    <artifactId>maven-surefire-report-plugin</artifactId>
                    <version>2.4.3</version>
                </plugin>
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>2.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>2.0.4</version>
                </plugin>
                <plugin>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>2.4</version>
                </plugin>
                <plugin>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>2.0-beta-7</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.gmaven</groupId>
                    <artifactId>gmaven-plugin</artifactId>
                    <version>${gmaven-version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jxr-plugin</artifactId>
                    <version>2.1</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java-version}</source>
                    <target>${java-version}</target>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <includes>
                        <include>**/*_UT.java</include>
                        <include>**/*TestCase.java</include>
                    </includes>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-source-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>jar</goal>
                            <goal>test-jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-javadoc-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>gmaven-plugin</artifactId>
                <configuration>
                    <providerSelection>1.7</providerSelection>
                    <targetBytecode>${java-version}</targetBytecode>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <!-- The generateStubs goals are not yet working for enums and generics -->
                            <goal>generateStubs</goal>
                            <goal>compile</goal>
                            <goal>generateTestStubs</goal>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <reporting>
        <plugins>
            <plugin>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>report-only</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
            </plugin>
        </plugins>
    </reporting>
    <properties>
        <java-version>1.6</java-version>
        <groovy-version>1.7.0</groovy-version>
        <gmaven-version>1.2</gmaven-version>
        <selenium-version>1.0.1</selenium-version>
        <tellurium-version>0.7.0-SNAPSHOT</tellurium-version>
        <javac-debug>true</javac-debug>
    </properties>

</project>
]]>
            </programlisting>
        </para>
    </section>
    <section>
        <title>What's Next ?</title>
        <para>
            <itemizedlist>
                <listitem>
                    Tellurium Widget revisit
                </listitem>
                <listitem>
                    Trump IDE upgrade to match 0.7.0 
                </listitem>
            </itemizedlist>
        </para>
   </section>
    <section>
        <title>Want to Contribute ?</title>
        <para>
            We welcome contributions for Tellurium from various aspects.
            More details on <link xlink:href="http://code.google.com/p/aost/wiki/HowToContribute">How to Contribute</link>
        </para>
   </section>
</chapter>
