<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:ns5="http://www.w3.org/2000/svg"
         xmlns:ns4="http://www.w3.org/1998/Math/MathML"
         xmlns:ns3="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">

    <title>Tellurium Widgets</title>
    <section>
        <title>Introduction</title>
        <para>
            Tellurium team is refactoring the trunk code base into multiple sub-projects. One purpose is to
            separate tellurium core framework from its extensions. Tellurium widget is a good example of
            tellurium extensions. Tellurium provides you the capability to composite UI objects into a widget
            object and then you can use the widget directly just like using a tellurium UI object. The advantage
            is that you do not need to deal with the UI at the link or button level for the widget, you just
            work on the high level methods. Another advantage is that this widget is reusable. 
        </para>
    </section>
    <section>
        <title>Widget Implementation</title>
        <para>
            Usually, Java script frameworks provide a lot of widgets. Take the Dojo framework as an example.
            We use the widget DatePicker? to prototype the tellurium widget. The steps to define and use the
            widget are listed as follows, 
        </para>
        <para>
        <itemizedlist>
            <listitem>
                <para>
                    <emphasis role="bold">Extend the widget object and define the DojoWidget? object
                        with its name space as "DOJO"</emphasis>
                </para>
                <para>
                    For widgets, it is important to include name space to avoid name collision between different
                    widget modules. For example, what is Dojo and ExtJs? both have the widget Date Picker? After
                    add the name space, the widget will be like "DOJO_DatePicker". 
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">Define widget by combining tellurium UI Objects</emphasis>
                </para>
                <para>
                    For example, the DataPicker? widget is defined as follows,
                </para>
                <para>
                    <programlisting language="java"><?db-font-size 75% ?>
  class DatePicker extends DojoWidget{

    public void defineWidget() {
        ui.Container(uid: "DatePicker", locator: "/div[@class='datePickerContainer' and
                        child::table[@class='calendarContainer']]"){
            Container(uid: "Title", locator: "/table[@class='calendarContainer']
                        /thead/tr/td[@class='monthWrapper']/table[@class='monthContainer']
                        /tbody/tr/td[@class='monthLabelContainer']"){
                Icon(uid: "increaseWeek", locator: "/span[@dojoattachpoint='increaseWeekNode']")
                Icon(uid: "increaseMonth", locator: "/span[@dojoattachpoint='increaseMonthNode']")
                Icon(uid: "decreaseWeek", locator: "/span[@dojoattachpoint='decreaseWeekNode']")
                Icon(uid: "decreaseMonth", locator: "/span[@dojoattachpoint='decreaseMonthNode']")
                TextBox(uid: "monthLabel", locator: "/span[@dojoattachpoint='monthLabelNode']")
            }
            StandardTable(uid: "calendar", locator: "/table[@class='calendarContainer']/tbody
                        /tr/td/table[@class='calendarBodyContainer']"){
                TextBox(uid: "header: all", locator: "")
                ClickableUi(uid: "all", locator: "")
            }
            Container(uid: "year", locator: "/table[@class='calendarContainer']/tfoot/tr
                        /td/table[@class='yearContainer']/tbody/tr/td/h3[@class='yearLabel']"){
                Span(uid: "prevYear", locator: "/span[@class='previousYear' and
                        @dojoattachpoint='previousYearLabelNode']")
                TextBox(uid: "currentYear", locator: "/span[@class='selectedYear' and
                        @dojoattachpoint='currentYearLabelNode']")
                Span(uid: "nextYear", locator: "/span[@class='nextYear' and
                        @dojoattachpoint='nextYearLabelNode']")
            }
        }
    }
}
                    </programlisting>
                </para>
                <para>Since widget is a fixed block of UIs, it is fine to use the XPath directly instead of the composite locator. </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">Define widget builder</emphasis>
                </para>
                <para>
                    For example, we defined the following methods: 
                </para>
                <para>
                    <programlisting language="java"><?db-font-size 75% ?>
public String getCurrentYear(){
    return getText("DatePicker.year.currentYear")
}

public void selectPrevYear(){
    click "DatePicker.year.prevYear"
}
                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">Define widget builder</emphasis>
                </para>
                <para>
                    The widget is treated as a tellurium UI object and the builder is the same as regular tellurium objects                 </para>
                <para>
                    <programlisting language="java"><?db-font-size 75% ?>
class DatePickerBuilder extends UiObjectBuilder{

    public build(Map map, Closure c) {
       //add default parameters so that the builder can use them if not specified
        def df = [:]
        DatePicker datepicker = this.internBuild(new DatePicker(), map, df)
        datepicker.defineWidget()

        return datepicker
    }
}
                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">Hook the widget into the Tellurium Core framework</emphasis>
                </para>
                <para>
                    Each widget module will be compiled as a separate jar file and it should define a bootstrap
                    class to register all the widgets inside the module. By default, the full class name of the
                    bootstrap class is org.tellurium.widget.XXXX.Init, where the class Init should implement the
                    WidgetBootstrap? interface to register widgets and XXXX stands for the widget module name.
                    It is DOJO in our case
                </para>
                <para>
                    <programlisting language="java"><?db-font-size 75% ?>
class Init implements WidgetBootstrap{
    public void loadWidget(UiObjectBuilderRegistry uiObjectBuilderRegistry) {
        if(uiObjectBuilderRegistry != null){
           uiObjectBuilderRegistry.registerBuilder(getFullName("DatePicker"),
                        new DatePickerBuilder())
        }
    }
}
                    </programlisting>
                </para>
                <para>
                    Then in the tellurium configuration file TelluriumConfig?.groovy, you should include your module name there, 
                </para>
                <para>
                    <programlisting language="java"><?db-font-size 75% ?>
widget{
    module{
        //define your widget modules here, for example Dojo or ExtJs
        included="dojo"
    }
}
                    </programlisting>
                </para>
                <para>
                    If you use your own package name for the bootstrap class, for example, com.mycompay.widget.Boot, then you should specify the full name there like 
                </para>
                <para>
                    <programlisting language="java"><?db-font-size 75% ?>
widget{
    module{
        //define your widget modules here, for example Dojo or ExtJs
        included="com.mycompay.widget.Boot"
    }
}
                    </programlisting>
                </para>
                <para>
                    Note, you can load multiple widget modules into the Tellurium Core framework by defining 
                </para>
                <para>
                    <programlisting language="java"><?db-font-size 75% ?>
included="dojo, com.mycompay.widget.Boot"
                    </programlisting>
                </para>
            </listitem>
            <listitem>
                <para>
                    <emphasis role="bold">Use widgets</emphasis>
                </para>
                <para>
                    The Widget is defined as a regular tellurium UI object. For example,
                </para>
                <para>
                    <programlisting language="java"><?db-font-size 75% ?>
class DatePickerDemo extends DslContext{

    public void defineUi() {
        ui.Form(uid: "dropdown", clocator: [:], group: "true"){
            TextBox(uid: "label", clocator: [tag: "h4", text: "Dropdown:"])
            InputBox(uid: "input", clocator: [dojoattachpoint: "valueInputNode"])
            Image(uid: "selectDate", clocator: [title: "select a date", 
                        dojoattachpoint: "containerDropdownNode", alt: "date"])
            DOJO_DatePicker(uid: "datePicker", clocator: [tag: "div",
                        dojoattachpoint: "subWidgetContainerNode"])
        }
    }
}
                    </programlisting>
                </para>
                <para>
                    Then on the module file DatePickerDemo?, you can call the widget methods instead of dealing with low level links, buttons, and so on.
                    To make the testing more expressive, Tellurium provides an onWidget method.
                </para>
                <para>
                    <programlisting language="java"><?db-font-size 75% ?>
onWidget(String uid, String method, Object[] args)
                    </programlisting>
                </para>
                <para>
                    In that way, we can call the widget methods as follows: 
                </para>
                <para>
                    <programlisting language="java"><?db-font-size 75% ?>
onWidget "dropdown.datePicker", selectPrevYear
                    </programlisting>
                </para>
                <para>
                    This prototype is on the tellurium trunk/extensions/dojo-widget project. Please see the project for details and try out by yourself. Your feedback is always welcome.
                </para>
            </listitem>
        </itemizedlist>

        </para>
        
    </section>
    <section>
        <title>Tellurium Widget Archetype</title>
        <para>
            To create a Tellurium UI widget project, we can use Tellurium Widget archetype as follows,
        </para>
        <para>
            <programlisting language="java"><?db-font-size 75% ?>
mvn archetype:create -DgroupId=your_group_id -DartifactId=your_artifact_id
-DarchetypeArtifactId=tellurium-widget-archetype
-DarchetypeGroupId=org.telluriumsource -DarchetypeVersion=0.7.0-SNAPSHOT
-DarchetypeRepository=http://maven.kungfuters.org/content/repositories/snapshots
            </programlisting>
        </para>
    </section>
    
</chapter>
