#summary Santa: The Tellurium UI Module Group Locating Algorithm.
#labels Phase-Design,Phase-Support
<wiki:toc max_depth="5" />

= Introduction =

UI Module is the heart of Tellurium Automated Testing Framework. Even UI Module was introduced at this prototype phase, but there was really no algorithm to locate the UI module as a whole. Up to Tellurium 0.6.0, we still need Tellurium core to generate runtime locators based on the UI module definition and then send Selenium commands to the Selenium core to locate each individual UI element. This procedure can be illustrated by the following diagram.

The Santa algorithm is the missing half of the Tellurium UI module concept. The algorithm can locate the whole UI module in the runtime DOM and you can just pass in UI element's UID to find it in the cached UI module on Tellurium Engine side. That is to say, you don't need Tellurium Core to generate the runtime locators any more. For compatibility reason, Tellurium Core still generates runtime locators, but they are not really needed if you turn on UI module group locating and caching. The new procedure is shown as follows.

Why is the algorithm named "Santa". This is because I have completed most of the design and coding work during the Christmas season in 2009. It is like a gift for me from Santa Claus.  

= The Santa Algorithm =

== Problem ==

Ui Module Group Locating is to locate all elements defined in a UI module by exploiting the relationship among themselves. The problem is to locate the UI module as a whole, not an individual UI element. 

== Basic Flow ==

The UI module group locating basic flow is illustrated in the following graph.

http://tellurium-users.googlegroups.com/web/EngineGroupLocatingFlow.png?gda=CL1f3U0AAACsdq5EJRKLPm_KNrr_VHB_RXAKJQtsnhpNGAFrVZVazbOp4BK91V4s-7udPy6DfdsU9ZdtcfNy08LkG6vh24c05Tb_vjspK02CR95VRrtmeQ&gsc=Yrh2TwsAAAAVdtSV2dFRYROnJX5TWJ5C

First, the Tellurium Engine API accepts a JSON presentation of the UI module. For example,

{{{
  var json = [{"obj":{"uid":"Form","locator":{"tag":"form"},"uiType":"Form"},"key":"Form"},
   {"obj":{"uid":"Username","locator":{"tag":"tr"},"uiType":"Container"},"key":"Form.Username"},
   {"obj":{"uid":"Label","locator":{"direct":true,"text":"Username:","tag":"td"},"uiType":"TextBox"},"key":"Form.Username.Label"},
   {"obj":{"uid":"Input","locator":{"tag":"input","attributes":{"name":"j_username","type":"text"}},"uiType":"InputBox"},"key":"Form.Username.Input"},
   {"obj":{"uid":"Password","locator":{"tag":"tr"},"uiType":"Container"},"key":"Form.Password"},
   {"obj":{"uid":"Label","locator":{"direct":true,"text":"Password:","tag":"td"},"uiType":"TextBox"},"key":"Form.Password.Label"},
   {"obj":{"uid":"Input","locator":{"tag":"input","attributes":{"name":"j_password","type":"password"}},"uiType":"InputBox"},"key":"Form.Password.Input"},
   {"obj":{"uid":"Submit","locator":{"tag":"input","attributes":{"name":"submit","value":"Login","type":"submit"}},"uiType":"SubmitButton"},"key":"Form.Submit"}];

}}}

The UI tree, i.e., UTree, builder in Tellurium Engine builds a tree based on the input. Then Tellurium Engine calls the Santa algorithm to locate all UI elements in the UI module except the elements that are defined as not cacheable by the two UI object attributes _lazy"_ and _noCacheForChildren_.

Once an element in a UI module is located, its DOM reference is stored into the UI Tree and an index for fast access. After the Santa algorithm is finished, the UI module is stored into a cache.


== Data Structures ==

The UI module is defined as follows.

{{{
function UiModule(){
    //top level UI object
    this.root = null;

    //whether the UI module is valid
    this.valid = false;

    //hold a hash table of the uid to UI objects for fast access
    this.map = new Hashtable();

    //index for uid - dom reference for fast access
    this.indices = new Hashtable();

    //If the UI Module is relaxed, i.e., use closest match
    this.relaxed = false;

    //number of matched snapshots
    this.matches = 0;

    //scaled score (0-100) for percentage of match
    this.score = 0;

    //ID Prefix tree, i.e., Trie, for the look Id operation in group locating
    this.idTrie = new Trie();

    //Snapshot Tree, i.e., STree
    this.stree = null;
}
}}}

From above, you can see the UI module has two indices for fast access. One is UID to UI object mapping and the other is the UID to DOM reference mapping. 

An ID prefix tree, Trie, is built if the UI module includes elements with the ID attribute. The Trie is used by the Santa look ID operation.

The scaled score is used by the relax operation for partial matching and the score stands for how close the UI module matches the runtime DOM. 100 is a perfect match.
 
== Locate ==

Assume we have UI module as shown in the following graph.

http://tellurium-users.googlegroups.com/web/SantaTeUiModule.png?gda=efAxLkUAAACsdq5EJRKLPm_KNrr_VHB_bIUfD7-F6G2KdUD5D4MxCHMSn2U_NL2M92cFu9ULQMZzlqnWZQD3y6jZqCMfSFQ6Gu1iLHeqhw4ZZRj3RjJ_-A&gsc=-csxfQsAAABJvX1AkrZakeAe14rL-ExC

The group locating procedure is a breadth first search algorithm. That is to say, it starts from the root node and then its children, its grandchildren, until all UI module tree has been searched. Santa marks already searched node in the UI module and you can see the color changes during the search procedure.

=== Main Flow===

The main flow of group locating can be self-explained by the following greatly simplified code snippet.

{{{
UiAlg.prototype.santa = function(uimodule, rootdom){
    //start from the root element in the UI module
    if(!uimodule.root.lazy){
        //object Queue
        this.oqueue.push(uimodule.root);

        var ust = new UiSnapshot();
        //Snapshot Queue
        this.squeue.push(ust);
    }
    while(this.oqueue.size() > 0){
        var uiobj = this.oqueue.pop();
        uiobj.locate(this);
   }

   //bind snapshot to the UI Module
   this.bindToUiModule(uimodule, snapshot);

   //unmark marked UID during the locating procedure
   this.unmark();     
}}}

Where the locate procedure is defined as follows.

{{{
UiAlg.prototype.locate = function(uiobj, snapshot){
    //get full UID
    var uid = uiobj.fullUid();
    var clocator = uiobj.locator;

    //get parent's DOM reference
    var pref = snapshot.getUi(puid);
    
    //Build CSS selector from UI object's attributes
    var csel = this.buildSelector(clocator);
    //Starting from its parent, search for the UI element
    var $found = teJQuery(pref).find(csel);

    //if multiple matches, need to narrow down
    if($found.size() > 1){
        if(uiobj.noCacheForChildren){
            //dynamic elements, use bestEffort operation
            $found = this.bestEffort(uiobj, $found);
 
        }else{
            //first try lookId operation
            $found = this.lookId(uiobj, $found);
            if($found.size() > 1){
                //then try lookAhead operation
                $found = this.lookAhead(uiobj, $found);
            }
        }
    }

   ...
   if($found.size() == 0){
        if(this.allowRelax){
            //use the relax operation
            var result = this.relax(clocator, pref);
        }  
   }
};

}}}

=== Branch and Trim ===

Santa is basically a branch and trim search procedure on the runtime DOM. Assume at some point, the Santa algorithm located UI elements A, B, and C. A snapshot has been generated as shown in the following graph.

http://tellurium-users.googlegroups.com/web/SantaLocate1.png?gda=YaAO4EIAAACsdq5EJRKLPm_KNrr_VHB_bIUfD7-F6G2KdUD5D4MxCDC-P9WsSQjHe215MPg7qVZV4u3aa4iAIyYQIqbG9naPgh6o8ccLBvP6Chud5KMzIQ&gsc=-csxfQsAAABJvX1AkrZakeAe14rL-ExC

When Santa locates UI element D, it finds two matches. Santa branches the snapshot tree and create two separate ones.

http://tellurium-users.googlegroups.com/web/SantaLocate2.png?gda=mouCvUIAAACsdq5EJRKLPm_KNrr_VHB_bIUfD7-F6G2KdUD5D4MxCBn8D5nQVokhIuqb621TkD1V4u3aa4iAIyYQIqbG9naPgh6o8ccLBvP6Chud5KMzIQ&gsc=-csxfQsAAABJvX1AkrZakeAe14rL-ExC

When Santa locates the next UI element E, it removes one of the snapshot tree and only one snapshot tree is left.

http://tellurium-users.googlegroups.com/web/SantaLocate3.png?gda=JTuot0IAAACsdq5EJRKLPm_KNrr_VHB_bIUfD7-F6G2KdUD5D4MxCGmSNtHn62Je2_5tj0zzNNhV4u3aa4iAIyYQIqbG9naPgh6o8ccLBvP6Chud5KMzIQ&gsc=-csxfQsAAABJvX1AkrZakeAe14rL-ExC

=== Multiple-Match Elimination Mechanisms ===

As you can see from the above procedure, it would be time-consuming if Santa branches too often and creates too many snapshot trees since Santa needs to exploit every possible snapshots. As a result, Santa includes the following multiple-match elimination mechanisms to reduce the number of snapshot trees it need to search on.

==== Mark ====

When Santa locates a node in the DOM, it marks it with its UID.

{{{
        $found.eq(0).data("uid", uid);
}}}

In this way, Santa will skip this DOM node when it tries to locate other UI elements in the UI module. 

When Santa finishes the group locating procedure, it unmakr all the uids from the DOM nodes.
 
==== Look Ahead ====

Look Ahead means to look at not only the current UI element but also its children when Santa locates it. For example, when Santa locates the node D, it also looks at this children G and H. Hopefully, this will eliminate multiple matches and only one match returns.

http://tellurium-users.googlegroups.com/web/SantaLocateLookChildren.png?gda=giCJ100AAACsdq5EJRKLPm_KNrr_VHB_DQbB4dkECwACM3mZO-ksNZbYqNF9gYK0tqjCPQpPzwk78QNvYVH-EzLyPyoQaO3f5Tb_vjspK02CR95VRrtmeQ&gsc=L_MyaAsAAAAFA-mmrSq3wKWi9zbFEGr6

==== Look ID ====

The ID attribute uniquely defined a UI element on a web page and locating DOM element by ID is very fast, thus, Tellurium Engine builds an ID prefix tree, i.e., Trie, when it parses the JSON presentation of the UI module. For example, assume the UI module has four elements, A, D, F, and G, with the ID attribute. The Trie is as follows.

http://tellurium-users.googlegroups.com/web/SantaLookIDTrie.png?gda=H9_7kUUAAACsdq5EJRKLPm_KNrr_VHB_Nen3NTP9dP3oTwzmB8VfKSSWhnpA9T1yOhjOCab04vJzlqnWZQD3y6jZqCMfSFQ6Gu1iLHeqhw4ZZRj3RjJ_-A&gsc=_MkLKwsAAACPGU9cKreSbkxa0SOycyXv

When Santa locates the UI element A, it can use the IDs for element A and D to help itself to reduce multiple matches. If Santa locates element D, only the ID of element G is helpful.

==== Best Effort ====

Best effort is similar to Look Ahead mechanism, but it is for dynamic UI elements. For dynamic elements, Tellurium defines the following two attributes to determine whether it and its children are cachable.

{{{
var UiObject = Class.extend({
    init: function(){
        ...
        //should we do lazy locating or not, i.e., wait to the time we actually use this UI object
        //usually this flag is set because the content is dynamic at runtime
        this.lazy = false;
    }
});

var UiContainer = UiObject.extend({
    init: function(){
        ...
        this.noCacheForChildren = false;
    },

}}}

For a dynamic UI element, which is defined by UI templates, it may have zero, one, or multiple matches at runtime. Santa defines a bonus point system for dynamic UI elements. If the DOM matches more attributes in the UI templates, the candidate UI element usually gets higher bonus point. Santa choose the candidate with the highest bonus point to the snapshot tree.

== Relax ==

The relax procedure is to match the UI attribute with the DOM node as close as possible. A *Match Score* is defined to measure how many attributes match the one on the DOM node. The total score is scaled to 0-100 at the end. The snapshot with the highest match score is chosen as the result.

Be aware, there is one requirement the match must satisfy, i.e., the tag name must match the DOM node. Otherwise, the relax returns the match as not found.

= Usage =

= Resources =