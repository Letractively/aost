#summary What are New in Tellurium 0.7.0.
#labels Phase-Support
<wiki:toc max_depth="5" />

= Introduction =

There are couple major changes in Tellurium Core and Engine after we merged in the 0.7.0 prototype branch. To make your life easier, We list all the changes here so that you can update your existing Tellurium testing project accordingly.

The architecture of Tellurium 0.7.0 has been changed and the system diagram is shown as follows,

http://tellurium-developers.googlegroups.com/web/telluriumengine.gif?gda=PI9dhkUAAABfqXGjliAPh6eFpGfZMLEM3czrmB-8Q8hosgAcjunb3RjQ1TnBn_Bw7f_85usIiO0cn8WIbWh5zqeDKtDBmq67Gu1iLHeqhw4ZZRj3RjJ_-A

The main changes include
  * The bundle tier to support Macro Command
  * New Tellurium API in Engine
  * UI Module based Caching
  * Runtime Environment

The details are covered in the subsequent sections.

= Changes in Tellurium Core =

== Package Name ==

Tellurium Core used the package name "org.tellurium", but we do not actually own the domain "tellurium.org". Our Tellurium team came out with a domain name "telluriumsource.org" and have registered this domain name. As a result, we changed the package name from "org.tellurium" to "org.telluriumsource". 

In your code, if you have the following import statement,

{{{
import org.tellurium.dsl.DslContext
}}}

please change it to 

{{{
import org.telluriumsource.dsl.DslContext
}}}

Accordingly, the Maven dependency should be changed as follows,

{{{
    <groupId>org.telluriumsource</groupId>
    <artifactId>tellurium-core</artifactId>
    <version>0.7.0-SNAPSHOT</version>
}}}

== jQuery Selector ==

One feedback we got from [http://code.google.com/p/aost/wiki/TelluriumAtRichWebExperience2009 the Rich Web Experience 2009] is that we should use the name "CSS selector" instead of "jQuery selector" because jQuery implements a subset of CSS selectors. As a result, we changed the following two methods in DslContext 

{{{
public void useJQuerySelector();
public void disableJQuerySelector(); 
}}}

to

{{{
public void useCssSelector();
public void disableCssSelector(); 
}}}

== Macro Command ==

Macro Command is a set of Selenium commands that are bundled together and sent to Selenium Core in one call. This will reduce the round trip latency from Tellurium Core to Engine and thus, improve the speed performance. Another advantage for Macro Command is that Tellurium Engine can reuse the locator because many times the commands in the same bundle act on the same UI element or same sub-tree in the DOM. 

To implement Macro Command, we added one more tier to Tellurium Core to automatically handle the Macro Command bundling as shown in the following figure.

http://tellurium-developers.googlegroups.com/web/telluriumbundle.gif?gda=vAECeEUAAABfqXGjliAPh6eFpGfZMLEMvv4gl2uJvcOyvlRvyqCHL_Uz5QqadYe3qLzL3P0zO1Ecn8WIbWh5zqeDKtDBmq67Gu1iLHeqhw4ZZRj3RjJ_-A

To use Macro Command, we add the following settings to configuration file TelluriumConfig.groovy:

{{{
    //the bundling tier
    bundle{
        maxMacroCmd = 5
        useMacroCommand = false
    }
}}}

and the following methods to DslContext to change the Macro command settings at runtime

{{{
    public void useMacroCmd(); 
    public void disableMacroCmd();
    public useMaxMacroCmd(int max);
    public int getMaxMacroCmd();
}}}

== Caching Mechanism ==

The Caching mechanism in 0.7.0 is UI module based instead of jQuery selector, thus, we changed the following methods

{{{
public void enableJQuerySelectorCache(); 
public boolean disableJQuerySelectorCache();
}}}

to

{{{
public void enableCache(); 
public boolean disableCache();
}}}

Other cache related APIs include

{{{
public boolean cleanCache();
public boolean getCacheState(); 
public void setCacheMaxSize(int size);
public int getCacheSize();
public int getCacheMaxSize();
public Map<String, Long> getCacheUsage();
public void useDiscardNewCachePolicy();
public void useDiscardOldCachePolicy();
public void useDiscardLeastUsedCachePolicy();
public void useDiscardInvalidCachePolicy();
public String getCurrentCachePolicy();     
}}}

Be aware that the caching mechanism is still under development.

== Tellurium New APIs ==

Tellurium provides a set of new APIs based on jQuery. Use the following methods to get the flag and enable or disable the New APIs.

{{{
//Check to see if the flag for using Tellurium New APIs is on
public boolean isUseTelluriumApi();

//Whether to use New Tellurium APIs
public void useTelluriumApi(boolean isUse);
}}}

Be aware, the New Tellurium APIs are still under development and are not fully tested. Use them at your discretion.


== Trace ==

Tellurium 0.7.0 provides built-in support for the command execution time including 
  * Execution time for each command
  * Total run time
  * Aggregated times for each command

For example, you can see the output as follows,

{{{
TE: Name: getCurrentCachePolicy, start: 1260496075484, duration: 28ms
TE: Name: useDiscardNewCachePolicy, start: 1260496075514, duration: 51ms
TE: Name: getCurrentCachePolicy, start: 1260496075566, duration: 74ms
TE: Name: useDiscardOldCachePolicy, start: 1260496075642, duration: 35ms
TE: Name: getCurrentCachePolicy, start: 1260496075678, duration: 42ms
TE: Start Time: 1260496060373
End Time: 1260496075720
Total Runtime: 15347ms
Name: keyPress, count: 24, total: 1277ms, average: 53ms
Name: getCurrentCachePolicy, count: 5, total: 222ms, average: 44ms
Name: useDiscardOldCachePolicy, count: 1, total: 35ms, average: 35ms
Name: useDiscardInvalidCachePolicy, count: 1, total: 33ms, average: 33ms
Name: enableCache, count: 2, total: 151ms, average: 75ms
Name: click, count: 3, total: 194ms, average: 64ms
Name: isElementPresent, count: 2, total: 100ms, average: 50ms
Name: useDiscardLeastUsedCachePolicy, count: 1, total: 39ms, average: 39ms
Name: type, count: 1, total: 81ms, average: 81ms
Name: typeKey, count: 3, total: 124ms, average: 41ms
}}}
 
We added the following settings to TelluriumConfig.groovy

{{{
    test{
        execution{
            //whether to trace the execution timing
            trace = false
        }      

}}}

You can use the follow methods in DslContext to turn on or off the trace, and get the trace data.

{{{

  public void enableTrace();

  public void disableTrace();
  
  public void showTrace();
}}}


== Methods Accessible in Test Cases ==

There are many Tellurium APIs that used to be available only in DslContext. That is to say, you have to extend DslContext to use them. For example, you often see code in a test case likes this,

{{{
GoogleSearchModule gsm = new GoogleSearchModule();
gsm.defineUi();
gsm.usejQuerySelector();
gsm.registerNamespace("te", te_ns);
}}}

Now, many of them, which are not really tied to a specific UI module, are made available in Tellurium test cases. For example, the above code can be changed as follows,

{{{
GoogleSearchModule gsm = new GoogleSearchModule();
gsm.defineUi();
useCssSelector();
registerNamespace("te", te_ns);
}}}

New TelluriumGroovyTestCase provides the following list of new APIs for your convenience.

{{{
    public void useCssSelector(boolean isUse);

    public void useCache(boolean isUse);

    public void cleanCache();

    public boolean isUsingCache();

    public void setCacheMaxSize(int size);

    public int getCacheSize();

    public int getCacheMaxSize();

    public Map<String, Long> getCacheUsage();

    public void useCachePolicy(CachePolicy policy);

    public String getCurrentCachePolicy();

    public void useDefaultXPathLibrary();

    public void useJavascriptXPathLibrary();

    public void useAjaxsltXPathLibrary();

    public void registerNamespace(String prefix, String namespace);

    public String getNamespace(String prefix);

    public void pause(int milliseconds);

    public void useMacroCmd(boolean isUse);

    public void setMaxMacroCmd(int max);

    public int getMaxMacroCmd();

    public boolean isUseTelluriumApi();

    public void useTelluriumApi(boolean isUse);
  
    public void useTrace(boolean isUse);

    public void showTrace();

    public void setEnvironment(String name, Object value);

    public Object getEnvironment(String name);

    public void allowNativeXpath(boolean allow);

}}}

Tellurium Java test cases provide the same APIs and the only difference is that the APIs in Tellurium Java test cases are static.

== Environment ==

We added an Environment class to Tellurium Core so that you can change the runtime environment. The Environment class is defined as follows,

{{{
public class Environment {
  def envVariables = [:];
  public boolean isUseCssSelector();

  public boolean isUseCache();

  public boolean isUseBundle();

  public boolean isUseScreenshot();

  public boolean isUseTrace();

  public boolean isUseTelluriumApi();

  public void useCssSelector(boolean isUse);

  public void useCache(boolean isUse);

  public void useBundle(boolean isUse);

  public void useScreenshot(boolean isUse);

  public void useTrace(boolean isUse);

  public void useTelluriumApi(boolean isUse);

  public useMaxMacroCmd(int max);

  public int myMaxMacroCmd();

  public String myLocale();
  
  public void setCustomEnvironment(String name, Object value);

  public Object getCustomEnvironment(String name);
}
}}}

where {{{setCustomEnvironment}}} and {{{getCustomEnvironment}}} can be used to pass user defined environment variables.

== I18N ==

== JUnit ==

JUnit is upgraded to 4.7 since it provides more features. One such a good feature is [http://blog.schauderhaft.de/2009/10/04/junit-rules/ the Rule annotation].

To be consistent with TestNG test case, the class TelluriumJavaTestCase is deprecated and you should use TelluriumJUnitTestCase instead.
 
== TestNG ==

TelluriumTestNGTestCase was changed to allow the setup and teardown procedures only work once for all the tests. The magic are the @BeforeTest and @AfterTest annotations. See the following code for more details,

{{{
public abstract class TelluriumTestNGTestCase extends BaseTelluriumJavaTestCase {

    @BeforeTest(alwaysRun = true)
    public static void setUpForTest() {
        tellurium = TelluriumSupport.addSupport();
        tellurium.start(customConfig);
        connector = (SeleniumConnector) tellurium.getConnector();
    }

    @AfterTest(alwaysRun = true)
    public static void tearDownForTest() {
        if(tellurium != null)
            tellurium.stop();
    }
}}}

== Tellurium Configuration ==

= Changes in Engine =


= Changes in Maven Build =

= Examples =

= Resources =