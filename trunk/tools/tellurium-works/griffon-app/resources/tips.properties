 tip.1.description=Tip #1: The UI module is a collection of UI elements grouped together. Usually, the UI module represents a composite UI object in the format of nested basic UI elements.
 tip.2.description=Tip #2: Tellurium is implemented in Groovy and Java. The test cases can be written in Java, Groovy, or pure Domain Specific Language (DSL) scripts.
 tip.3.description=Tip #3: In Tellurium, the UI object is referred to by its UiID, i.e., the UI object identifier.
 tip.4.description=Tip #4: The easiest way to create a Tellurium project is to use Tellurium Maven archetypes.
 tip.5.description=Tip #5: Tellurium provides TrUMP to automatically create UI modules.
 tip.6.description=Tip #6: Container is an abstract object that can hold a collection of Ui objects.
 tip.7.description=Tip #7: Tellurium supports two types of UI Object locators. Base Locator & Composite Locator.
 tip.8.description=Tip #8: The Base locator is a relative XPath.
 tip.9.description=Tip #9: The Composite locator, denoted by "clocator", specifies a set of attributes for the UI object.
 tip.10.description=Tip #10: To use the Composite locator, use "clocator" with a map as its value. e.g. clocator: [key1: value1, key2: value2, ...]
 tip.11.description=Tip #11: Tellurium provides a "respond" attribute used to define any event requiring the UI object to respond.
 tip.12.description=Tip #12: Tellurium supports both XPath and CSS selector and still uses CSS selector as the default locator.
 tip.13.description=Tip #13: Tellurium provides a toggle method to animate the UI element on the web page.
 tip.14.description=Tip #14: TelluriumConfig.groovy provides project level test settings.
 tip.15.description=Tip #15: Use setCustomConfig to customize individual test settings.
 tip.16.description=Tip #16: Tellurium Core provides a dump method to print out the UI object's and its descendants' runtime locators that Tellurium Core generates.
 tip.17.description=Tip #17: Tellurium provides a rundsl.groovy script for users to run DSL test script.
 tip.18.description=Tip #18: The rundsl.groovy uses Groovy Grape to automatically download all dependencies and then run DSL script.
 tip.19.description=Tip #19: Tellurium provides built-in support for the command execution time including execution time for each command. Total run time aggregated times for each command.
 tip.20.description=Tip #20: The toString method converts a UI module to a JSON presentation.
 tip.21.description=Tip #21: toHTML method converts the UI module to a HTML source by reverse engineering.
 tip.22.description=Tip #22: The show method outlines the UI module on the web page under testing and shows some visual effects when a user mouses over it.
 tip.23.description=Tip #23: The validate method is used to validate if the UI module is correct and returns the mismatches at runtime.
 tip.24.description=Tip #24: The UI module closest match, i.e., partial match, is extremely important to keep your test code robust to changes to some degree.
 tip.25.description=Tip #25: Tellurium Data Provider is responsible for reading data from input stream and converting data to Java variables.
 tip.26.description=Tip #26: TelluriumDataDrivenTest is the class users should extend to run the actual data driven testing.
 tip.27.description=Tip #27: The defineUi() defines the UI module for the given HTML source.
 tip.28.description=Tip #28: The generateHtml(uid) method is really helpful if you want to help other people to track the problem in their Tellurium test code but you have not access to their web applications and HTML sources.
 tip.29.description=Tip #29: Tellurium provides support for internationalization of strings and exception messages.
 tip.30.description=Tip #30: TestNG reference project supports generating reports using ReportNG out of the box.
 tip.31.description=Tip #31: Tellurium provides you the capability to composite UI objects into a widget object and then you can use the widget directly just like using a tellurium UI object.
 tip.32.description=Tip #32: Tellurium UI Model Plugin (TrUMP) is the Firefox plugin to automatically create UI modules for users.
 tip.33.description=Tip #33: Tellurium supports custom UI objects defined by users. For most UI objects, they must extend the "UiObject" class and then define actions or methods they support.
 tip.34.description=Tip #34: Tellurium Core is implemented in Groovy and Java to achieve expressiveness.
 tip.35.description=Tip #35: Tellurium supports both JUnit and TestNG frameworks.
 tip.36.description=Tip #36: Tellurium supports both Ant and Maven build systems. 






