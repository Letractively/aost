#summary Custom jQuery selectors and Plugins in Tellurium.
#labels Phase-Support
<wiki:toc max_depth="3" />

= Introduction =

Tellurium leverage jQuery to add [http://code.google.com/p/aost/wiki/TelluriumjQuerySelector jQuery selector] as a new locator to improve the test speed in IE and add other new functionalities to Selenium core, for example, fetching bulk data in one method call and [http://code.google.com/p/aost/wiki/TelluriumPowerUtilityDiagnose the diagonse utility].

With the adoption of jQuery, we also need some custom jQuery selectors and plugins to meet our needs.

To design jQuery custom selectors, we need to understand the jQuery selector syntax:

{{{
$.expr[':'].selector_name = function(obj, index, meta, stack){
......
}
}}}

where
  * _obj_: a current DOM element
  * _index_: the current loop index in stack
  * _meta_: meta data about your selector
  * _stack_: stack of all elements to loop

The function returns true to include current element and returns false to exclude current element. A more detailed explains could be found on [http://jquery-howto.blogspot.com/2009/06/jquery-custom-selectors-with-parameters.html jQuery Custom Selectors with Parameters].

To avoid conflict with user's jQuery library, we yield the "$" symbol and rename jQuery to teJQuery. 

= Custom jQuery Selectors =

== :te_text ==

The _:te_text_ selector is created to select a UI element whose text attribute is a given string. The implementation is simple,

{{{
teJQuery.extend(teJQuery.expr[':'], {
    te_text: function(a, i, m) {
        return teJQuery.trim(teJQuery(a).text()) === teJQuery.trim(m[3]);
    }
});
}}}

You may wonder why we use _`m[3]`_ here, the variable _m_ includes the following parameters
  
  * _`m[0]`_: {{{te_text(argument)}}} full selector
  * _`m[1]`_: {{{te_text}}} selector name
  * _`m[2]`_: {{{''}}} quotes used
  * _`m[3]`_: {{{argument}}} parameters 

As a result the selector picks up the element whose text attribute, obtained by {{{text()}}}, is equals to the passed in parameter _`m[3]`_.

== :group ==

The _:group_ selector to implement [http://code.google.com/p/aost/wiki/UserGuide#Group_Locating the group locating] in Tellurium. For example, we want to select a "div" whose children include one "input", one "img", and one "span" tags. How to express this using jQuery? 

One way is to use the following selector,

{{{
teJQuery.expr[':'].group = function(obj){
      var $this = teJQuery(obj);
      return ($this.find("input").length > 0) && ($this.find("img").length > 0) && ($this.find("span").length > 0);
};
}}}

That is to say, only a DOM node satisfying all the three conditions, i.e, whose children include "input", "img", and "span", is selected because the AND conditions. Remember, only the node with the true return value is selected.

However, in real world, we may have many conditions and we cannot use this hard-coded style selector and we need to use the custom selector with parameters instead. Here is our implementations,

{{{
teJQuery.expr[':'].group = function(obj, index, m){
      var $this = teJQuery(obj);

      var splitted = m[3].split(",");
      var result = true;

      for(var i=0; i<splitted.length; i++){
         result = result && ($this.find(splitted[i]).length > 0);
      }

      return result;
};
}}}

If we use firebug to debug the code with the following jQuery selector

{{{
$("div:myselector(input, img, span)")
}}}

We will see the variable _m_ includes the following parameters
  
  * _`m[0]`_: {{{group(input, img, span)}}} full selector
  * _`m[1]`_: {{{group}}} selector name
  * _`m[2]`_: {{{''}}} quotes used
  * _`m[3]`_: {{{input, img, span}}} parameters 

= Custom jQuery Plugins =
 
== outerHTML ==

When we worked on [http://code.google.com/p/aost/wiki/TelluriumPowerUtilityDiagnose the diagnose utility], we were frustrated because we need to get the HTML source of a DOM node, but the {{{html()}}} method in jQuery only returns innerHTML. We posted a question to [http://groups.google.com/group/jquery-en jQuery group] and got the answer,

{{{
$('<div>').append( $(jQuery_Selector).clone() ).html() 
}}} 

and as suggested by someone, we go further to implement this as a simple jQuery plugin,

{{{
teJQuery.fn.outerHTML = function() {
    return teJQuery("<div/>").append( teJQuery(this[0]).clone() ).html();
};
}}}

= Summary =

With the growth of Tellurium and more and more usage of jQuery in Tellurium, the list of custom jQuery selector and plugins in Tellurium will become longer. We will keep updating this wiki page, please revisit us.

If you are a Javascript or jQuery guru and like to contribute to Tellurium, please contact us.

= Acknowledgements =

Special thanks to folks in [http://groups.google.com/group/jquery-en jQuery group] for providing us constructive suggestions and helps on custom jQuery selectors and functions.

= Resources =

  * [http://jquery.com/ jQuery]
  * [http://groups.google.com/group/jquery-en jQuery group]
  * [http://jquery-howto.blogspot.com/2009/06/jquery-custom-selectors-with-parameters.html jQuery Custom Selectors with Parameters]
  * [http://code.google.com/p/aost/wiki/TelluriumjQuerySelector Tellurium jQuery selector]
  * [http://code.google.com/p/aost/wiki/jQuerySelectorCache Tellurium jQuery Cache]
  * [http://code.google.com/p/aost/wiki/TelluriumPowerUtilityDiagnose Tellurium Powerful Utility: Diagnose]
  * [http://code.google.com/p/aost/wiki/TelluriumJQueryFirebug Use Firebug and JQuery to Trace Problems in Tellurium Tests]
  * [http://code.google.com/p/aost/wiki/UserGuide Tellurium User Guide]