#summary Tellurium Calls for Open Source Contributors.
#labels Phase-Implementation,Phase-Support

= What is Tellurium =

[http://code.google.com/p/aost/ The Tellurium Automated Testing Framework] (Tellurium) is an automated testing framework for web applications. Tellurium grew up from [http://seleniumhq.org/ the Selenium framework], but with a different testing concept. Starting from Tellurium 0.7.0, Tellurium added Tellurium Engine to replace the Selenium Core to better support Tellurium. 

== Why Tellurium is Novel ==

For most existing web testing frameworks like Selenium, they mainly focus on individual UI elements as follows.

http://tellurium-users.googlegroups.com/web/tellurium3.png?gda=aZZ_w0AAAAA7fMi2EBxrNTLhqoq3FzPrzblq5HA-QkbWcQ1F-Scqtki5CODg-kyjcKh65ubVQ_xtxVPdW1gYotyj7-X7wDON&gsc=jkTIIgsAAACI9y1tsPXdLT5_3omT2FAm

For example:

{{{
   selenium.click("//div[3]/input[@value='Create']");
}}}

For Tellurium, we treated the whole UI elements as a widget and we call it a UI module.

http://tellurium-users.googlegroups.com/web/tellurium4.png?gda=Fw6DGUAAAAA7fMi2EBxrNTLhqoq3FzPrzblq5HA-QkbWcQ1F-Scqtjl0DZWo_xwjp4raCAkSDqVtxVPdW1gYotyj7-X7wDON&gsc=jkTIIgsAAACI9y1tsPXdLT5_3omT2FAm

We define the UI module as follows.

{{{
    ui.Form(uid: "Form", clocator: [tag: "form"]){
        Div(uid: "User", clocator: [:]){
            Selector(uid: "Sex", clocator: [:])
            InputBox(uid: "Input", clocator: [tag: "input", type: "text", name: "j_username"])
        }
        Container(uid: "Finish", clocator: [tag: "tr"]){
            SubmitButton(uid: "Submit", clocator: [tag: "input", type: "submit", value: "Login", name: "submit"])
        }
    }
}}}

Then, we can have DSL style test code such as

{{{
   type "Form.User.Input", "John Fang"
}}}

There are couple advantages to describe the UI elements as a UI module.
  * _Expressive_: You can see clearly what the UI you are testing against.
  * _Robust_: Tellurium uses UI attributes to describe UI. If we chage the


= Details =