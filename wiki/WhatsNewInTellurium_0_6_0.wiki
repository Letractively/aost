#summary What's New in Tellurium 0.6.0.
#labels Phase-Implementation,Phase-Support
<wiki:toc max_depth="4" />

= Introduction =

Tellurium 0.6.0 is a feature rich release and it includes the following modules
  * Telluirum core 0.6.0
  * Tellurium Maven JUnit Archetype 1.0 and Tellurium Maven TestNG Archetype 1.0
  * Tellurium JUnit Reference Project 0.6.0 and Tellurium TestNG Reference Project 0.6.0
  * Customized Selenium server 1.0-te-2 with Tellurium Engine jQuery selector module

In the following sections, we will go over main features in each module.

= New Features =
== Tellurium Core 0.6.0 ==

The biggest move from Tellurium core 0.5.0 to 0.6.0 is the addition of jQuery selector support together with jQuery Selector Cache option, Selenium Grid support, New APIs for bulk data retrival and css styles, and numerous other enhancements.

=== jQuery Selector ===

The motivation behind the jQuery Selector is to improve the test speed in IE since IE lacks of native XPath support and the XPath is very slow. Tellurium exploits jQuery selector capability to improve the test speed dramatically. As a result, Tellurium Core 0.6.0 supports both XPath and jQuery selector and still uses XPath as the default locator. To use jQuery selector, simply call 

{{{
useJQuerySelector()
}}} 

in you code. To switch back to XPath locator, you should call

{{{
disableJQuerySelector()
}}}

Be aware that jQuery selector only works for *composite locator*, i.e., _clocator_. If you cannot have *base locator*, i.e., XPath, in your UI module.

jQuery Selector provides the following additional Selenium methods, which are utilized in DslContext to form a set of new DSL methods:

  # _String getAllText(String locator)_: Get all text from the set of elements corresponding to the jQuery Selector. This is a fast bulk data retrieval API to get back all data in one method call. 
  # _String getCSS(String locator, String cssName)_: Get the CSS properties for the set of elements corresponding to the jQuery Selector. 
  # _Number getJQuerySelectorCount(String locator)_: Get the number of elements matching the corresponding jQuery Selector

jQuery supports the following attribute selectors
  * _[attribute]_: have the specified attribute
  * _[attribute=value]_: have the specified attribute with a certain value
  * _[attribute!=value]_: either don't have the specified attribute or do have the specified attribute but not with a certain value.
  * _[attribute^=value]_: have the specified attribute and it starts with a certain value.
  * _[attribute$=value]_: have the specified attribute and it ends with a certain value.
  * _[attribute*=value]_: have the specified attribute and it contains a certain value.

Apart from the above, jQuery selector also provides the jQuery selector version of many DSL methods, for instance,

{{{
int getTableHeaderColumnNumBySelector(String uid)
}}}

But you should use locator agnostic API, such as

{{{
int getTableHeaderColumnNum(String uid) 
}}}

Under the hood, Tellurium core will call the appropriate API based on what locator you are currently using. For more details, please see [http://code.google.com/p/aost/wiki/TelluriumjQuerySelector Tellurium jQuery Selector Guide]. 

=== jQuery Selector Cache Option ===

jQuery cache is a mechanism to further improve the speed by reusing the found DOM reference for a given jQuery selector. Our benchmark results show that the jQuery cache could improve the speed up to 14% over the regular jQuery selector and over 27% for some extreme cases. But the improvement of jQuery cache over regular jQuery selector has upper bound, which is the portion of jQuery locating time out of the round trip time from Tellurium core to Selenium core. jQuery cache is still considered to be experimental at the current stage. Use it at your own discretion.

To make the cache option configurable in tellurium UI module, Tellurium introduces an attribute _cacheable_ to UI object, which is set to be true by default. For a Container type object, it has an extra attribute _noCacheForChildren_ to control whether to cache its children. 

One example UI module is defined as follows,

{{{
  ui.Table(uid: "issueResultWithCache", cacheable: "true", noCacheForChildren: "true", clocator: [id: "resultstable", class: "results"], group: "true") {
 
       ......

      //define table elements
      //for the border column
      TextBox(uid: "row: *, column: 1", clocator: [:])
      TextBox(uid: "row: *, column: 8", clocator: [:])
      TextBox(uid: "row: *, column: 10", clocator: [:])
      //For the rest, just UrlLink
      UrlLink(uid: "all", clocator: [:])
    }
}}}

Where the _cacheable_ can overwrite the default value in the UI object and _noCacheForChildren _ in the above example will force Tellurium to not cache its children.

Tellurium Core provides a set of methods for jQuery Selector cache control, for example,

  * _public void enableSelectorCache()_: Enable jQuery selector cache

  * _public boolean disableSelectorCache()_: Disable jQuery selector cache

  * _public void setCacheMaxSize(int size)_: Set the cache maximum size

  * _public void useDiscardOldCachePolicy()_: Use DiscardOldCachePolicy
 
For a complete list of cache control APIs, please check  [http://code.google.com/p/aost/wiki/jQuerySelectorCache The Cache Mechanism of jQuery Selector]

=== Selenium Grid Support ===

Selenium Grid transparently distributes your tests on multiple machines so that you can run your tests in parallel. We recently added support for Selenium Grid to the Tellurium. Now you can run the Tellurium tests against different browsers using Selenium Grid. Tellurium core is updated to support Selenium Grid sessions. You should following the details guide [http://code.google.com/p/aost/wiki/SeleniumGridAndTellurium Using Selenium Grid with Tellurium].

Make sure you do not run Selenium server internally and you should configure this in the  TelluriumConfig.groovy file as follows,

{{{
tellurium{
    //embedded selenium server configuration
    embeddedserver {
        //port number
        port = "4444"
        //whether to use multiple windows
        useMultiWindows = false
        //whether to run the embedded selenium server. If false, you need to manually set up a selenium server
        runInternally = false
        //profile location
        profile = ""
        //user-extension.js file
        userExtension = ""
    }
}}}

=== "Include" Frequently Used Sets of elements in UI Modules ===

Sometimes, you have a frequently used set of elements, which you do not want to redefined them over and over again in your UI module. Now, you can use the "Include" syntax to re-use pre-defined UI elements,

{{{
Include(uid: UID, ref: REFERRED_UID)
}}}  

You should use "ref" to reference the object you want to include, you can still specify the uid for the object (if you do not need a different UID, you do not need to specify it), if the object uid is not the same as the original one, Tellurium will clone a new object for you so that you can have multiple objects with different UIDs. 



 