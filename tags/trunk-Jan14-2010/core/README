                        README

----------------------------------------------------------------------------------------------------------------------------------------------------------
Jian Fang     (John.Jian.Fang@gmail.com)
Vivek Mongolu (vivekmongolu@gmail.com)
Matt Senter   (matt.senter@gmail.com)
Quan Bui      (Quan.Bui@gmail.com)
Haroon Rasheed (haroonzone@gmail.com)
Mikhail Koryak (koryak@gmail.com)
----------------------------------------------------------------------------------------------------------------------------------------------------------

The Tellurium Automated Testing Framework (Tellurium) is a UI module-based automated testing framework for web
applications. The UI module is a collection of UI elements you group together. Usually, the UI module represents
a composite UI object in the format of nested basic UI elements. For example, the Google search UI module can be
expressed as follows,

ui.Container(uid: "GoogleSearchModule", clocator: [tag: "td"], group: "true"){
   InputBox(uid: "Input", clocator: [title: "Google Search"])
   SubmitButton(uid: "Search", clocator: [name: "btnG", value: "Google Search"])
   SubmitButton(uid: "ImFeelingLucky", clocator: [value: "I'm Feeling Lucky"])
}

The UI module makes it possible to build UI elements' locators at run time. The framework does Object to Locator
Mapping (OLM) automatically at run time so that you can define UI objects simply by their attributes, i.e., Composite
Locators denoted by the "clocator". Furthermore, Tellurium uses the Group Locating Concept (GLC) to exploit
information inside a collection of UI components to help finding their locators and the GLC is denoted by the "group"
attribute in the above UI module.

The Tellurium framework defines a new Domain Specific Language (DSL) for web testing. Still take the above Google
search module as an example, you can use the following DSLs to do a Google search,

type "GoogleSearchModule.Input", "Tellurium test"
click "GoogleSearchModule.Search"
waitForPageToLoad 30000

One very powerful feature of Tellurium is that you can use UI templates to represent many identical UI elements or
dynamic size of different UI elements at runtime, which are extremely useful to test dynamic web such as a data grid.
One typical data grid example is as follows,

ui.Table(uid: "table", clocator: [:]){
   InputBox(uid: "row: 1, column: 1", clocator: [:])
   Selector(uid: "row: *, column: 2", clocator: [:])
   UrlLink(uid: "row: 3, column: *", clocator: [:])
   TextBox(uid: "all", clocator: [:])
}

Data Driven Testing is another important feature of Tellurium. You can define data format in an expressive way.
In you data file, you can specify which test you want to run, the input parameters, and expected results. Tellurium
automatically binds the input data to variables defined in your test script and run the tests you specified in the
input file. The test results will be recorded by a test listener and output in different formats, for example,
an XML file.

Tellurium UI Model Plugin (TrUMP) is a Firefox plugin to automatically create UI modules for users. In addition,
Tellurium provides you the capability to composite UI objects into a Tellurium widget object. You can pack Tellurium
widgets as a jar file and then use a Tellurium widget just like a single tellurium UI object once you include the
jar file. As a result, Tellurium is robust, expressive, flexible, and reusable.

The Tellurium framework is written in Groovy and Java. The test cases can be written in Java, Groovy, or pure DSL.
You do not really need to know Groovy before you use it because the UI module definition and actions on UIs are
written in DSLs and the rest could be written in Java syntax. Tellurium also supports JUnit and TestNG. Detailed
Introduction, User Guide, Frequent Asked Questions, and illustrative examples are provided.

Your feedback and comments are very important to us. Please post your comments and suggestions on Tellurium user
group or write directly to us.

Thanks.

--------------------------------------------------Project Structure----------------------------------------------------------------

src/main              ---------------- Tellurium source code

src/test/             ---------------- Tellurium testing code

        org/tellurium/test  ----------------- Unit tests and functional tests for Tellurium framework itself

        example/
                dsl/        -----------------  DSL testing scripts
                google/     -----------------  Ui modules for Tellurium testing using Google web sites as references
                tellurium/  -----------------  Ui modules for Tellurium testing using Tellurium project web site as a reference

                test/       -----------------  Actual tests
                     ddt/   -----------------  Tellurium Data Driven tests
                     groovy/-----------------  Tellurium Groovy test cases
                     java/  -----------------  Tellurium Java test cases


lib/                 ---------------------- Lib directory including all required jars

build.properties     ---------------------- configuration file for ant build.xml
build.xml            ---------------------- ant build script
rundsl.sh            ---------------------- shell script to run DSL testing scripts in Unix or Linux sytems
rundsl.bat           ---------------------- windows script to run DSL testing scripts
LICENSE.txt          ---------------------- License file
README               ---------------------- This file

---------------------------------------------------------------------------------------------------------------------------------

RESOURCES

Tellurium Project Home
http://code.google.com/p/aost/

Tellurium User Group
http://groups.google.com/group/tellurium-users

Tellurium User Guide
http://code.google.com/p/aost/wiki/UserGuide

Tellurium Introduction
http://code.google.com/p/aost/wiki/Introduction

Tellurium Tutorial
http://code.google.com/p/aost/wiki/Tutorial

Tellurium UI Model Plugin (TrUMP) 0.1.0
http://code.google.com/p/aost/wiki/TrUMP

Tellurium Maven Guide
http://code.google.com/p/aost/wiki/MavenHowTo

Tellurium jQuery Selector Guide
http://code.google.com/p/aost/wiki/TelluriumjQuerySelector

Reference Project Guide
http://code.google.com/p/aost/wiki/ReferenceProjectGuide

Tellurium Data Driven Testing
http://code.google.com/p/aost/wiki/DataDrivenTesting

Tellurium FAQs
http://code.google.com/p/aost/wiki/FAQ

NEWS

    * April 28, Tellurium provides Selenium Grid support
    * April 23, Tellurium Automated Testing Framework LinkedIn Group has been created and you are welcome to join.
    * April 14, Tellurium starts to support jQuery selector.
    * March 15, tutorial "10 Minutes to Tellurium" is created and it includes a wiki page, presentation slides,
      and a screencast video.
    * March 13, two Tellurium Maven archetypes are available, i.e., tellurium-junit-archetype and
      tellurium-testng-archetype for Tellurium JUnit and TestNG project, respectively.
    * March 4, Tellurium UI Module Firefox Plugin (TrUMP) 0.1.0 is released
    * February 18, Tellurium UI Module Firefox Plugin (TrUMP) 0.1.0 Release Candidate is available
    * February 17, Tellurium Demo Videos are uploaded, you can use VLC media player to watch them
    * January 29, Tellurium UI Module Firefox Plugin (TrUMP) 0.1.0 preview version is available
    * December 3, Tellurium core 0.5.0 and reference projects are released
    * December 2, Welcome Mikhail Koryak to our team
    * November 15, Tellurium 0.5.0 Release Candidate RC01 is out
    * August 22, Welcome Haroon Rasheed to our team.
    * August 13, Tellurium 0.4.0 is released and this release includes a lot of new features and enhancements such as
      data driven testing, framework configuration, and JUnit 4 support.
    * August 7, Welcome Quan Bui to our team.
    * July 29, The AOST framework is officially renamed to the Tellurium Automated Testing framework (Tellurium).
    * July 29, Welcome Matt Senter to our team.
    * July 22, Welcome Adrian Carr as a contributor to our project.
    * July 18, Welcome Vivek Mongolu to our team.
    * July 17, AOST user group is created. Please join and post your questions, comments, and suggestions there.
    * July 12, AOST 0.3.0 is out and it comes with significant feature enhancement including Composite Locator,
      Group Locating Concept, and Multiple UI Modules in one DslContext.
    * July 02, UI Object ID is refactored to support nested UI objects.
    * June 25, The AOST framework became public with version 0.2.0. The framework has gone through two phases of
      prototype and has already been used for couple internal projects at the release time.