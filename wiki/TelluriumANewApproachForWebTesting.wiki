#summary Tellurium: A New Approach for Web Testing.
#labels Phase-Implementation,Phase-Support

= Introduction =

== Challenges and Problems ==

Automated web testing has always been one of the most important and hot topics in software testing arena with web becoming one indispensable part of most people's lives. Web techniques keep moving forward and more and more dynamic web techniques are adopted by web developers. For example, Ajax is one of the most important ones. 

With the advent of new web techniques, automated web testing tools must keep up with the improvement and be able to address the following challenges imposed by the automated web testing nature and new web techniques:

  * *Javascript Events*: Javascript events are the foundation of all Javascript frameworks and are everywhere in today's web. The automated testing framework should be able to trigger the events in a very convenient way.
  * *Ajax for Dynamic Web Content*: Ajax is a convenient way to update the part of the web page without refresh the whole page. The web context for an Ajax application is usually dynamic. For example, in a data grid, the number of rows and data keep changing at runtime. 
  * *Robust to Changes*: A good automated web testing tool should be able to address the changes in the web context to some degree so that users do not need to keep updating the test code.
  * *Easy to Maintain*: In an agile world, the software are developed in multiple scrums with new features added on in each scrum. The functional tests or user acceptance tests must be refactored and updated for new features. The testing framework should provide the flexibility for users to maintain the test code very easily.
  * *Expressiveness*: The testing framework should be able to provide the users without too much coding experience to write test code/scripts easily in a way that they are familiar with, for example, use a domain specific language (DSL).
  * *Re-usability*: Many web applications use the same UI module for different part of the application. The adoption of Javascript frameworks such as Dojo and ExtJS increases the chance to use the same UI module for difference applications. A good testing framework should also be able to provide re-usability of test modules.

== Existing Open source Automated Web Testing Frameworks ==

The Selenium framework is the most popular open source automated web testing framework and it was a ground-breaking framework and it offered many unique features such as browser based testing, Selenium Grid, and "record and replay" testing mode using Selenium IDE. As a pioneer framework, it inevitably comes with some shortcomings. One important one is that it focuses on individual UI elements such as links and buttons, as a result, it is to address dynamic web content in Selenium. The "record and replay" testing mode does make it much easier for users, especially non-developers, to create a test case, however, it also suffers drawbacks such as difficult to refactor and maintain. Other downsides include the coupling of UI elements and test code, verbose, and fragile to changes. 

Take the following Selenium test code as an example,

{{{
   selenium.open("/BookApp/book/create");
   selenium.type("author", "Vivek");
   selenium.type("pages", "100");
   selenium.type("title", "Tellurium");
   selenium.click("//input[@value='Create']");
   selenium.waitForPageToLoad("30000");

   Assert.assertEquals(1,selenium.getXpathCount(“/html/body/div[4]/div[1]"));
}}}

Do you know what UI module is under testing? What does the xpath “/html/body/div[4]/div[1]" mean here? And what if the XPath becomes invalid due to change? As a result, the Selenium test code is easy to create, but hard to read and maintain. Let alone to address dynamic web context. 






 
      