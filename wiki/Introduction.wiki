#labels Featured,Phase-Implementation
= Introduction =

*Abstract Object-based Selenium Test* (_AOST_) framework
  * Written in *Groovy*, test cases can be written in *Java* or *Groovy* 
  * Include a *Domain Specific Language* (_DSL_) to define UI objects 
  * Can also use the _DSL_ to describe events, actions, or assertions 
  * Will include an *Object to Locator Mapping framework* (_OLM_)
  * Make it possible for users to write Selenium tests when they start coding
  * Reusable, easier to refactor and maintain
  * Provide _DSL_ script executor so that non-developers can write Selenium tests in DSL

= Details =

== UI Objects ==

The UI Object includes
  * Id: should be unique in a UI module
  * Namespace: for future extension
  * Locator: the locator of the UI object, could be XPATH, CSS selector... The easier way to find the locator would be to use firefox XPather plugin.
  * Features: the inherent feature of the UI component, for example, the selection UI component normally comes with “label=?” or “value=?”. Table always has the “table”, “tr”, “td”, “th” tags.

Regular UI objects include Button, CheckBox, Icon, InputBox, Selector, TextBox, Table... 
A container is a special UI object and it could be a pure abstract object to hold and group different UI objects together. The container will make the objects inside searchable since it uses a list to hold them.

Users can also define custom UI objects. They need to create a UI builder for each new UI 
object and add it to the UiObjectBuilderRegistry.

Be aware that each UI object only has predefined set of events or actions. For example, the InputBox has the _type_ action, but the Selector does not have that.

== DSL ==
 
DSL can only be run in *DslContext*, which defines the basic DSLs. 

=== Define UI objects ===
_ui.Container_ is used to define the UI objects on the web and map them to objects.
For example, the search module in the google start page can be defined by 
the following DSL.

{{{
ui.Container(id: "google_search"){
   InputBox(id: "inputbox1", locator: "//input[@title='Google Search']")
   Button(id: "button1", locator: "//input[@name='btnG' and @type='submit']")
}
}}}

The definition can be nested, for example
{{{
ui.Container(id: "parent_ui"){
   InputBox(id: "inputbox1", locator: "...")
   Button(id: "button1", locator: "...")
   Container(id: "child_ui){
     Selector(id: "selector1", locator: "...")
     ...
     Container(id: "grand_child"){
       TextBox(id: "textbox1", locator: "...")
       ...
     }
   }
}
}}}

=== Basic DSLs ===

Because of the Groovy Syntax, each method in the DslContext is a DSL expression.
For example, the _click_ method as follows:
{{{
def click(String id){
  ...
}
}}}
is a dsl in the format:
{{{
  click id
}}}

Similarly, we have the following dsls:
{{{
doubleClick id
clickAt id, coordination
check id
uncheck id
type id, input
keyType id, input
typeAndReturn id, input
clearText id
select id, target
selectByLabel  id, target
selectByValue id, target
waitForText id, timeout
isElementPresent id
isVisible id
isChecked id
waitForElementPresent id, timeout
waitForElementPresentid, timeout, step
getText id
getValue id
pause milliseconds
}}}

=== Extended DSLs ===
The DslContext can be extended to include more DSLs. For example, 
the DslScriptEngine extends DslContext to add the following DSL
{{{
openUrl url
}}}
and other assertions defined in GroovyTestCase.

== How to use ==

There are two ways to use AOST. The first one is first write your UI modules
in different Groovy files, which extends the DslContext class. Then write 
JUnit test cases. You can also include them in a test suite. 

If your test case only includes one file, you should use StandaloneAostSeleneseTestCase, but if you like to create multiple test files and put them in one test suite, you should use GroupAostSeleneseTestCase. The sample test suite is SampleAostSeleneseTestSuite. 
These limitations come from the fact that GroovyTestCase does not support JUnit 4 properly. Hope I can improve it or use TestNG later.

The other way is to write DSL script directly, which is recommended only for non-developers since you cannot create different modules if write in pure DSL. 
The DslScriptExecutor can be used to run the .dsl files.

== Examples ==

=== Google Start Page ===

First, create the google start page module in Groovy
{{{
package example.google

import aost.dsl.DslContext

class GoogleStartPage extends DslContext{

    public void defineUi() {
        ui.Container(id: "google_start_page"){
            InputBox(id: "inputbox1", locator: "//input[@title='Google Search']")
            Button(id: "button1", locator: "//input[@name='btnG' and @type='submit']")
        }
    }

    def type(String input){
        type "inputbox1", input
        pause 500
        click "button1"
        pause 1000        
    }
}
}}}

Then, write the JUnit test case as follows,

{{{
package example.test

import example.google.GoogleStartPage
import aost.test.StandaloneAostSeleneseTestCase

class GoogleStartPageTestCase extends StandaloneAostSeleneseTestCase{

    protected static GoogleStartPage gsp

    public void initUi() {
        gsp = new GoogleStartPage()
        gsp.defineUi()

    }

    public void setUp(){
        setUpForClass()
    }

    public void tearDown(){
        tearDownForClass()
    }

    void testTypeGoogle(){
        connectUrl("http://www.google.com")
        gsp.type("google")
    }
}
}}}

Optionally, you can also write the DSL script file directly:

{{{
ui.Container(id: "google_start_page"){
    InputBox(id: "inputbox1", locator: "//input[@title='Google Search']")
    Button(id: "button1", locator: "//input[@name='btnG' and @type='submit']")
}

openUrl "http://www.google.com"
type "inputbox1", "Cobrakai"
pause 500
click "button1"
pause 1000
}}}

Then use DslScriptExecutor to run it.

=== Google Code Hosting Page ===

The google code hosting page includes nested tables to show labels for 
projects. AOST supports nested IDs. For example XXX.YYY.ZZZ represents the fact that
the UI object YYY is inside XXX and it holds the ZZZ Ui object. Usually 
the id of the UI object is the one you specified in the ui.Container block.
The exceptions are tables and lists, which use [x][y] or [x] to reference
its elements inside.

The Ui module for the label tables is defined as

{{{
ui.Container(id: "googlecodehosting"){
  Table(id: "labels_table", locator: "//table[descendant::div[contains(text(),\"Example project labels:\")]]"){
    TextBox(id: "row: 1, column: 1", locator: "/div")
    Table(id: "row: 2, column: 1", locator: "/div[@id=\"popular\"]/table"){
       UrlLink(id: "all", locator: "/a")
    }
  }
}
}}}

The module functions are defined as follows,

{{{
    public String getModuleLabel(){
        getText "labels_table[1][1]"
    }

    public int getLabelTableRowNum(){
        getTableMaxRowNum "labels_table[2][1]"
    }

    public int getLabelTableColumnNum(){
        getTableMaxColumnNum "labels_table[2][1]"
    }

    def getTableElement(int row, int column){
        getTableElement "labels_table[2][1].[${row}][${column}]"
    }

    Map getAllLabels(){
        int nrow = getTableMaxRowNum("labels_table[2][1]")
        int ncolumn = getTableMaxColumnNum("labels_table[2][1]")

        def map = [:]
        for(int i=1; i<=nrow; i++){
            for(int j=1; j<=ncolumn; j++){
                String label = getText("labels_table[2][1].[${i}][${j}]")
                map.put(label, [i, j])
            }
        }

        return map
    }

    void clickOnLable(int row, int column){
        click  "labels_table[2][1].[${row}][${column}]"
        pause 5000
    }

}}}

The actual test case is 

{{{
class GoogleCodeHostingTestCase extends StandaloneAostSeleneseTestCase {

    protected static GoogleCodeHosting gch

    public void initUi() {
        gch = new GoogleCodeHosting()
        gch.defineUi()

    }

    public void setUp(){
        setUpForClass()
    }

    public void tearDown(){
        tearDownForClass()
    }

    void testCodeLabelTable(){
        connectUrl("http://code.google.com/hosting/")
        String label = gch.getModuleLabel()
        assertEquals("Example project labels:", label)
        
        int nrow = gch.getLabelTableRowNum()
        assertEquals(3, nrow)

        int ncolumn = gch.getLabelTableColumnNum()
        assertEquals(6, ncolumn)
        
        for(int i=1; i<=nrow; i++){
            for(int j=1; j<=ncolumn; j++){
               def obj = gch.getTableElement(i, j)
               assertTrue(obj instanceof UrlLink)
            }
        }
        Map map = gch.getAllLabels()
        assertEquals(18, map.size())

        int[] index = map.get("Java")
        assertNotNull(index)
        assertEquals(2, index.length)

        //click on "Java" link
        gch.clickOnLable(index[0], index[1])
    }
}
}}}

Please see source code on the subversion trunk for details