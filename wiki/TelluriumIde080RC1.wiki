#summary Tellurium IDE 0.8.0 RC1.
#labels Phase-Implementation,Phase-Support
<wiki:toc max_depth="5" />

= Introduction =

Tellurium IDE is a Firefox plugin to record user actions and automatically generate Groovy DSL script. Tellurium IDE is spawned from Tellurium UI Module Firefox Plugin  [http://code.google.com/p/aost/wiki/UserGuide070TelluriumSubprojects#Tellurium_UI_Module_Plugin_%28TrUMP%29 Trump].

== Feature ==

Telurium IDE 0.8.0 RC1 is a feature rich release:
  * Record user actions
  * Automatically generate UI module and DSL script
  * Test generated DSL script
  * Customize, add, and update DSL script
  * Export DSL Script to Groovy DSL or Java test case
  * Test runner is based on Tellurium new engine

== Design ==

http://tellurium-developers.googlegroups.com/web/trumpworkflow.png?gda=9farzUMAAAC3f0S777RoMipgwttRc5E0rE3sb7K01jCxhcA7IRHMaYREyMfmzRjWt2IyFXBxC30ytiJ-HdGYYcPi_09pl8N7FWLveOaWjzbYnpnkpmxcWg

The workflow is shown as above:
  # User acts on the web and Trump records the events
  # The events are stored as commands with fields such as name, value, and reference id
  # In the meanwhile, the dom node and its reference id are pushed into a list
  # User select on the web and Trump also records the events 
  # The event does not have a command associated with it and is only pushed to the DOM list
  # An inner tree is built based on the dom list
  # The UI module is generated from the inner tree
  # At the same time, a reference id to UID map is created
  # The UI modules are put into the top of output script file
  # The reference ids in the command list are replaced with their UIDs
  # The updated command list is turned into Tellurium DSL script

= Workflow =

== Record ==

http://tellurium-users.googlegroups.com/web/TelluriumIDERecordView.png?gda=9sc9jEwAAADzylifMuGHtadsGrIEvqZX6EQSG-Q9tkGBWlgjEgzAjMx10vtAIWPB37ZH86WX23MSpXuADwlmQ2U0jcQaQQWx_Vpvmo5s1aABVJRO3P3wLQ&gsc=xjJamgsAAAC59Gng8z5Qy5sBxjkZ-0PD

== Replay ==

http://tellurium-users.googlegroups.com/web/TelluriumIDECommandViewAssertion.png?gda=5Degt1YAAADzylifMuGHtadsGrIEvqZXEY5GxZ10VGq9YR1SKTnX691yIRGPql2sUg_wexYEWkQhWUVHr_q0Jl4M23uJko9id64s9EZTLP9aL_4jXQez_BPhGuxsWDLdLep2NLleRSE&gsc=txxv_QsAAAA-vAePfxKkJQy-212UCZNM

== Customize ==

http://tellurium-users.googlegroups.com/web/TelluriumIDECommandViewCustomize.png?gda=BXR8CFYAAADzylifMuGHtadsGrIEvqZX6EQSG-Q9tkGBWlgjEgzAjN1yIRGPql2sUg_wexYEWkShR1S4krmxhj0tTtlNpUN4d64s9EZTLP9aL_4jXQez_BPhGuxsWDLdLep2NLleRSE&gsc=xjJamgsAAAC59Gng8z5Qy5sBxjkZ-0PD

== Source ==

http://tellurium-users.googlegroups.com/web/TelluriumIDESourceView.png?gda=A43yREwAAADzylifMuGHtadsGrIEvqZXEY5GxZ10VGq9YR1SKTnX61YcCTzBHlOy02h_YJwQ91ISpXuADwlmQ2U0jcQaQQWx_Vpvmo5s1aABVJRO3P3wLQ&gsc=txxv_QsAAAA-vAePfxKkJQy-212UCZNM

== Export ==

http://tellurium-users.googlegroups.com/web/TelluriumIDEExportMenu.png?gda=j2qv3UwAAADzylifMuGHtadsGrIEvqZXEY5GxZ10VGq9YR1SKTnX66dt_Hfg7eIfrxPn9L3dV5-047q73-aFuNjPYpy7W7T-_Vpvmo5s1aABVJRO3P3wLQ&gsc=txxv_QsAAAA-vAePfxKkJQy-212UCZNM

= Test =

== Run DSL Script ==

Tellurium 0.7.0 provides a rundsl.groovy script for users to run DSL test script. The rundsl.groovy uses [http://groovy.codehaus.org/Grape Groovy Grape] to automatically download all dependencies and then run DSL script.

First, you need to configure Grape. Put the following grapeConfig.xml file into your home/.groovy/.

{{{
<ivysettings>
  <settings defaultResolver="downloadGrapes"/>
  <property
    name="local-maven2-pattern"
    value="${user.home}/.m2/repository/[organisation]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]"
    override="false" />
  <resolvers>
    <chain name="downloadGrapes">
      <filesystem name="cachedGrapes">
        <ivy pattern="${user.home}/.groovy/grapes/[organisation]/[module]/ivy-[revision].xml"/>
        <artifact pattern="${user.home}/.groovy/grapes/[organisation]/[module]/[type]s/[artifact]-[revision].[ext]"/>
      </filesystem>
      <filesystem name="local-maven-2" m2compatible="true" local="true">
        <ivy pattern="${local-maven2-pattern}"/>
        <artifact pattern="${local-maven2-pattern}"/>
      </filesystem>
      <!-- todo add 'endorsed groovy extensions' resolver here -->
      <ibiblio name="kungfuters.3rdparty" root="http://maven.kungfuters.org/content/repositories/thirdparty/" m2compatible="true"/>
      <ibiblio name="codehaus" root="http://repository.codehaus.org/" m2compatible="true"/>
      <ibiblio name="ibiblio" m2compatible="true"/>
      <ibiblio name="java.net2" root="http://download.java.net/maven/2/" m2compatible="true"/>
      <ibiblio name="openqa" root="http://archiva.openqa.org/repository/releases/" m2compatible="true"/>
      <ibiblio name="kungfuters.snapshot" root="http://maven.kungfuters.org/content/repositories/snapshots/" m2compatible="true"/>
      <ibiblio name="kungfuters.release" root="http://maven.kungfuters.org/content/repositories/releases/" m2compatible="true"/>
    </chain>
  </resolvers>
</ivysettings>
}}}

Then run 

{{{
groovy rundsl.groovy -f DSL_script_name
}}}

If you are behind a firewall
{{{
groovy -Dhttp.proxyHost=proxy_host -Dhttp.proxyPort=proxy_port rundsl.groovy -f DSL_script_name
}}}
 
If you defined custom UI objects in your project, you should first build the jar artifact, and install it to your local Maven repo. Then update the rundsl.groovy file to add the new dependency. For example, in the tellurium-website reference project, we defined custom UI objects, we added the following two lines into the rundsl.groovy script.

{{{
Grape.grab(group:'org.telluriumsource', module:'tellurium-website', version:'0.7.0-SNAPSHOT', classLoader:this.class.classLoader.rootLoader)

...

   @Grab(group='org.telluriumsource', module='tellurium-website', version='0.7.0-SNAPSHOT')
}}}
 
An example rundsl.groovy script is as follows:

{{{
import groovy.grape.Grape;

Grape.grab(group:'org.telluriumsource', module:'tellurium-core', version:'0.8.0-SNAPSHOT', classLoader:this.class.classLoader.rootLoader)
Grape.grab(group:'org.stringtree', module:'stringtree-json', version:'2.0.10', classLoader:this.class.classLoader.rootLoader)
Grape.grab(group:'caja', module:'json_simple', version:'r1', classLoader:this.class.classLoader.rootLoader)
Grape.grab(group:'org.seleniumhq.selenium.server', module:'selenium-server', version:'1.0.1-te4-SNAPSHOT', classLoader:this.class.classLoader.rootLoader)
Grape.grab(group:'org.seleniumhq.selenium.client-drivers', module:'selenium-java-client-driver', version:'1.0.1', classLoader:this.class.classLoader.rootLoader)
Grape.grab(group:'org.apache.poi', module:'poi', version:'3.0.1-FINAL', classLoader:this.class.classLoader.rootLoader)
Grape.grab(group:'junit', module:'junit', version:'4.7', classLoader:this.class.classLoader.rootLoader)

import org.telluriumsource.dsl.DslScriptExecutor

@Grapes([
   @Grab(group='org.codehaus.groovy', module='groovy-all', version='1.7.0'),
   @Grab(group='org.seleniumhq.selenium.server', module='selenium-server', version='1.0.1-te4-SNAPSHOT', transitive=false),
   @Grab(group='org.seleniumhq.selenium.client-drivers', module='selenium-java-client-driver', version='1.0.1'),
   @Grab(group='junit', module='junit', version='4.7'),
   @Grab(group='caja', module='json_simple', version='r1'),
   @Grab(group='org.apache.poi', module='poi', version='3.0.1-FINAL'),
   @Grab(group='org.stringtree', module='stringtree-json', version='2.0.10'),
   @Grab(group='org.telluriumsource', module='tellurium-core', version='0.8.0-SNAPSHOT'),
])

def runDsl(String[] args) {
  def cli = new CliBuilder(usage: 'rundsl.groovy -[hf] [scriptname]')
  cli.with {
    h longOpt: 'help', 'Show usage information'
    f longOpt: 'scriptname',   'DSL script name'
  }
  def options = cli.parse(args)
  if (!options) {
    return
  }
  if (options.h) {
    cli.usage()
    return
  }
  if (options.f) {
    def extraArguments = options.arguments()
    if (extraArguments) {
      extraArguments.each {String name ->
        def input = [name].toArray(new String[0])
        DslScriptExecutor.main(input)
      }
    }
  }

}

println "Running DSL test script, press Ctrl+C to stop."

runDsl(args)

}}}

== Generated DSL Script ==

{{{
/**
 *      This Groovy DSL script is automatically generated by Tellurium IDE 0.8.0.
 *
 *      To run the script, you need Tellurium rundsl.groovy script. 
 *      The detailed guide is available at:
 *              http://code.google.com/p/aost/wiki/UserGuide070TelluriumBasics#Run_DSL_Script
 *
 *      For any problems, please report to Tellurium User Group at: 
 *              http://groups.google.com/group/tellurium-users
 *
 */

                ui.Form(uid: "Form", clocator: [tag: "form", method: "GET", action: "list"]){
                                Selector(uid: "Can", clocator: [tag: "select", direct: "true", name: "can", id: "can"])
                                InputBox(uid: "Searchq", clocator: [tag: "input", type: "text", name: "q", id: "searchq"])
                                SubmitButton(uid: "Search", clocator: [tag: "input", direct: "true", type: "submit", value: "Search"])
                        }

                ui.Container(uid: "Mt", clocator: [tag: "table", id: "mt"]){
                                UrlLink(uid: "Wiki", clocator: [tag: "a", text: "Wiki"])
                                UrlLink(uid: "RegexpProjectsHome", clocator: [tag: "a", text: "regexp:Project\\sHome"])
                                UrlLink(uid: "Downloads", clocator: [tag: "a", text: "Downloads"])
                                UrlLink(uid: "Issues", clocator: [tag: "a", text: "Issues"])
                                UrlLink(uid: "Source", clocator: [tag: "a", text: "Source"])
                                UrlLink(uid: "Administer", clocator: [tag: "a", text: "Administer"])
                        }

                connectSeleniumServer()
                connectUrl "http://code.google.com/p/aost/downloads/list"
                selectByLabel "Form.Can", "regexp:\\sCurrent downloads"
                selectByLabel "Form.Can", "regexp:\\sFeatured downloads"
                type "Form.Searchq", "test"
                def x = getValue("Form.Searchq")
                assertEquals x, "test"
                click "Form.Search"
                waitForPageToLoad 30000
}}}


{{{
[jfang@Mars workspace]$ tree demo/
demo/
|-- TelluriumConfig.groovy
|-- TelluriumDemo.groovy
`-- rundsl.groovy

}}}

= What's Next =

  * Let user select UI element when customize UI
  * Improve UI Module generating algorithm
  * Generalize UI to UI templates such as List and Table
  * Finish up new engine API

= Resources =

  * [http://code.google.com/p/aost/ Tellurium Project Home]
  * [http://groups.google.com/group/tellurium-users Tellurium User Group]
  * [http://twitter.com/TelluriumSource Tellurium on Twitter]
  * [http://code.google.com/p/aost/wiki/Tellurium070Released Tellurium 0.7.0]